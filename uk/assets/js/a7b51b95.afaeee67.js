"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[3703],{9602:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"api/wallet-set-primary","title":"Set Primary Wallet API","description":"Overview","source":"@site/docs/api/wallet-set-primary.md","sourceDirName":"api","slug":"/api/wallet-set-primary","permalink":"/ring/uk/docs/api/wallet-set-primary","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/api/wallet-set-primary.md","tags":[],"version":"current","lastUpdatedAt":1750255417000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Wallet Creation API","permalink":"/ring/uk/docs/api/wallet-create"},"next":{"title":"Wallet Transfer API","permalink":"/ring/uk/docs/api/wallet-transfer"}}');var t=s(74848),a=s(28453);const i={},l="Set Primary Wallet API",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Request Body",id:"request-body",level:2},{value:"Example Request",id:"example-request",level:3},{value:"Response Format",id:"response-format",level:2},{value:"Success Response (200)",id:"success-response-200",level:3},{value:"Already Primary Response (200)",id:"already-primary-response-200",level:3},{value:"Error Responses",id:"error-responses",level:3},{value:"Unauthorized (401)",id:"unauthorized-401",level:4},{value:"Bad Request (400)",id:"bad-request-400",level:4},{value:"Not Found (404)",id:"not-found-404",level:4},{value:"Internal Server Error (500)",id:"internal-server-error-500",level:4},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"React Component with Form",id:"react-component-with-form",level:3},{value:"Server Action (Next.js 13+)",id:"server-action-nextjs-13",level:3},{value:"cURL Example",id:"curl-example",level:3},{value:"Business Logic",id:"business-logic",level:2},{value:"Database Schema",id:"database-schema",level:2},{value:"Before Update",id:"before-update",level:3},{value:"After Update",id:"after-update",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Performance Notes",id:"performance-notes",level:2},{value:"Rate Limiting",id:"rate-limiting",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Testing",id:"testing",level:2},{value:"Unit Test Example",id:"unit-test-example",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"set-primary-wallet-api",children:"Set Primary Wallet API"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Set Primary Wallet API"})," allows authenticated users to change their primary wallet address. This endpoint swaps the current primary wallet with one of the user's additional wallets, maintaining the wallet history and encrypted private keys."]}),"\n",(0,t.jsx)(n.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"URL"}),": ",(0,t.jsx)(n.code,{children:"/api/wallet/set-primary"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Method"}),": ",(0,t.jsx)(n.code,{children:"POST"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication"}),": Required (NextAuth.js session)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Content-Type"}),": ",(0,t.jsx)(n.code,{children:"application/json"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,t.jsx)(n.p,{children:"This endpoint requires user authentication via NextAuth.js session:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { getSession } from 'next-auth/react'\n\nconst session = await getSession()\nif (!session) {\n  // Handle unauthenticated state\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"request-body",children:"Request Body"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"address"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"The wallet address to set as primary"})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"example-request",children:"Example Request"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "address": "0x742d35cc6cf32a532a4ac7b6c3b8b5e8f9e2cfe7"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"response-format",children:"Response Format"}),"\n",(0,t.jsx)(n.h3,{id:"success-response-200",children:"Success Response (200)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Primary wallet updated successfully"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"already-primary-response-200",children:"Already Primary Response (200)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "message": "This wallet is already the primary wallet"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"error-responses",children:"Error Responses"}),"\n",(0,t.jsx)(n.h4,{id:"unauthorized-401",children:"Unauthorized (401)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Unauthorized"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"bad-request-400",children:"Bad Request (400)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Address is required"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"not-found-404",children:"Not Found (404)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "User not found"\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Wallet not found"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"internal-server-error-500",children:"Internal Server Error (500)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Failed to set primary wallet"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,t.jsx)(n.h3,{id:"react-component-with-form",children:"React Component with Form"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { useState } from 'react'\nimport { useSession } from 'next-auth/react'\n\ninterface Wallet {\n  address: string\n  encryptedPrivateKey: string\n  createdAt: Date\n}\n\nfunction PrimaryWalletSelector({ additionalWallets }: { additionalWallets: Wallet[] }) {\n  const { data: session } = useSession()\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState<string | null>(null)\n\n  const handleSetPrimary = async (address: string) => {\n    if (!session) return\n\n    setLoading(true)\n    setError(null)\n    setSuccess(null)\n\n    try {\n      const response = await fetch('/api/wallet/set-primary', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ address }),\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to set primary wallet')\n      }\n\n      setSuccess(data.message)\n      // Optionally refresh the page or update state\n      window.location.reload()\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-semibold\">Additional Wallets</h3>\n      \n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n          {error}\n        </div>\n      )}\n      \n      {success && (\n        <div className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded\">\n          {success}\n        </div>\n      )}\n\n      <div className=\"space-y-2\">\n        {additionalWallets.map((wallet) => (\n          <div key={wallet.address} className=\"flex items-center justify-between p-3 border rounded\">\n            <span className=\"font-mono text-sm\">\n              {wallet.address.slice(0, 6)}...{wallet.address.slice(-4)}\n            </span>\n            <button\n              onClick={() => handleSetPrimary(wallet.address)}\n              disabled={loading}\n              className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50\"\n            >\n              {loading ? 'Setting...' : 'Set as Primary'}\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"server-action-nextjs-13",children:"Server Action (Next.js 13+)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"'use server'\n\nimport { auth } from '@/auth'\nimport { redirect } from 'next/navigation'\n\nexport async function setPrimaryWalletAction(formData: FormData) {\n  const session = await auth()\n  \n  if (!session) {\n    redirect('/auth/signin')\n  }\n\n  const address = formData.get('address') as string\n\n  if (!address) {\n    throw new Error('Wallet address is required')\n  }\n\n  const response = await fetch(`${process.env.NEXTAUTH_URL}/api/wallet/set-primary`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Cookie': request.headers.get('cookie') || '',\n    },\n    body: JSON.stringify({ address }),\n  })\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error.error || 'Failed to set primary wallet')\n  }\n\n  // Redirect to wallet page with success message\n  redirect('/wallet?success=primary-updated')\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"curl-example",children:"cURL Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -X POST https://ring.ck.ua/api/wallet/set-primary \\\n  -H "Content-Type: application/json" \\\n  -H "Cookie: next-auth.session-token=your-session-token" \\\n  -d \'{\n    "address": "0x742d35cc6cf32a532a4ac7b6c3b8b5e8f9e2cfe7"\n  }\'\n'})}),"\n",(0,t.jsx)(n.h2,{id:"business-logic",children:"Business Logic"}),"\n",(0,t.jsx)(n.p,{children:"The endpoint performs the following operations:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication Check"}),": Verifies user session"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Input Validation"}),": Ensures address is provided"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User Data Retrieval"}),": Fetches current user data from Firestore"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Primary Check"}),": Verifies if requested wallet is already primary"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Wallet Lookup"}),": Finds the wallet in additional wallets list"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Wallet Swap"}),": Swaps primary and selected additional wallet"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Database Update"}),": Updates user document in Firestore"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cache Invalidation"}),": Clears wallet list cache for the user"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,t.jsx)(n.h3,{id:"before-update",children:"Before Update"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "userId": "user123",\n  "walletAddress": "0x123...abc",\n  "encryptedPrivateKey": "encrypted_key_1",\n  "additionalWallets": [\n    {\n      "address": "0x742...fe7",\n      "encryptedPrivateKey": "encrypted_key_2",\n      "createdAt": "2024-01-15T10:30:00Z"\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"after-update",children:"After Update"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "userId": "user123",\n  "walletAddress": "0x742...fe7",\n  "encryptedPrivateKey": "encrypted_key_2",\n  "additionalWallets": [\n    {\n      "address": "0x123...abc",\n      "encryptedPrivateKey": "encrypted_key_1",\n      "createdAt": "2024-01-10T08:15:00Z"\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication Required"}),": Only authenticated users can change primary wallets"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ownership Verification"}),": Users can only set their own additional wallets as primary"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Private Key Security"}),": Encrypted private keys are safely transferred during swap"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cache Management"}),": User-specific cache is cleared to prevent stale data"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"performance-notes",children:"Performance Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cache Invalidation"}),": Automatically clears wallet list cache for updated user"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Atomic Operations"}),": Uses Firestore transactions for data consistency"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Minimal Data Transfer"}),": Only necessary fields are updated in the database"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User-based"}),": 10 requests per minute per authenticated user"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Global"}),": 1000 requests per minute across all users"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"The API implements comprehensive error handling:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Input validation errors return 400 status"}),"\n",(0,t.jsx)(n.li,{children:"Authentication errors return 401 status"}),"\n",(0,t.jsx)(n.li,{children:"Missing resource errors return 404 status"}),"\n",(0,t.jsx)(n.li,{children:"Server errors return 500 status with generic messages"}),"\n",(0,t.jsx)(n.li,{children:"All errors are logged for debugging"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.h3,{id:"unit-test-example",children:"Unit Test Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { POST } from '@/app/api/wallet/set-primary/route'\nimport { NextRequest } from 'next/server'\n\n// Mock authentication\njest.mock('@/auth')\n\ndescribe('/api/wallet/set-primary', () => {\n  it('should set primary wallet successfully', async () => {\n    // Mock authenticated session\n    (auth as jest.Mock).mockResolvedValue({\n      user: { id: 'user123' }\n    })\n\n    const request = new NextRequest('http://localhost:3000/api/wallet/set-primary', {\n      method: 'POST',\n      body: JSON.stringify({\n        address: '0x742d35cc6cf32a532a4ac7b6c3b8b5e8f9e2cfe7'\n      })\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.message).toBe('Primary wallet updated successfully')\n  })\n\n  it('should return error for missing address', async () => {\n    const request = new NextRequest('http://localhost:3000/api/wallet/set-primary', {\n      method: 'POST',\n      body: JSON.stringify({})\n    })\n\n    const response = await POST(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(400)\n    expect(data.error).toBe('Address is required')\n  })\n})\n"})}),"\n",(0,t.jsx)(n.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api/wallet-list",children:(0,t.jsx)(n.code,{children:"GET /api/wallet/list"})})," - List all user wallets"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api/wallet-create",children:(0,t.jsx)(n.code,{children:"POST /api/wallet/create"})})," - Create new wallet"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api/wallet-balance",children:(0,t.jsx)(n.code,{children:"GET /api/wallet/balance"})})," - Check wallet balance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api/wallet-transfer",children:(0,t.jsx)(n.code,{children:"POST /api/wallet/transfer"})})," - Transfer funds between wallets"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var r=s(96540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);