"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[8088],{2999:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api/entities-create","title":"Entity Creation API","description":"Overview","source":"@site/docs/api/entities-create.md","sourceDirName":"api","slug":"/api/entities-create","permalink":"/ring/uk/docs/api/entities-create","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/api/entities-create.md","tags":[],"version":"current","lastUpdatedAt":1750255417000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Entities List API","permalink":"/ring/uk/docs/api/entities-list"},"next":{"title":"Entity Retrieval by ID API","permalink":"/ring/uk/docs/api/entities-get-by-id"}}');var s=i(74848),r=i(28453);const a={},o="Entity Creation API",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"Authentication Requirements",id:"authentication-requirements",level:2},{value:"Request Format",id:"request-format",level:2},{value:"Headers",id:"headers",level:3},{value:"Request Body Schema",id:"request-body-schema",level:3},{value:"Example Request Body",id:"example-request-body",level:3},{value:"Response Format",id:"response-format",level:2},{value:"Success Response (201 Created)",id:"success-response-201-created",level:3},{value:"Error Responses",id:"error-responses",level:2},{value:"400 Bad Request",id:"400-bad-request",level:3},{value:"401 Unauthorized",id:"401-unauthorized",level:3},{value:"403 Forbidden",id:"403-forbidden",level:3},{value:"500 Internal Server Error",id:"500-internal-server-error",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"JavaScript/TypeScript",id:"javascripttypescript",level:3},{value:"React Hook Example",id:"react-hook-example",level:3},{value:"cURL Example",id:"curl-example",level:3},{value:"Validation Rules",id:"validation-rules",level:2},{value:"Required Fields",id:"required-fields",level:3},{value:"Optional Field Constraints",id:"optional-field-constraints",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Business Logic",id:"business-logic",level:2},{value:"Testing Examples",id:"testing-examples",level:2},{value:"Unit Test Example",id:"unit-test-example",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2},{value:"Changelog",id:"changelog",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"entity-creation-api",children:"Entity Creation API"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Entity Creation API allows authenticated users to create new entities in the Ring Platform. This endpoint supports creating various types of entities including companies, organizations, and projects with comprehensive metadata and visibility controls."}),"\n",(0,s.jsx)(n.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"URL"}),": ",(0,s.jsx)(n.code,{children:"/api/entities/create"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Method"}),": ",(0,s.jsx)(n.code,{children:"POST"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authentication"}),": Required (JWT Token)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rate Limit"}),": 60 requests per minute for authenticated users"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Content-Type"}),": ",(0,s.jsx)(n.code,{children:"application/json"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"authentication-requirements",children:"Authentication Requirements"}),"\n",(0,s.jsx)(n.p,{children:"This endpoint requires authentication with one of the following roles:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ADMIN"})," - Full access to create any entity type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CONFIDENTIAL"})," - Can create confidential entities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"MEMBER"})," - Can create public and member-visible entities"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"request-format",children:"Request Format"}),"\n",(0,s.jsx)(n.h3,{id:"headers",children:"Headers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"POST /api/entities/create\nContent-Type: application/json\nAuthorization: Bearer <jwt_token>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"request-body-schema",children:"Request Body Schema"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface CreateEntityRequest {\n  name: string;                    // Entity name (required)\n  description?: string;            // Entity description\n  website?: string;               // Official website URL\n  email?: string;                 // Contact email\n  phone?: string;                 // Contact phone number\n  address?: string;               // Physical address\n  category: string;               // Entity category\n  tags?: string[];                // Searchable tags\n  visibility: 'public' | 'member' | 'confidential'; // Visibility level\n  logo?: string;                  // Logo URL\n  socialLinks?: {                 // Social media links\n    linkedin?: string;\n    twitter?: string;\n    facebook?: string;\n    github?: string;\n  };\n  foundedYear?: number;           // Year founded\n  employeeCount?: string;         // Employee count range\n  industry?: string;              // Industry classification\n  location?: {                    // Geographic location\n    city?: string;\n    country?: string;\n    coordinates?: {\n      lat: number;\n      lng: number;\n    };\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-request-body",children:"Example Request Body"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "name": "TechCorp Solutions",\n  "description": "Leading software development company specializing in AI and blockchain solutions",\n  "website": "https://techcorp.example.com",\n  "email": "contact@techcorp.example.com",\n  "phone": "+380123456789",\n  "address": "123 Innovation Street, Kyiv, Ukraine",\n  "category": "Software Development",\n  "tags": ["AI", "Blockchain", "Web Development", "Mobile Apps"],\n  "visibility": "public",\n  "logo": "https://storage.example.com/logos/techcorp.png",\n  "socialLinks": {\n    "linkedin": "https://linkedin.com/company/techcorp",\n    "twitter": "https://twitter.com/techcorp",\n    "github": "https://github.com/techcorp"\n  },\n  "foundedYear": 2020,\n  "employeeCount": "11-50",\n  "industry": "Information Technology",\n  "location": {\n    "city": "Kyiv",\n    "country": "Ukraine",\n    "coordinates": {\n      "lat": 50.4501,\n      "lng": 30.5234\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"response-format",children:"Response Format"}),"\n",(0,s.jsx)(n.h3,{id:"success-response-201-created",children:"Success Response (201 Created)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "id": "entity_123456789",\n  "name": "TechCorp Solutions",\n  "description": "Leading software development company specializing in AI and blockchain solutions",\n  "website": "https://techcorp.example.com",\n  "email": "contact@techcorp.example.com",\n  "phone": "+380123456789",\n  "address": "123 Innovation Street, Kyiv, Ukraine",\n  "category": "Software Development",\n  "tags": ["AI", "Blockchain", "Web Development", "Mobile Apps"],\n  "visibility": "public",\n  "logo": "https://storage.example.com/logos/techcorp.png",\n  "socialLinks": {\n    "linkedin": "https://linkedin.com/company/techcorp",\n    "twitter": "https://twitter.com/techcorp",\n    "github": "https://github.com/techcorp"\n  },\n  "foundedYear": 2020,\n  "employeeCount": "11-50",\n  "industry": "Information Technology",\n  "location": {\n    "city": "Kyiv",\n    "country": "Ukraine",\n    "coordinates": {\n      "lat": 50.4501,\n      "lng": 30.5234\n    }\n  },\n  "onlineStatus": "offline",\n  "lastOnline": null,\n  "createdAt": "2025-01-14T17:10:00Z",\n  "updatedAt": "2025-01-14T17:10:00Z",\n  "createdBy": "user_987654321"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"error-responses",children:"Error Responses"}),"\n",(0,s.jsx)(n.h3,{id:"400-bad-request",children:"400 Bad Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Invalid JSON format"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"401-unauthorized",children:"401 Unauthorized"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Unauthorized"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"403-forbidden",children:"403 Forbidden"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Only ADMIN or CONFIDENTIAL users can create confidential entities"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"500-internal-server-error",children:"500 Internal Server Error"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Failed to create entity: Internal Server Error"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,s.jsx)(n.h3,{id:"javascripttypescript",children:"JavaScript/TypeScript"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async function createEntity(entityData: CreateEntityRequest): Promise<Entity> {\n  const response = await fetch('/api/entities/create', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(entityData)\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to create entity');\n  }\n\n  return response.json();\n}\n\n// Usage example\nconst newEntity = await createEntity({\n  name: \"TechCorp Solutions\",\n  description: \"Leading software development company\",\n  category: \"Software Development\",\n  visibility: \"public\",\n  website: \"https://techcorp.example.com\"\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"react-hook-example",children:"React Hook Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { useState } from 'react';\n\nfunction useCreateEntity() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const createEntity = async (entityData: CreateEntityRequest) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/entities/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(entityData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error);\n      }\n\n      const newEntity = await response.json();\n      return newEntity;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { createEntity, loading, error };\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"curl-example",children:"cURL Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl -X POST https://ring.ck.ua/api/entities/create \\\n  -H "Content-Type: application/json" \\\n  -H "Authorization: Bearer YOUR_JWT_TOKEN" \\\n  -d \'{\n    "name": "TechCorp Solutions",\n    "description": "Leading software development company",\n    "category": "Software Development",\n    "visibility": "public",\n    "website": "https://techcorp.example.com",\n    "email": "contact@techcorp.example.com",\n    "tags": ["AI", "Blockchain", "Web Development"]\n  }\'\n'})}),"\n",(0,s.jsx)(n.h2,{id:"validation-rules",children:"Validation Rules"}),"\n",(0,s.jsx)(n.h3,{id:"required-fields",children:"Required Fields"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": Must be 1-100 characters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"category"}),": Must be a valid category"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"visibility"}),": Must be 'public', 'member', or 'confidential'"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"optional-field-constraints",children:"Optional Field Constraints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"description"}),": Maximum 1000 characters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"website"}),": Must be a valid URL format"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"email"}),": Must be a valid email format"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"phone"}),": Must be a valid phone number format"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tags"}),": Maximum 10 tags, each 1-50 characters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"foundedYear"}),": Must be between 1800 and current year"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"employeeCount"}),": Must be one of predefined ranges"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Role-Based Access"}),": Users can only create entities with visibility levels appropriate to their role"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Input Validation"}),": All input is validated and sanitized"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rate Limiting"}),": Prevents abuse with 60 requests per minute limit"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Audit Logging"}),": All entity creation events are logged for security monitoring"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"business-logic",children:"Business Logic"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automatic Fields"}),": ",(0,s.jsx)(n.code,{children:"id"}),", ",(0,s.jsx)(n.code,{children:"onlineStatus"}),", ",(0,s.jsx)(n.code,{children:"lastOnline"}),", ",(0,s.jsx)(n.code,{children:"createdAt"}),", ",(0,s.jsx)(n.code,{children:"updatedAt"}),", and ",(0,s.jsx)(n.code,{children:"createdBy"})," are automatically generated"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Visibility Control"}),": Confidential entities require ADMIN or CONFIDENTIAL role"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Duplicate Prevention"}),": System checks for duplicate entities based on name and email"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Search Indexing"}),": Created entities are automatically indexed for search functionality"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"testing-examples",children:"Testing Examples"}),"\n",(0,s.jsx)(n.h3,{id:"unit-test-example",children:"Unit Test Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"describe('POST /api/entities/create', () => {\n  it('should create entity successfully with valid data', async () => {\n    const entityData = {\n      name: 'Test Entity',\n      category: 'Technology',\n      visibility: 'public'\n    };\n\n    const response = await request(app)\n      .post('/api/entities/create')\n      .set('Authorization', `Bearer ${validToken}`)\n      .send(entityData)\n      .expect(201);\n\n    expect(response.body).toHaveProperty('id');\n    expect(response.body.name).toBe('Test Entity');\n  });\n\n  it('should return 401 for unauthenticated requests', async () => {\n    const response = await request(app)\n      .post('/api/entities/create')\n      .send({ name: 'Test' })\n      .expect(401);\n\n    expect(response.body.error).toBe('Unauthorized');\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/entities-get-by-id",children:"Get Entity by ID"})," - Retrieve entity details"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/entities-update",children:"Update Entity"})," - Modify existing entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/entities-delete",children:"Delete Entity"})," - Remove entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/entities-list",children:"List Entities"})," - Browse all entities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/entities-upload",children:"Upload Entity Files"})," - Attach files to entity"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v1.0.0"})," - Initial implementation with basic entity creation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v1.1.0"})," - Added social links and location support"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v1.2.0"})," - Enhanced validation and error handling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v1.3.0"})," - Added confidential entity support"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(96540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);