"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[5248],{81399:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"api/upload","title":"File Upload API","description":"Ring Platform\'s file upload system provides secure file handling for entities, opportunities, and user profiles.","source":"@site/docs/api/upload.md","sourceDirName":"api","slug":"/api/upload","permalink":"/ring/uk/docs/api/upload","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/api/upload.md","tags":[],"version":"current","lastUpdatedAt":1750255417000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Transaction History API","permalink":"/ring/uk/docs/api/transaction-history"},"next":{"title":"Platform Information","permalink":"/ring/uk/docs/api/info"}}');var l=i(74848),r=i(28453);const t={},o="File Upload API",d={},a=[{value:"Overview",id:"overview",level:2},{value:"Base URL",id:"base-url",level:2},{value:"Authentication",id:"authentication",level:2},{value:"API Endpoints",id:"api-endpoints",level:2},{value:"General File Upload",id:"general-file-upload",level:3},{value:"Entity File Upload",id:"entity-file-upload",level:3},{value:"Opportunity File Upload",id:"opportunity-file-upload",level:3},{value:"File Type Restrictions",id:"file-type-restrictions",level:2},{value:"Allowed Image Types",id:"allowed-image-types",level:3},{value:"Allowed Document Types",id:"allowed-document-types",level:3},{value:"Allowed Media Types",id:"allowed-media-types",level:3},{value:"File Size Limits",id:"file-size-limits",level:2},{value:"Security Features",id:"security-features",level:2},{value:"File Validation",id:"file-validation",level:3},{value:"Access Control",id:"access-control",level:3},{value:"Storage Security",id:"storage-security",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"HTTP Status Codes",id:"http-status-codes",level:3},{value:"Error Response Format",id:"error-response-format",level:3},{value:"Common Error Codes",id:"common-error-codes",level:3},{value:"Rate Limiting",id:"rate-limiting",level:2},{value:"Integration Examples",id:"integration-examples",level:2},{value:"React File Upload Component",id:"react-file-upload-component",level:3},{value:"Upload with Progress Tracking",id:"upload-with-progress-tracking",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Testing",id:"testing",level:2},{value:"Monitoring and Analytics",id:"monitoring-and-analytics",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"file-upload-api",children:"File Upload API"})}),"\n",(0,l.jsx)(n.p,{children:"Ring Platform's file upload system provides secure file handling for entities, opportunities, and user profiles."}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsx)(n.p,{children:"The upload system supports:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Multiple File Types"}),": Images, documents, and media files"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Secure Storage"}),": Vercel Blob storage with secure URLs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Size Validation"}),": Configurable file size limits"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Type Validation"}),": Allowed file type restrictions"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Authenticated Access"}),": User-based upload permissions"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Entity Association"}),": Link uploads to specific entities or opportunities"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"base-url",children:"Base URL"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Development: http://localhost:3000/api\nProduction: https://ring.ck.ua/api\n"})}),"\n",(0,l.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,l.jsx)(n.p,{children:"All upload endpoints require authentication via NextAuth.js session:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"headers: {\n  'Cookie': 'next-auth.session-token=<token>'\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"api-endpoints",children:"API Endpoints"}),"\n",(0,l.jsx)(n.h3,{id:"general-file-upload",children:"General File Upload"}),"\n",(0,l.jsx)(n.p,{children:"Upload files to Vercel Blob storage with automatic metadata handling."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Endpoint:"})," ",(0,l.jsx)(n.code,{children:"POST /api/upload"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Content Type:"})," ",(0,l.jsx)(n.code,{children:"multipart/form-data"})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Request Body:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"file"})," (File, required): The file to upload"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"type"})," (string, optional): Upload context type ('entity', 'opportunity', 'profile', 'general')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"entityId"})," (string, optional): Associated entity ID for context"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"opportunityId"})," (string, optional): Associated opportunity ID for context"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Response:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"interface UploadResponse {\n  success: boolean;\n  url: string;\n  filename: string;\n  size: number;\n  contentType: string;\n  uploadedAt: string;\n  downloadUrl: string;\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example Request (JavaScript/FormData):"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"const formData = new FormData();\nformData.append('file', fileInput.files[0]);\nformData.append('type', 'entity');\nformData.append('entityId', 'entity_123');\n\nconst response = await fetch('/api/upload', {\n  method: 'POST',\n  body: formData\n});\n\nconst result = await response.json();\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example Request (cURL):"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'curl -X POST "http://localhost:3000/api/upload" \\\n  -H "Cookie: next-auth.session-token=<token>" \\\n  -F "file=@/path/to/image.jpg" \\\n  -F "type=entity" \\\n  -F "entityId=entity_123"\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example Response:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "url": "https://blob.vercel-storage.com/abc123-image.jpg",\n  "downloadUrl": "https://blob.vercel-storage.com/abc123-image.jpg?download=1",\n  "filename": "company-logo.jpg",\n  "size": 245760,\n  "contentType": "image/jpeg",\n  "uploadedAt": "2025-01-15T14:30:00Z"\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"entity-file-upload",children:"Entity File Upload"}),"\n",(0,l.jsx)(n.p,{children:"Upload files specifically for entity profiles (logos, images, documents)."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Endpoint:"})," ",(0,l.jsx)(n.code,{children:"POST /api/entities/upload"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Content Type:"})," ",(0,l.jsx)(n.code,{children:"multipart/form-data"})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Request Body:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"file"})," (File, required): The file to upload"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"entityId"})," (string, required): The entity ID to associate the file with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"fileType"})," (string, optional): File purpose ('logo', 'image', 'document')"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Response:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"interface EntityUploadResponse {\n  success: boolean;\n  url: string;\n  filename: string;\n  size: number;\n  contentType: string;\n  entityId: string;\n  fileType: string;\n  uploadedAt: string;\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example Request:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"const formData = new FormData();\nformData.append('file', logoFile);\nformData.append('entityId', 'entity_456');\nformData.append('fileType', 'logo');\n\nconst response = await fetch('/api/entities/upload', {\n  method: 'POST',\n  body: formData\n});\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example Response:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "url": "https://blob.vercel-storage.com/def456-logo.png",\n  "filename": "company-logo.png",\n  "size": 156420,\n  "contentType": "image/png",\n  "entityId": "entity_456",\n  "fileType": "logo",\n  "uploadedAt": "2024-01-15T14:30:00Z"\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"opportunity-file-upload",children:"Opportunity File Upload"}),"\n",(0,l.jsx)(n.p,{children:"Upload files for opportunity listings (attachments, requirements, media)."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Endpoint:"})," ",(0,l.jsx)(n.code,{children:"POST /api/opportunities/upload"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Content Type:"})," ",(0,l.jsx)(n.code,{children:"multipart/form-data"})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Request Body:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"file"})," (File, required): The file to upload"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"opportunityId"})," (string, required): The opportunity ID to associate the file with"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"fileType"})," (string, optional): File purpose ('attachment', 'requirement', 'media')"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Response:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"interface OpportunityUploadResponse {\n  success: boolean;\n  url: string;\n  filename: string;\n  size: number;\n  contentType: string;\n  opportunityId: string;\n  fileType: string;\n  uploadedAt: string;\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"file-type-restrictions",children:"File Type Restrictions"}),"\n",(0,l.jsx)(n.h3,{id:"allowed-image-types",children:"Allowed Image Types"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image/jpeg"})," (.jpg, .jpeg)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image/png"})," (.png)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image/gif"})," (.gif)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image/webp"})," (.webp)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"image/svg+xml"})," (.svg)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"allowed-document-types",children:"Allowed Document Types"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"application/pdf"})," (.pdf)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"application/msword"})," (.doc)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"application/vnd.openxmlformats-officedocument.wordprocessingml.document"})," (.docx)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"text/plain"})," (.txt)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"text/markdown"})," (.md)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"allowed-media-types",children:"Allowed Media Types"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"video/mp4"})," (.mp4)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"video/webm"})," (.webm)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"audio/mpeg"})," (.mp3)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"audio/wav"})," (.wav)"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"file-size-limits",children:"File Size Limits"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Images"}),": Maximum 5MB per file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Documents"}),": Maximum 10MB per file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Media"}),": Maximum 50MB per file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"General uploads"}),": Maximum 25MB per file"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"security-features",children:"Security Features"}),"\n",(0,l.jsx)(n.h3,{id:"file-validation",children:"File Validation"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"MIME type checking"}),": Server-side validation of actual file content"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"File signature verification"}),": Magic number validation for security"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Filename sanitization"}),": Automatic cleaning of malicious filenames"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Size validation"}),": Strict enforcement of size limits"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"access-control",children:"Access Control"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"User authentication"}),": All uploads require valid session"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Entity ownership"}),": Users can only upload to entities they own"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Opportunity permissions"}),": Upload permissions based on opportunity access"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Admin override"}),": Administrators can upload to any entity/opportunity"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"storage-security",children:"Storage Security"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Secure URLs"}),": Time-limited signed URLs for downloads"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Encrypted storage"}),": Files encrypted at rest in Vercel Blob"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Access logging"}),": All upload and download activities logged"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Virus scanning"}),": Automatic malware detection (production only)"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,l.jsx)(n.h3,{id:"http-status-codes",children:"HTTP Status Codes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"200 OK"})," - Upload successful"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"400 Bad Request"})," - Invalid file or parameters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"401 Unauthorized"})," - Authentication required"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"403 Forbidden"})," - Insufficient permissions"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"413 Payload Too Large"})," - File exceeds size limit"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"415 Unsupported Media Type"})," - File type not allowed"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"500 Internal Server Error"})," - Server error"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"error-response-format",children:"Error Response Format"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "success": false,\n  "error": "Error message describing what went wrong",\n  "code": "ERROR_CODE",\n  "details": {\n    "maxSize": "5MB",\n    "allowedTypes": ["image/jpeg", "image/png"],\n    "actualSize": "7.2MB",\n    "actualType": "image/bmp"\n  }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"common-error-codes",children:"Common Error Codes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"FILE_TOO_LARGE"})," - File exceeds maximum size limit"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"INVALID_FILE_TYPE"})," - File type not allowed"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"INVALID_FILE_CONTENT"})," - File content doesn't match extension"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MISSING_PERMISSIONS"})," - User lacks upload permissions"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ENTITY_NOT_FOUND"})," - Referenced entity doesn't exist"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"OPPORTUNITY_NOT_FOUND"})," - Referenced opportunity doesn't exist"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"UPLOAD_FAILED"})," - Storage service error"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"General uploads"}),": 100 uploads per hour per user"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Entity uploads"}),": 50 uploads per hour per entity"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Opportunity uploads"}),": 50 uploads per hour per opportunity"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Large files (>10MB)"}),": 10 uploads per hour per user"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,l.jsx)(n.h3,{id:"react-file-upload-component",children:"React File Upload Component"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"import React, { useState } from 'react';\nimport { useSession } from 'next-auth/react';\n\ninterface FileUploadProps {\n  entityId?: string;\n  opportunityId?: string;\n  onUploadComplete?: (result: UploadResponse) => void;\n  maxSize?: number;\n  allowedTypes?: string[];\n}\n\nexport function FileUpload({ \n  entityId, \n  opportunityId, \n  onUploadComplete,\n  maxSize = 5 * 1024 * 1024, // 5MB default\n  allowedTypes = ['image/jpeg', 'image/png', 'application/pdf']\n}: FileUploadProps) {\n  const { data: session } = useSession();\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file || !session) return;\n\n    // Client-side validation\n    if (file.size > maxSize) {\n      setError(`File size must be less than ${Math.round(maxSize / 1024 / 1024)}MB`);\n      return;\n    }\n\n    if (!allowedTypes.includes(file.type)) {\n      setError(`File type ${file.type} is not allowed`);\n      return;\n    }\n\n    setError(null);\n    setUploading(true);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      if (entityId) {\n        formData.append('type', 'entity');\n        formData.append('entityId', entityId);\n      } else if (opportunityId) {\n        formData.append('type', 'opportunity');\n        formData.append('opportunityId', opportunityId);\n      }\n\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Upload failed');\n      }\n\n      const result = await response.json();\n      onUploadComplete?.(result);\n      \n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Upload failed');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <div className=\"file-upload\">\n      <input\n        type=\"file\"\n        onChange={handleFileSelect}\n        disabled={uploading || !session}\n        accept={allowedTypes.join(',')}\n        className=\"file-input\"\n      />\n      \n      {uploading && (\n        <div className=\"upload-progress\">\n          <span>Uploading...</span>\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"upload-error\">\n          <span>{error}</span>\n        </div>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"upload-with-progress-tracking",children:"Upload with Progress Tracking"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"async function uploadWithProgress(\n  file: File, \n  options: { entityId?: string; opportunityId?: string },\n  onProgress?: (progress: number) => void\n) {\n  return new Promise<UploadResponse>((resolve, reject) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    if (options.entityId) {\n      formData.append('type', 'entity');\n      formData.append('entityId', options.entityId);\n    } else if (options.opportunityId) {\n      formData.append('type', 'opportunity');\n      formData.append('opportunityId', options.opportunityId);\n    }\n\n    const xhr = new XMLHttpRequest();\n\n    xhr.upload.addEventListener('progress', (event) => {\n      if (event.lengthComputable) {\n        const progress = (event.loaded / event.total) * 100;\n        onProgress?.(progress);\n      }\n    });\n\n    xhr.addEventListener('load', () => {\n      if (xhr.status === 200) {\n        const result = JSON.parse(xhr.responseText);\n        resolve(result);\n      } else {\n        const error = JSON.parse(xhr.responseText);\n        reject(new Error(error.error || 'Upload failed'));\n      }\n    });\n\n    xhr.addEventListener('error', () => {\n      reject(new Error('Network error during upload'));\n    });\n\n    xhr.open('POST', '/api/upload');\n    xhr.send(formData);\n  });\n}\n\n// Usage example\nconst handleUpload = async (file: File) => {\n  try {\n    const result = await uploadWithProgress(\n      file,\n      { entityId: 'entity_123' },\n      (progress) => {\n        console.log(`Upload progress: ${progress.toFixed(1)}%`);\n      }\n    );\n    \n    console.log('Upload complete:', result.url);\n  } catch (error) {\n    console.error('Upload failed:', error.message);\n  }\n};\n"})}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Client-side Validation"}),": Always validate files before uploading"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Progress Indication"}),": Show upload progress for better UX"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Error Handling"}),": Provide clear error messages to users"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"File Optimization"}),": Compress images and optimize files before upload"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Chunked Uploads"}),": Consider chunked uploads for large files"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Retry Logic"}),": Implement retry mechanisms for failed uploads"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Preview Generation"}),": Generate thumbnails for images"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Cleanup"}),": Remove temporary files and handle upload cancellation"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,l.jsx)(n.p,{children:"Use browser developer tools or tools like Postman to test upload endpoints:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Test with cURL\ncurl -X POST "http://localhost:3000/api/upload" \\\n  -H "Cookie: next-auth.session-token=your-token" \\\n  -F "file=@test-image.jpg" \\\n  -F "type=entity" \\\n  -F "entityId=test-entity-123"\n'})}),"\n",(0,l.jsx)(n.h2,{id:"monitoring-and-analytics",children:"Monitoring and Analytics"}),"\n",(0,l.jsx)(n.p,{children:"Upload statistics and metrics can be tracked through:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"File size and type distribution"}),"\n",(0,l.jsx)(n.li,{children:"Upload success/failure rates"}),"\n",(0,l.jsx)(n.li,{children:"User upload patterns"}),"\n",(0,l.jsx)(n.li,{children:"Storage usage monitoring"}),"\n",(0,l.jsx)(n.li,{children:"Performance metrics (upload speed, time to complete)"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var s=i(96540);const l={},r=s.createContext(l);function t(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);