name: 🐳 Build and Publish Docker Images

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        include:
          - platform: linux/amd64
            arch: amd64
          - platform: linux/arm64
            arch: arm64

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Ring Platform
            org.opencontainers.image.description=Professional Networking Platform with Web3 Integration
            org.opencontainers.image.vendor=ConnectPlatform
            org.opencontainers.image.version={{version}}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/DOCKER_SETUP.md

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: 🔐 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ matrix.arch }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            GIT_COMMIT=${{ github.sha }}

      - name: 🧪 Test Docker image
        run: |
          echo "🧪 Testing Docker image for ${{ matrix.arch }}..."
          
          # Start container in background
          docker run -d \
            --name ring-test-${{ matrix.arch }} \
            -p 3000:3000 \
            -e NODE_ENV=production \
            -e NEXT_PUBLIC_API_URL=http://localhost:3000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ matrix.arch }}
          
          # Wait for container to start
          sleep 30
          
          # Check if container is running
          if ! docker ps | grep -q ring-test-${{ matrix.arch }}; then
            echo "❌ Container failed to start"
            docker logs ring-test-${{ matrix.arch }}
            exit 1
          fi
          
          # Test health endpoint (if available)
          if curl -f http://localhost:3000/api/health 2>/dev/null; then
            echo "✅ Health check passed"
          else
            echo "⚠️ Health check not available or failed"
          fi
          
          # Check if the app responds
          if curl -f http://localhost:3000 2>/dev/null; then
            echo "✅ Application responds successfully"
          else
            echo "❌ Application not responding"
            docker logs ring-test-${{ matrix.arch }}
            exit 1
          fi
          
          # Cleanup
          docker stop ring-test-${{ matrix.arch }}
          docker rm ring-test-${{ matrix.arch }}
          
          echo "✅ Docker image test completed successfully for ${{ matrix.arch }}"

      - name: 🚀 Build and push multi-platform image
        if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || inputs.push_to_registry)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            GIT_COMMIT=${{ github.sha }}

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  update-readme:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: 📝 Update README with latest image info
        run: |
          # Update Docker pull command in README
          sed -i "s|docker pull ghcr.io/.*|docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|g" README.md
          
          # Update version badge if it exists
          if grep -q "version-.*-blue" README.md; then
            VERSION=$(echo "${{ steps.meta.outputs.version }}" | sed 's/^v//')
            sed -i "s|version-.*-blue|version-${VERSION}-blue|g" README.md
          fi

      - name: 💾 Commit README changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "📝 Update README with latest Docker image info [skip ci]"
            git push
          fi

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📢 Notify on success
        if: needs.build-and-push.result == 'success'
        run: |
          echo "🎉 Docker image built and published successfully!"
          echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "🔗 Registry: https://github.com/${{ github.repository }}/pkgs/container/ring"

      - name: 🚨 Notify on failure
        if: needs.build-and-push.result == 'failure'
        run: |
          echo "❌ Docker build failed!"
          echo "🔍 Check the logs above for details"
          exit 1
