# Ring Platform - Docker Compose Configuration
# Complete local development environment with all services

version: '3.8'

services:
  # Ring Platform Application
  ring-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        NODE_ENV: development
    container_name: ring-platform
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOSTNAME=0.0.0.0
      # Firebase Configuration (from .env.local)
      - NEXT_PUBLIC_FIREBASE_API_KEY=${NEXT_PUBLIC_FIREBASE_API_KEY}
      - NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}
      - NEXT_PUBLIC_FIREBASE_PROJECT_ID=${NEXT_PUBLIC_FIREBASE_PROJECT_ID}
      - NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET}
      - NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID}
      - NEXT_PUBLIC_FIREBASE_APP_ID=${NEXT_PUBLIC_FIREBASE_APP_ID}
      - NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID}
      # Auth.js Configuration
      - AUTH_SECRET=${AUTH_SECRET}
      - AUTH_FIREBASE_PROJECT_ID=${AUTH_FIREBASE_PROJECT_ID}
      - AUTH_FIREBASE_CLIENT_EMAIL=${AUTH_FIREBASE_CLIENT_EMAIL}
      - AUTH_FIREBASE_PRIVATE_KEY=${AUTH_FIREBASE_PRIVATE_KEY}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      # OAuth Providers
      - AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID}
      - AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_SECRET}
      - AUTH_APPLE_ID=${AUTH_APPLE_ID}
      - AUTH_APPLE_SECRET=${AUTH_APPLE_SECRET}
      - AUTH_RESEND_KEY=${AUTH_RESEND_KEY}
      # Storage
      - BLOB_READ_WRITE_TOKEN=${BLOB_READ_WRITE_TOKEN}
      # API Configuration
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3000}
    volumes:
      # Development hot reload (comment out for production)
      - .:/app
      - /app/node_modules
      - /app/.next
      # Persistent data
      - ring-logs:/app/log
      - ring-tmp:/app/tmp
    networks:
      - ring-network
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: ring-redis
    ports:
      - "6379:6379"
    volumes:
      - ring-redis-data:/data
    networks:
      - ring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # MongoDB (optional - for ConnectPlatform compatibility)
  mongodb:
    image: mongo:7
    container_name: ring-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ring
      - MONGO_INITDB_ROOT_PASSWORD=ring_password_2024
      - MONGO_INITDB_DATABASE=ring_platform
    volumes:
      - ring-mongodb-data:/data/db
      - ring-mongodb-config:/data/configdb
    networks:
      - ring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: ring-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ring-nginx-cache:/var/cache/nginx
    networks:
      - ring-network
    depends_on:
      - ring-app
    restart: unless-stopped
    profiles:
      - production

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ring-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ring-prometheus-data:/prometheus
    networks:
      - ring-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ring-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ring_admin_2024
    volumes:
      - ring-grafana-data:/var/lib/grafana
    networks:
      - ring-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  ring-logs:
    driver: local
  ring-tmp:
    driver: local
  ring-redis-data:
    driver: local
  ring-mongodb-data:
    driver: local
  ring-mongodb-config:
    driver: local
  ring-nginx-cache:
    driver: local
  ring-prometheus-data:
    driver: local
  ring-grafana-data:
    driver: local

networks:
  ring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
