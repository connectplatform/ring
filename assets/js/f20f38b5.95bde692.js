"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[9583],{28453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>o});var t=i(96540);const s={},a=t.createContext(s);function r(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),t.createElement(a.Provider,{value:e},n.children)}},70586:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api/notifications/read","title":"Mark Notification as Read API","description":"Overview","source":"@site/docs/en/api/notifications/read.md","sourceDirName":"api/notifications","slug":"/api/notifications/read","permalink":"/ring/docs/api/notifications/read","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/en/api/notifications/read.md","tags":[],"version":"current","lastUpdatedAt":1750331037000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Notification System API","permalink":"/ring/docs/api/notifications/list"},"next":{"title":"Mark All Notifications as Read API","permalink":"/ring/docs/api/notifications/read-all"}}');var s=i(74848),a=i(28453);const r={},o="Mark Notification as Read API",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"URL Parameters",id:"url-parameters",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Request Body",id:"request-body",level:2},{value:"Response Format",id:"response-format",level:2},{value:"Success Response (200)",id:"success-response-200",level:3},{value:"Error Responses",id:"error-responses",level:3},{value:"Unauthorized (401)",id:"unauthorized-401",level:4},{value:"Bad Request (400)",id:"bad-request-400",level:4},{value:"Forbidden (403)",id:"forbidden-403",level:4},{value:"Not Found (404)",id:"not-found-404",level:4},{value:"Internal Server Error (500)",id:"internal-server-error-500",level:4},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"React Component with Individual Notification",id:"react-component-with-individual-notification",level:3},{value:"React Hook for Notification Management",id:"react-hook-for-notification-management",level:3},{value:"Server Action (Next.js 13+)",id:"server-action-nextjs-13",level:3},{value:"cURL Example",id:"curl-example",level:3},{value:"Business Logic",id:"business-logic",level:2},{value:"Database Schema",id:"database-schema",level:2},{value:"Notification Document Structure",id:"notification-document-structure",level:3},{value:"After Marking as Read",id:"after-marking-as-read",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Performance Notes",id:"performance-notes",level:2},{value:"Rate Limiting",id:"rate-limiting",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Integration with Real-time Updates",id:"integration-with-real-time-updates",level:2},{value:"Testing",id:"testing",level:2},{value:"Unit Test Example",id:"unit-test-example",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2}];function l(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"mark-notification-as-read-api",children:"Mark Notification as Read API"})}),"\n",(0,s.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.strong,{children:"Mark Notification as Read API"})," allows authenticated users to mark a specific notification as read. This endpoint updates the notification status in the database and helps manage user notification states."]}),"\n",(0,s.jsx)(e.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"URL"}),": ",(0,s.jsx)(e.code,{children:"/api/notifications/[id]/read"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Method"}),": ",(0,s.jsx)(e.code,{children:"POST"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Authentication"}),": Required (NextAuth.js session)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Content-Type"}),": ",(0,s.jsx)(e.code,{children:"application/json"})]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"url-parameters",children:"URL Parameters"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Parameter"}),(0,s.jsx)(e.th,{children:"Type"}),(0,s.jsx)(e.th,{children:"Required"}),(0,s.jsx)(e.th,{children:"Description"})]})}),(0,s.jsx)(e.tbody,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"id"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"string"})}),(0,s.jsx)(e.td,{children:"Yes"}),(0,s.jsx)(e.td,{children:"The unique identifier of the notification to mark as read"})]})})]}),"\n",(0,s.jsx)(e.h2,{id:"authentication",children:"Authentication"}),"\n",(0,s.jsx)(e.p,{children:"This endpoint requires user authentication via NextAuth.js session:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"import { getSession } from 'next-auth/react'\n\nconst session = await getSession()\nif (!session) {\n  // Handle unauthenticated state\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"request-body",children:"Request Body"}),"\n",(0,s.jsx)(e.p,{children:"This endpoint does not require a request body. The notification ID is provided in the URL path."}),"\n",(0,s.jsx)(e.h2,{id:"response-format",children:"Response Format"}),"\n",(0,s.jsx)(e.h3,{id:"success-response-200",children:"Success Response (200)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "success": true,\n  "message": "Notification marked as read"\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"error-responses",children:"Error Responses"}),"\n",(0,s.jsx)(e.h4,{id:"unauthorized-401",children:"Unauthorized (401)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "error": "User not authenticated"\n}\n'})}),"\n",(0,s.jsx)(e.h4,{id:"bad-request-400",children:"Bad Request (400)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "error": "Notification ID is required"\n}\n'})}),"\n",(0,s.jsx)(e.h4,{id:"forbidden-403",children:"Forbidden (403)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "error": "Unauthorized access to notification"\n}\n'})}),"\n",(0,s.jsx)(e.h4,{id:"not-found-404",children:"Not Found (404)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "error": "Notification not found"\n}\n'})}),"\n",(0,s.jsx)(e.h4,{id:"internal-server-error-500",children:"Internal Server Error (500)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "error": "Failed to mark notification as read. Please try again later."\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,s.jsx)(e.h3,{id:"react-component-with-individual-notification",children:"React Component with Individual Notification"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { useState } from 'react'\nimport { useSession } from 'next-auth/react'\n\ninterface Notification {\n  id: string\n  title: string\n  message: string\n  isRead: boolean\n  createdAt: string\n  type: 'info' | 'warning' | 'success' | 'error'\n}\n\nfunction NotificationItem({ notification, onMarkAsRead }: { \n  notification: Notification\n  onMarkAsRead: (id: string) => void \n}) {\n  const { data: session } = useSession()\n  const [loading, setLoading] = useState(false)\n\n  const handleMarkAsRead = async () => {\n    if (!session || notification.isRead) return\n\n    setLoading(true)\n\n    try {\n      const response = await fetch(`/api/notifications/${notification.id}/read`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.error || 'Failed to mark as read')\n      }\n\n      onMarkAsRead(notification.id)\n    } catch (error) {\n      console.error('Error marking notification as read:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className={`p-4 border rounded-lg ${\n      notification.isRead ? 'bg-gray-50' : 'bg-white border-blue-200'\n    }`}>\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <h4 className={`font-semibold ${\n            notification.isRead ? 'text-gray-600' : 'text-gray-900'\n          }`}>\n            {notification.title}\n          </h4>\n          <p className={`mt-1 text-sm ${\n            notification.isRead ? 'text-gray-500' : 'text-gray-700'\n          }`}>\n            {notification.message}\n          </p>\n          <span className=\"text-xs text-gray-400 mt-2 block\">\n            {new Date(notification.createdAt).toLocaleDateString()}\n          </span>\n        </div>\n        \n        {!notification.isRead && (\n          <button\n            onClick={handleMarkAsRead}\n            disabled={loading}\n            className=\"ml-4 px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50\"\n          >\n            {loading ? 'Marking...' : 'Mark as Read'}\n          </button>\n        )}\n      </div>\n      \n      {!notification.isRead && (\n        <div className=\"w-2 h-2 bg-blue-500 rounded-full absolute top-4 right-4\"></div>\n      )}\n    </div>\n  )\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"react-hook-for-notification-management",children:"React Hook for Notification Management"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { useState, useCallback } from 'react'\nimport { useSession } from 'next-auth/react'\n\nexport function useNotifications() {\n  const { data: session } = useSession()\n  const [notifications, setNotifications] = useState<Notification[]>([])\n  const [loading, setLoading] = useState(false)\n\n  const markAsRead = useCallback(async (notificationId: string) => {\n    if (!session) return\n\n    try {\n      const response = await fetch(`/api/notifications/${notificationId}/read`, {\n        method: 'POST',\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to mark notification as read')\n      }\n\n      // Update local state\n      setNotifications(prev => \n        prev.map(notification => \n          notification.id === notificationId \n            ? { ...notification, isRead: true }\n            : notification\n        )\n      )\n\n      return true\n    } catch (error) {\n      console.error('Error marking notification as read:', error)\n      return false\n    }\n  }, [session])\n\n  const markAllAsRead = useCallback(async () => {\n    if (!session) return\n\n    setLoading(true)\n    try {\n      const response = await fetch('/api/notifications/read-all', {\n        method: 'POST',\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to mark all notifications as read')\n      }\n\n      // Update local state\n      setNotifications(prev => \n        prev.map(notification => ({ ...notification, isRead: true }))\n      )\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error)\n    } finally {\n      setLoading(false)\n    }\n  }, [session])\n\n  return {\n    notifications,\n    setNotifications,\n    markAsRead,\n    markAllAsRead,\n    loading\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"server-action-nextjs-13",children:"Server Action (Next.js 13+)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"'use server'\n\nimport { auth } from '@/auth'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function markNotificationAsReadAction(notificationId: string) {\n  const session = await auth()\n  \n  if (!session) {\n    redirect('/auth/signin')\n  }\n\n  try {\n    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/notifications/${notificationId}/read`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Cookie': request.headers.get('cookie') || '',\n      },\n    })\n\n    if (!response.ok) {\n      const error = await response.json()\n      throw new Error(error.error || 'Failed to mark notification as read')\n    }\n\n    // Revalidate the notifications page\n    revalidatePath('/notifications')\n    \n  } catch (error) {\n    console.error('Server action error:', error)\n    throw error\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"curl-example",children:"cURL Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'curl -X POST https://ring.ck.ua/api/notifications/notification123/read \\\n  -H "Content-Type: application/json" \\\n  -H "Cookie: next-auth.session-token=your-session-token"\n'})}),"\n",(0,s.jsx)(e.h2,{id:"business-logic",children:"Business Logic"}),"\n",(0,s.jsx)(e.p,{children:"The endpoint performs the following operations:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Authentication Check"}),": Verifies user session and extracts user ID"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Parameter Validation"}),": Ensures notification ID is provided in URL"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Authorization Check"}),": Verifies user has access to the notification"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Database Update"}),": Marks the notification as read in Firestore"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Response"}),": Returns success confirmation"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,s.jsx)(e.h3,{id:"notification-document-structure",children:"Notification Document Structure"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "id": "notification123",\n  "userId": "user456",\n  "title": "New message received",\n  "message": "You have a new message from John Doe",\n  "type": "info",\n  "isRead": false,\n  "createdAt": "2024-01-15T10:30:00Z",\n  "updatedAt": "2024-01-15T10:30:00Z",\n  "metadata": {\n    "sourceId": "message789",\n    "sourceType": "message",\n    "actionUrl": "/messages/789"\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"after-marking-as-read",children:"After Marking as Read"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "id": "notification123",\n  "userId": "user456",\n  "title": "New message received",\n  "message": "You have a new message from John Doe",\n  "type": "info",\n  "isRead": true,\n  "createdAt": "2024-01-15T10:30:00Z",\n  "updatedAt": "2024-01-15T14:22:00Z",\n  "readAt": "2024-01-15T14:22:00Z",\n  "metadata": {\n    "sourceId": "message789",\n    "sourceType": "message",\n    "actionUrl": "/messages/789"\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Authentication Required"}),": Only authenticated users can mark notifications as read"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Authorization Check"}),": Users can only mark their own notifications as read"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Input Validation"}),": Notification ID is validated for format and existence"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Error Handling"}),": Sensitive information is not exposed in error messages"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"performance-notes",children:"Performance Notes"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Single Database Query"}),": Efficiently updates one notification record"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"No Caching"}),": Real-time updates ensure immediate consistency"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Optimistic Updates"}),": Frontend can update UI before server confirmation"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"User-based"}),": 30 requests per minute per authenticated user"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Global"}),": 1000 requests per minute across all users"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(e.p,{children:"The API implements comprehensive error handling:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Missing notification ID returns 400 status"}),"\n",(0,s.jsx)(e.li,{children:"Authentication errors return 401 status"}),"\n",(0,s.jsx)(e.li,{children:"Authorization errors return 403 status"}),"\n",(0,s.jsx)(e.li,{children:"Missing notifications return 404 status"}),"\n",(0,s.jsx)(e.li,{children:"Server errors return 500 status with user-friendly messages"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"integration-with-real-time-updates",children:"Integration with Real-time Updates"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// WebSocket integration for real-time notification updates\nimport { useEffect } from 'react'\nimport { useWebSocket } from '@/hooks/useWebSocket'\n\nfunction NotificationSystem() {\n  const { socket } = useWebSocket()\n  const { notifications, setNotifications, markAsRead } = useNotifications()\n\n  useEffect(() => {\n    if (!socket) return\n\n    // Listen for real-time notification updates\n    socket.on('notification:read', (data: { notificationId: string }) => {\n      setNotifications(prev => \n        prev.map(notification => \n          notification.id === data.notificationId \n            ? { ...notification, isRead: true, readAt: new Date().toISOString() }\n            : notification\n        )\n      )\n    })\n\n    return () => {\n      socket.off('notification:read')\n    }\n  }, [socket, setNotifications])\n\n  return (\n    <div className=\"notification-system\">\n      {/* Notification components */}\n    </div>\n  )\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(e.h3,{id:"unit-test-example",children:"Unit Test Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { POST } from '@/app/api/notifications/[id]/read/route'\nimport { NextRequest } from 'next/server'\n\n// Mock authentication and services\njest.mock('@/auth')\njest.mock('@/services/notifications/notification-service')\n\ndescribe('/api/notifications/[id]/read', () => {\n  it('should mark notification as read successfully', async () => {\n    // Mock authenticated session\n    (getServerAuthSession as jest.Mock).mockResolvedValue({\n      user: { id: 'user123', role: 'member' }\n    })\n\n    const request = new NextRequest('http://localhost:3000/api/notifications/notif123/read', {\n      method: 'POST'\n    })\n\n    const response = await POST(request, { params: { id: 'notif123' } })\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    expect(data.message).toBe('Notification marked as read')\n  })\n\n  it('should return 404 for non-existent notification', async () => {\n    (markNotificationAsRead as jest.Mock).mockRejectedValue(\n      new Error('Notification not found')\n    )\n\n    const request = new NextRequest('http://localhost:3000/api/notifications/invalid/read', {\n      method: 'POST'\n    })\n\n    const response = await POST(request, { params: { id: 'invalid' } })\n    const data = await response.json()\n\n    expect(response.status).toBe(404)\n    expect(data.error).toBe('Notification not found')\n  })\n})\n"})}),"\n",(0,s.jsx)(e.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/docs/api/notifications/list",children:(0,s.jsx)(e.code,{children:"GET /api/notifications"})})," - List user notifications"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/docs/api/notifications/read-all",children:(0,s.jsx)(e.code,{children:"POST /api/notifications/read-all"})})," - Mark all notifications as read"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/docs/api/notifications/preferences",children:(0,s.jsx)(e.code,{children:"GET /api/notifications/preferences"})})," - Get notification preferences"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/docs/api/notifications/preferences",children:(0,s.jsx)(e.code,{children:"PUT /api/notifications/preferences"})})," - Update notification preferences"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}}}]);