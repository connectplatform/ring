"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[2141],{65874:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api/notifications-preferences","title":"Notification Preferences API","description":"Overview","source":"@site/docs/api/notifications-preferences.md","sourceDirName":"api","slug":"/api/notifications-preferences","permalink":"/ring/docs/api/notifications-preferences","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/api/notifications-preferences.md","tags":[],"version":"current","lastUpdatedAt":1750255417000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Mark All Notifications as Read API","permalink":"/ring/docs/api/notifications-read-all"},"next":{"title":"Comments API","permalink":"/ring/docs/api/comments"}}');var t=s(74848),i=s(28453);const a={},c="Notification Preferences API",o={},l=[{value:"Overview",id:"overview",level:2},{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"Authentication",id:"authentication",level:2},{value:"GET - Retrieve Preferences",id:"get---retrieve-preferences",level:2},{value:"Request",id:"request",level:3},{value:"Response Format",id:"response-format",level:3},{value:"Success Response (200)",id:"success-response-200",level:4},{value:"Default Preferences (200)",id:"default-preferences-200",level:4},{value:"PUT - Update Preferences",id:"put---update-preferences",level:2},{value:"Request Body",id:"request-body",level:3},{value:"Example Request",id:"example-request",level:3},{value:"Response Format",id:"response-format-1",level:3},{value:"Success Response (200)",id:"success-response-200-1",level:4},{value:"Error Responses",id:"error-responses",level:2},{value:"Unauthorized (401)",id:"unauthorized-401",level:3},{value:"Bad Request (400)",id:"bad-request-400",level:3},{value:"Internal Server Error (500)",id:"internal-server-error-500",level:3},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"React Component for Preferences Management",id:"react-component-for-preferences-management",level:3},{value:"Custom Hook for Preferences",id:"custom-hook-for-preferences",level:3},{value:"Server Action (Next.js 13+)",id:"server-action-nextjs-13",level:3},{value:"cURL Examples",id:"curl-examples",level:3},{value:"Get Preferences",id:"get-preferences",level:4},{value:"Update Preferences",id:"update-preferences",level:4},{value:"Business Logic",id:"business-logic",level:2},{value:"GET Request Flow:",id:"get-request-flow",level:3},{value:"PUT Request Flow:",id:"put-request-flow",level:3},{value:"Database Schema",id:"database-schema",level:2},{value:"Preferences Document Structure",id:"preferences-document-structure",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Performance Notes",id:"performance-notes",level:2},{value:"Rate Limiting",id:"rate-limiting",level:2},{value:"Testing",id:"testing",level:2},{value:"Unit Test Example",id:"unit-test-example",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"notification-preferences-api",children:"Notification Preferences API"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Notification Preferences API"})," allows authenticated users to view and manage their notification preferences. This endpoint supports both retrieving current preferences and updating them with new settings across multiple notification channels."]}),"\n",(0,t.jsx)(n.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"URL"}),": ",(0,t.jsx)(n.code,{children:"/api/notifications/preferences"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Methods"}),": ",(0,t.jsx)(n.code,{children:"GET"}),", ",(0,t.jsx)(n.code,{children:"PUT"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication"}),": Required (NextAuth.js session)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Content-Type"}),": ",(0,t.jsx)(n.code,{children:"application/json"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,t.jsx)(n.p,{children:"This endpoint requires user authentication via NextAuth.js session:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { getSession } from 'next-auth/react'\n\nconst session = await getSession()\nif (!session) {\n  // Handle unauthenticated state\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"get---retrieve-preferences",children:"GET - Retrieve Preferences"}),"\n",(0,t.jsx)(n.h3,{id:"request",children:"Request"}),"\n",(0,t.jsx)(n.p,{children:"No request body required for GET requests."}),"\n",(0,t.jsx)(n.h3,{id:"response-format",children:"Response Format"}),"\n",(0,t.jsx)(n.h4,{id:"success-response-200",children:"Success Response (200)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "enabled": true,\n  "channels": {\n    "inApp": true,\n    "email": true,\n    "sms": false,\n    "push": false\n  },\n  "categories": {\n    "messages": true,\n    "opportunities": true,\n    "entities": false,\n    "system": true,\n    "marketing": false\n  },\n  "frequency": {\n    "immediate": true,\n    "daily": false,\n    "weekly": false\n  },\n  "quietHours": {\n    "enabled": true,\n    "start": "22:00",\n    "end": "08:00",\n    "timezone": "UTC"\n  },\n  "language": "en",\n  "updatedAt": "2024-01-15T10:30:00Z"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"default-preferences-200",children:"Default Preferences (200)"}),"\n",(0,t.jsx)(n.p,{children:"If no preferences exist, default values are returned:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "enabled": true,\n  "channels": {\n    "inApp": true,\n    "email": true,\n    "sms": false,\n    "push": false\n  },\n  "language": "en",\n  "updatedAt": "2024-01-15T10:30:00Z"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"put---update-preferences",children:"PUT - Update Preferences"}),"\n",(0,t.jsx)(n.h3,{id:"request-body",children:"Request Body"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"enabled"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Master toggle for all notifications"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"channels"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Notification channel preferences"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"channels.inApp"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"In-app notifications"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"channels.email"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Email notifications"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"channels.sms"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"SMS notifications"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"channels.push"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Push notifications"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"categories"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Notification category preferences"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"frequency"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Notification frequency settings"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"quietHours"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Quiet hours configuration"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"language"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Preferred language (en, uk)"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"example-request",children:"Example Request"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "enabled": true,\n  "channels": {\n    "inApp": true,\n    "email": true,\n    "sms": false,\n    "push": true\n  },\n  "categories": {\n    "messages": true,\n    "opportunities": true,\n    "entities": false,\n    "system": true,\n    "marketing": false\n  },\n  "frequency": {\n    "immediate": false,\n    "daily": true,\n    "weekly": false\n  },\n  "quietHours": {\n    "enabled": true,\n    "start": "23:00",\n    "end": "07:00",\n    "timezone": "Europe/Kiev"\n  },\n  "language": "uk"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"response-format-1",children:"Response Format"}),"\n",(0,t.jsx)(n.h4,{id:"success-response-200-1",children:"Success Response (200)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "message": "Notification preferences updated successfully"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"error-responses",children:"Error Responses"}),"\n",(0,t.jsx)(n.h3,{id:"unauthorized-401",children:"Unauthorized (401)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "User not authenticated"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"bad-request-400",children:"Bad Request (400)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Invalid preferences data provided."\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"internal-server-error-500",children:"Internal Server Error (500)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Failed to fetch notification preferences. Please try again later."\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Failed to update notification preferences. Please try again later."\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,t.jsx)(n.h3,{id:"react-component-for-preferences-management",children:"React Component for Preferences Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { useState, useEffect } from \'react\'\nimport { useSession } from \'next-auth/react\'\n\ninterface NotificationPreferences {\n  enabled: boolean\n  channels: {\n    inApp: boolean\n    email: boolean\n    sms: boolean\n    push: boolean\n  }\n  categories: {\n    messages: boolean\n    opportunities: boolean\n    entities: boolean\n    system: boolean\n    marketing: boolean\n  }\n  frequency: {\n    immediate: boolean\n    daily: boolean\n    weekly: boolean\n  }\n  quietHours: {\n    enabled: boolean\n    start: string\n    end: string\n    timezone: string\n  }\n  language: string\n}\n\nfunction NotificationPreferences() {\n  const { data: session } = useSession()\n  const [preferences, setPreferences] = useState<NotificationPreferences | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState<string | null>(null)\n\n  // Fetch preferences on component mount\n  useEffect(() => {\n    if (!session) return\n\n    const fetchPreferences = async () => {\n      try {\n        const response = await fetch(\'/api/notifications/preferences\')\n        \n        if (!response.ok) {\n          throw new Error(\'Failed to fetch preferences\')\n        }\n\n        const data = await response.json()\n        setPreferences(data)\n      } catch (err) {\n        setError(err instanceof Error ? err.message : \'Unknown error\')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchPreferences()\n  }, [session])\n\n  const handleSave = async () => {\n    if (!session || !preferences) return\n\n    setSaving(true)\n    setError(null)\n    setSuccess(null)\n\n    try {\n      const response = await fetch(\'/api/notifications/preferences\', {\n        method: \'PUT\',\n        headers: {\n          \'Content-Type\': \'application/json\',\n        },\n        body: JSON.stringify(preferences),\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.error || \'Failed to save preferences\')\n      }\n\n      setSuccess(\'Preferences saved successfully!\')\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \'Unknown error\')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const updatePreference = (path: string, value: any) => {\n    if (!preferences) return\n\n    const keys = path.split(\'.\')\n    const newPreferences = { ...preferences }\n    let current: any = newPreferences\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      current[keys[i]] = { ...current[keys[i]] }\n      current = current[keys[i]]\n    }\n\n    current[keys[keys.length - 1]] = value\n    setPreferences(newPreferences)\n  }\n\n  if (loading) {\n    return <div className="flex justify-center p-4">Loading preferences...</div>\n  }\n\n  if (!preferences) {\n    return <div className="text-red-500 p-4">Failed to load preferences</div>\n  }\n\n  return (\n    <div className="max-w-2xl mx-auto p-6 space-y-6">\n      <h2 className="text-2xl font-bold">Notification Preferences</h2>\n\n      {error && (\n        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">\n          {error}\n        </div>\n      )}\n\n      {success && (\n        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">\n          {success}\n        </div>\n      )}\n\n      {/* Master Toggle */}\n      <div className="border rounded-lg p-4">\n        <label className="flex items-center space-x-3">\n          <input\n            type="checkbox"\n            checked={preferences.enabled}\n            onChange={(e) => updatePreference(\'enabled\', e.target.checked)}\n            className="w-4 h-4 text-blue-600"\n          />\n          <span className="text-lg font-semibold">Enable Notifications</span>\n        </label>\n      </div>\n\n      {/* Channels */}\n      <div className="border rounded-lg p-4 space-y-3">\n        <h3 className="text-lg font-semibold">Notification Channels</h3>\n        \n        {Object.entries(preferences.channels).map(([channel, enabled]) => (\n          <label key={channel} className="flex items-center space-x-3">\n            <input\n              type="checkbox"\n              checked={enabled}\n              onChange={(e) => updatePreference(`channels.${channel}`, e.target.checked)}\n              disabled={!preferences.enabled}\n              className="w-4 h-4 text-blue-600"\n            />\n            <span className="capitalize">{channel.replace(/([A-Z])/g, \' $1\').trim()}</span>\n          </label>\n        ))}\n      </div>\n\n      {/* Categories */}\n      <div className="border rounded-lg p-4 space-y-3">\n        <h3 className="text-lg font-semibold">Notification Categories</h3>\n        \n        {preferences.categories && Object.entries(preferences.categories).map(([category, enabled]) => (\n          <label key={category} className="flex items-center space-x-3">\n            <input\n              type="checkbox"\n              checked={enabled}\n              onChange={(e) => updatePreference(`categories.${category}`, e.target.checked)}\n              disabled={!preferences.enabled}\n              className="w-4 h-4 text-blue-600"\n            />\n            <span className="capitalize">{category}</span>\n          </label>\n        ))}\n      </div>\n\n      {/* Save Button */}\n      <button\n        onClick={handleSave}\n        disabled={saving || !preferences.enabled}\n        className="w-full py-2 px-4 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"\n      >\n        {saving ? \'Saving...\' : \'Save Preferences\'}\n      </button>\n    </div>\n  )\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"custom-hook-for-preferences",children:"Custom Hook for Preferences"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { useState, useEffect, useCallback } from 'react'\nimport { useSession } from 'next-auth/react'\n\nexport function useNotificationPreferences() {\n  const { data: session } = useSession()\n  const [preferences, setPreferences] = useState<NotificationPreferences | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchPreferences = useCallback(async () => {\n    if (!session) return\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      const response = await fetch('/api/notifications/preferences')\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch preferences')\n      }\n\n      const data = await response.json()\n      setPreferences(data)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error')\n    } finally {\n      setLoading(false)\n    }\n  }, [session])\n\n  const updatePreferences = useCallback(async (newPreferences: Partial<NotificationPreferences>) => {\n    if (!session) return false\n\n    try {\n      const response = await fetch('/api/notifications/preferences', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(newPreferences),\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to update preferences')\n      }\n\n      // Refetch preferences after update\n      await fetchPreferences()\n      return true\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error')\n      return false\n    }\n  }, [session, fetchPreferences])\n\n  useEffect(() => {\n    fetchPreferences()\n  }, [fetchPreferences])\n\n  return {\n    preferences,\n    loading,\n    error,\n    fetchPreferences,\n    updatePreferences\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"server-action-nextjs-13",children:"Server Action (Next.js 13+)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"'use server'\n\nimport { auth } from '@/auth'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function updateNotificationPreferencesAction(formData: FormData) {\n  const session = await auth()\n  \n  if (!session) {\n    redirect('/auth/signin')\n  }\n\n  const preferences = {\n    enabled: formData.get('enabled') === 'true',\n    channels: {\n      inApp: formData.get('channels.inApp') === 'true',\n      email: formData.get('channels.email') === 'true',\n      sms: formData.get('channels.sms') === 'true',\n      push: formData.get('channels.push') === 'true',\n    },\n    language: formData.get('language') as string || 'en'\n  }\n\n  try {\n    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/notifications/preferences`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Cookie': request.headers.get('cookie') || '',\n      },\n      body: JSON.stringify(preferences),\n    })\n\n    if (!response.ok) {\n      const error = await response.json()\n      throw new Error(error.error || 'Failed to update preferences')\n    }\n\n    revalidatePath('/settings/notifications')\n    redirect('/settings/notifications?success=preferences-updated')\n    \n  } catch (error) {\n    console.error('Server action error:', error)\n    throw error\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"curl-examples",children:"cURL Examples"}),"\n",(0,t.jsx)(n.h4,{id:"get-preferences",children:"Get Preferences"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -X GET https://ring.ck.ua/api/notifications/preferences \\\n  -H "Content-Type: application/json" \\\n  -H "Cookie: next-auth.session-token=your-session-token"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"update-preferences",children:"Update Preferences"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -X PUT https://ring.ck.ua/api/notifications/preferences \\\n  -H "Content-Type: application/json" \\\n  -H "Cookie: next-auth.session-token=your-session-token" \\\n  -d \'{\n    "enabled": true,\n    "channels": {\n      "inApp": true,\n      "email": true,\n      "sms": false,\n      "push": true\n    },\n    "language": "en"\n  }\'\n'})}),"\n",(0,t.jsx)(n.h2,{id:"business-logic",children:"Business Logic"}),"\n",(0,t.jsx)(n.h3,{id:"get-request-flow",children:"GET Request Flow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication Check"}),": Verifies user session"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Preference Retrieval"}),": Fetches user preferences from database"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Default Handling"}),": Returns default preferences if none exist"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Response"}),": Returns preference object"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"put-request-flow",children:"PUT Request Flow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication Check"}),": Verifies user session"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Input Validation"}),": Validates preference data structure"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Database Update"}),": Updates or creates user preferences"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Response"}),": Returns success confirmation"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,t.jsx)(n.h3,{id:"preferences-document-structure",children:"Preferences Document Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "userId": "user123",\n  "enabled": true,\n  "channels": {\n    "inApp": true,\n    "email": true,\n    "sms": false,\n    "push": false\n  },\n  "categories": {\n    "messages": true,\n    "opportunities": true,\n    "entities": false,\n    "system": true,\n    "marketing": false\n  },\n  "frequency": {\n    "immediate": true,\n    "daily": false,\n    "weekly": false\n  },\n  "quietHours": {\n    "enabled": true,\n    "start": "22:00",\n    "end": "08:00",\n    "timezone": "UTC"\n  },\n  "language": "en",\n  "createdAt": "2024-01-15T10:30:00Z",\n  "updatedAt": "2024-01-15T14:22:00Z"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication Required"}),": Only authenticated users can access preferences"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User Isolation"}),": Users can only access their own preferences"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Input Validation"}),": All preference values are validated before storage"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Safe Defaults"}),": Secure default values when preferences don't exist"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"performance-notes",children:"Performance Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Single Query"}),": Efficient retrieval with one database query"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Partial Updates"}),": Only modified fields are updated in database"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Caching"}),": Preferences are cached at application level for performance"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User-based"}),": 20 requests per minute per authenticated user"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Global"}),": 500 requests per minute across all users"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.h3,{id:"unit-test-example",children:"Unit Test Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { GET, PUT } from '@/app/api/notifications/preferences/route'\nimport { NextRequest } from 'next/server'\n\njest.mock('@/auth')\njest.mock('@/services/notifications/notification-service')\n\ndescribe('/api/notifications/preferences', () => {\n  it('should fetch preferences successfully', async () => {\n    (getServerAuthSession as jest.Mock).mockResolvedValue({\n      user: { id: 'user123', role: 'member' }\n    })\n\n    const request = new NextRequest('http://localhost:3000/api/notifications/preferences')\n    const response = await GET(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.enabled).toBeDefined()\n    expect(data.channels).toBeDefined()\n  })\n\n  it('should update preferences successfully', async () => {\n    const preferences = {\n      enabled: true,\n      channels: { inApp: true, email: false },\n      language: 'en'\n    }\n\n    const request = new NextRequest('http://localhost:3000/api/notifications/preferences', {\n      method: 'PUT',\n      body: JSON.stringify(preferences)\n    })\n\n    const response = await PUT(request)\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n  })\n})\n"})}),"\n",(0,t.jsx)(n.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api/notifications",children:(0,t.jsx)(n.code,{children:"GET /api/notifications"})})," - List user notifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api/notifications-read",children:(0,t.jsx)(n.code,{children:"POST /api/notifications/[id]/read"})})," - Mark specific notification as read"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api/notifications-read-all",children:(0,t.jsx)(n.code,{children:"POST /api/notifications/read-all"})})," - Mark all notifications as read"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var r=s(96540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);