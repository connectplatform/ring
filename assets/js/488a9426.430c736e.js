"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[2909],{5817:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"services/getEntities","title":"getEntities","description":"Entities Service Documentation:","source":"@site/docs/services/getEntities.md","sourceDirName":"services","slug":"/services/getEntities","permalink":"/ring/docs/services/getEntities","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/services/getEntities.md","tags":[],"version":"current","lastUpdatedAt":1733486397000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Utils","permalink":"/ring/docs/libraries/utils"},"next":{"title":"GetConfidentialEntities","permalink":"/ring/docs/services/getConfidentialEntities"}}');var s=i(4848),r=i(8453);const o={},l=void 0,c={},d=[{value:"<strong>Entities Service Documentation:</strong>",id:"entities-service-documentation",level:3},{value:"1. <code>getEntities</code> Service",id:"1-getentities-service",level:2},{value:"<strong>Request Parameters</strong>",id:"request-parameters",level:3},{value:"<strong>Function Call</strong>",id:"function-call",level:3},{value:"<strong>Response</strong>",id:"response",level:3},{value:"<strong>Role-Based Filtering</strong>",id:"role-based-filtering",level:3},{value:"<strong>Tip: Add Pagination</strong>",id:"tip-add-pagination",level:4},{value:"Conclusion",id:"conclusion",level:2}];function a(e){const n={br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"entities-service-documentation",children:(0,s.jsx)(n.strong,{children:"Entities Service Documentation:"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"1-getentities-service",children:["1. ",(0,s.jsx)(n.code,{children:"getEntities"})," Service"]}),"\n",(0,s.jsx)(n.p,{children:"Fetches an array of entities from Firestore, filtered based on the user's role."}),"\n",(0,s.jsx)(n.h3,{id:"request-parameters",children:(0,s.jsx)(n.strong,{children:"Request Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"userRole"}),": ",(0,s.jsx)(n.code,{children:"UserRole"}),(0,s.jsx)(n.br,{}),"\n","The role of the user making the request (e.g., ",(0,s.jsx)(n.code,{children:"ADMIN"}),", ",(0,s.jsx)(n.code,{children:"MEMBER"}),", etc.)."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"function-call",children:(0,s.jsx)(n.strong,{children:"Function Call"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"getEntities(userRole: UserRole): Promise<Entity[]>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"response",children:(0,s.jsx)(n.strong,{children:"Response"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"[\n  {\n    id: string;                 // Document ID\n    name: string;               // Name of the Entity\n    description: string;        // Brief description\n    visibility: 'confidential'; // Whether the Entity is confidential\n    // Other entity fields...\n  }\n];\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"role-based-filtering",children:(0,s.jsx)(n.strong,{children:"Role-Based Filtering"})}),"\n",(0,s.jsx)(n.p,{children:"The function implements role-specific visibility logic:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ADMIN / CONFIDENTIAL"})," roles: Full access to all entities, including confidential ones."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"MEMBERS"}),": Limited to non-confidential entities only."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SUBSCRIBERS"}),": Even stricter filtering, offering only public data."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example Usage"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const entities = await getEntities(UserRole.ADMIN);\n\nconsole.log(entities);  // Prints all fetched entities (including confidential ones).\n"})}),"\n",(0,s.jsx)(n.h4,{id:"tip-add-pagination",children:(0,s.jsx)(n.strong,{children:"Tip: Add Pagination"})}),"\n",(0,s.jsxs)(n.p,{children:["For improved performance in the future, consider implementing pagination similar to the ",(0,s.jsx)(n.code,{children:"getOpportunities"})," service."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Error Responses"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"500 Internal Server Error"}),": Returns if unexpected issues occur while querying the data."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(n.p,{children:["This document outlines the ",(0,s.jsx)(n.code,{children:"services"})," layer that powers key operations for opportunities and entities. For efficient development:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use role-based visibility and filters."}),"\n",(0,s.jsx)(n.li,{children:"Add pagination for large datasets."}),"\n",(0,s.jsxs)(n.li,{children:["Optimize with Firestore indexes.",(0,s.jsx)(n.br,{}),"\n","Stay tuned for updates or new APIs in this section. Let us know if you require additional methods!"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(6540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);