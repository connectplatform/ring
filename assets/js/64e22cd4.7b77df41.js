"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[7585],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var o=i(96540);const t={},r=o.createContext(t);function s(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(r.Provider,{value:n},e.children)}},31831:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"api/opportunities/upload","title":"Opportunities Upload API","description":"Overview","source":"@site/docs/ru/api/opportunities/upload.md","sourceDirName":"api/opportunities","slug":"/api/opportunities/upload","permalink":"/ring/ru/api/opportunities/upload","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/ru/api/opportunities/upload.md","tags":[],"version":"current","lastUpdatedAt":1750331037000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Opportunities Delete API","permalink":"/ring/ru/api/opportunities/delete"},"next":{"title":"Confidential Opportunities API","permalink":"/ring/ru/api/opportunities/confidential"}}');var t=i(74848),r=i(28453);const s={},l="Opportunities Upload API",p={},a=[{value:"Overview",id:"overview",level:2},{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"Ring Platform Opportunity File Management",id:"ring-platform-opportunity-file-management",level:2},{value:"File Types and Use Cases",id:"file-types-and-use-cases",level:3},{value:"<strong>Supported File Categories</strong>",id:"supported-file-categories",level:4},{value:"<strong>Permission-Based Access</strong>",id:"permission-based-access",level:4},{value:"Request Format",id:"request-format",level:2},{value:"Headers",id:"headers",level:3},{value:"Form Data Parameters",id:"form-data-parameters",level:3},{value:"Example Form Data",id:"example-form-data",level:3},{value:"Response Format",id:"response-format",level:2},{value:"Success Response (200 OK)",id:"success-response-200-ok",level:3},{value:"Error Responses",id:"error-responses",level:3},{value:"Unauthorized (401)",id:"unauthorized-401",level:4},{value:"Insufficient Permissions (403)",id:"insufficient-permissions-403",level:4},{value:"No File Provided (400)",id:"no-file-provided-400",level:4},{value:"File Too Large (413)",id:"file-too-large-413",level:4},{value:"Unsupported File Type (415)",id:"unsupported-file-type-415",level:4},{value:"Code Examples",id:"code-examples",level:2},{value:"JavaScript/TypeScript",id:"javascripttypescript",level:3},{value:"React Component for Opportunity File Upload",id:"react-component-for-opportunity-file-upload",level:3},{value:"cURL Example",id:"curl-example",level:3},{value:"Python Example",id:"python-example",level:3},{value:"File Management and Security",id:"file-management-and-security",level:2},{value:"Permission-Based Access",id:"permission-based-access-1",level:3},{value:"Security Features",id:"security-features",level:3},{value:"File Organization",id:"file-organization",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2},{value:"Changelog",id:"changelog",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"opportunities-upload-api",children:"Opportunities Upload API"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Opportunities Upload API allows authenticated users to upload files and attachments related to opportunities within the Ring Platform. This endpoint supports job descriptions, requirements documents, application forms, and other opportunity-related files."}),"\n",(0,t.jsx)(n.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"URL"}),": ",(0,t.jsx)(n.code,{children:"/api/opportunities/upload"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Method"}),": ",(0,t.jsx)(n.code,{children:"POST"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication"}),": Required (Bearer token or session)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authorization"}),": MEMBER, CONFIDENTIAL, or ADMIN level"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Content Type"}),": ",(0,t.jsx)(n.code,{children:"multipart/form-data"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"File Size Limit"}),": 25MB per file"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Supported Formats"}),": Documents, images, presentations, archives"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"ring-platform-opportunity-file-management",children:"Ring Platform Opportunity File Management"}),"\n",(0,t.jsx)(n.h3,{id:"file-types-and-use-cases",children:"File Types and Use Cases"}),"\n",(0,t.jsx)(n.p,{children:"Ring Platform supports various file types for opportunity documentation and requirements:"}),"\n",(0,t.jsx)(n.h4,{id:"supported-file-categories",children:(0,t.jsx)(n.strong,{children:"Supported File Categories"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Job Descriptions"}),": PDF, DOC, DOCX (detailed role specifications)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Application Forms"}),": PDF, DOC (custom application templates)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Requirements"}),": PDF, TXT (technical specifications, skill requirements)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Company Materials"}),": PDF, PPT, PPTX (company overviews, culture docs)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Images"}),": JPG, PNG (office photos, team pictures, work environment)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Archives"}),": ZIP, RAR (code samples, portfolio requirements)"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"permission-based-access",children:(0,t.jsx)(n.strong,{children:"Permission-Based Access"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MEMBER"}),": Can upload files for their entity's opportunities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CONFIDENTIAL"}),": Can upload files for confidential opportunities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ADMIN"}),": Can upload files for any opportunity"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enhanced Security"}),": Confidential opportunity files have additional protection"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"request-format",children:"Request Format"}),"\n",(0,t.jsx)(n.h3,{id:"headers",children:"Headers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-http",children:"POST /api/opportunities/upload\nContent-Type: multipart/form-data\nAuthorization: Bearer <token>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"form-data-parameters",children:"Form Data Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"file"})," (required): The file to upload"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"opportunityId"})," (optional): Associate file with specific opportunity"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fileType"})," (optional): Category of file (description, application, requirement, etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"description"})," (optional): File description or purpose"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isPublic"})," (optional): Whether file should be publicly accessible (default: true)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-form-data",children:"Example Form Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const formData = new FormData();\nformData.append('file', fileInput.files[0]);\nformData.append('opportunityId', 'opp_abc123def456');\nformData.append('fileType', 'description');\nformData.append('description', 'Detailed job description for Senior Developer role');\nformData.append('isPublic', 'true');\n"})}),"\n",(0,t.jsx)(n.h2,{id:"response-format",children:"Response Format"}),"\n",(0,t.jsx)(n.h3,{id:"success-response-200-ok",children:"Success Response (200 OK)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "url": "https://blob.vercel-storage.com/opportunities/opp_abc123/user_456_1705234567890_job-description.pdf",\n  "downloadUrl": "https://blob.vercel-storage.com/opportunities/opp_abc123/user_456_1705234567890_job-description.pdf?download=1",\n  "filename": "job-description.pdf",\n  "size": 1048576,\n  "contentType": "application/pdf",\n  "opportunityId": "opp_abc123def456",\n  "fileType": "description",\n  "description": "Detailed job description for Senior Developer role",\n  "isPublic": true,\n  "uploadedAt": "2025-01-14T16:45:00Z",\n  "uploadedBy": "user_456",\n  "metadata": {\n    "pages": 3,\n    "format": "PDF",\n    "encrypted": false\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"error-responses",children:"Error Responses"}),"\n",(0,t.jsx)(n.h4,{id:"unauthorized-401",children:"Unauthorized (401)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Unauthorized"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"insufficient-permissions-403",children:"Insufficient Permissions (403)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Access denied: Insufficient permissions to upload opportunity files"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"no-file-provided-400",children:"No File Provided (400)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "No file provided"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"file-too-large-413",children:"File Too Large (413)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "File size exceeds the maximum allowed limit"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"unsupported-file-type-415",children:"Unsupported File Type (415)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Invalid file type"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,t.jsx)(n.h3,{id:"javascripttypescript",children:"JavaScript/TypeScript"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface OpportunityFileUploadResult {\n  success: boolean;\n  url: string;\n  downloadUrl: string;\n  filename: string;\n  size: number;\n  contentType: string;\n  opportunityId?: string;\n  fileType?: string;\n  description?: string;\n  isPublic: boolean;\n  uploadedAt: string;\n  uploadedBy: string;\n  metadata?: {\n    pages?: number;\n    format?: string;\n    encrypted?: boolean;\n  };\n}\n\nasync function uploadOpportunityFile(\n  file: File,\n  authToken: string,\n  options: {\n    opportunityId?: string;\n    fileType?: string;\n    description?: string;\n    isPublic?: boolean;\n  } = {}\n): Promise<OpportunityFileUploadResult> {\n  const formData = new FormData();\n  formData.append('file', file);\n  \n  if (options.opportunityId) {\n    formData.append('opportunityId', options.opportunityId);\n  }\n  \n  if (options.fileType) {\n    formData.append('fileType', options.fileType);\n  }\n  \n  if (options.description) {\n    formData.append('description', options.description);\n  }\n  \n  if (options.isPublic !== undefined) {\n    formData.append('isPublic', options.isPublic.toString());\n  }\n\n  const response = await fetch('/api/opportunities/upload', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${authToken}`\n    },\n    body: formData\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to upload file');\n  }\n\n  return response.json();\n}\n\n// Usage examples\ntry {\n  // Upload job description\n  const jobDescFile = document.getElementById('jobDescInput').files[0];\n  const jobDescResult = await uploadOpportunityFile(jobDescFile, userToken, {\n    opportunityId: 'opp_abc123',\n    fileType: 'description',\n    description: 'Comprehensive job description with requirements',\n    isPublic: true\n  });\n  \n  console.log('Job description uploaded:', jobDescResult.url);\n\n  // Upload application form\n  const appFormFile = document.getElementById('appFormInput').files[0];\n  const appFormResult = await uploadOpportunityFile(appFormFile, userToken, {\n    opportunityId: 'opp_abc123',\n    fileType: 'application',\n    description: 'Custom application form for candidates',\n    isPublic: true\n  });\n  \n  console.log('Application form uploaded:', appFormResult.url);\n\n  // Upload confidential requirements (private file)\n  const reqFile = document.getElementById('reqInput').files[0];\n  const reqResult = await uploadOpportunityFile(reqFile, userToken, {\n    opportunityId: 'opp_confidential_456',\n    fileType: 'requirement',\n    description: 'Confidential technical requirements',\n    isPublic: false\n  });\n  \n  console.log('Requirements uploaded:', reqResult.url);\n\n} catch (error) {\n  console.error('Upload failed:', error.message);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"react-component-for-opportunity-file-upload",children:"React Component for Opportunity File Upload"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { useState, useRef } from \'react\';\n\ninterface OpportunityFileUploaderProps {\n  opportunityId?: string;\n  fileType?: string;\n  onUploadComplete?: (result: OpportunityFileUploadResult) => void;\n  acceptedTypes?: string;\n  maxSize?: number; // in bytes\n  allowPrivateFiles?: boolean;\n}\n\nfunction OpportunityFileUploader({\n  opportunityId,\n  fileType,\n  onUploadComplete,\n  acceptedTypes = ".pdf,.doc,.docx,.txt,.jpg,.png,.ppt,.pptx,.zip",\n  maxSize = 25 * 1024 * 1024, // 25MB\n  allowPrivateFiles = false\n}: OpportunityFileUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [description, setDescription] = useState(\'\');\n  const [isPublic, setIsPublic] = useState(true);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file size\n    if (file.size > maxSize) {\n      setError(`File size exceeds ${maxSize / (1024 * 1024)}MB limit`);\n      return;\n    }\n\n    setIsUploading(true);\n    setError(null);\n    setUploadProgress(0);\n\n    try {\n      const token = localStorage.getItem(\'authToken\');\n      if (!token) {\n        throw new Error(\'Authentication required\');\n      }\n\n      // Simulate upload progress\n      const progressInterval = setInterval(() => {\n        setUploadProgress(prev => Math.min(prev + 10, 90));\n      }, 100);\n\n      const result = await uploadOpportunityFile(file, token, {\n        opportunityId,\n        fileType,\n        description: description || `${fileType || \'File\'} for opportunity`,\n        isPublic\n      });\n\n      clearInterval(progressInterval);\n      setUploadProgress(100);\n      \n      onUploadComplete?.(result);\n      \n      // Reset form\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \'\';\n      }\n      setDescription(\'\');\n      setIsPublic(true);\n\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \'Upload failed\');\n    } finally {\n      setIsUploading(false);\n      setTimeout(() => setUploadProgress(0), 1000);\n    }\n  };\n\n  return (\n    <div className="opportunity-file-uploader">\n      <div className="upload-form">\n        <div className="form-group">\n          <label>File Description</label>\n          <input\n            type="text"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            placeholder={`Describe this ${fileType || \'file\'}...`}\n            disabled={isUploading}\n          />\n        </div>\n\n        {allowPrivateFiles && (\n          <div className="form-group">\n            <label>\n              <input\n                type="checkbox"\n                checked={isPublic}\n                onChange={(e) => setIsPublic(e.target.checked)}\n                disabled={isUploading}\n              />\n              Make file publicly accessible\n            </label>\n          </div>\n        )}\n\n        <div className="upload-area">\n          <input\n            ref={fileInputRef}\n            type="file"\n            accept={acceptedTypes}\n            onChange={handleFileSelect}\n            disabled={isUploading}\n            className="file-input"\n          />\n          \n          <div className="upload-prompt">\n            <div className="upload-icon">\ud83d\udcce</div>\n            <p>\n              {isUploading \n                ? `Uploading... ${uploadProgress}%`\n                : `Choose ${fileType || \'file\'} to upload`\n              }\n            </p>\n            <p className="upload-hint">\n              Max size: {maxSize / (1024 * 1024)}MB\n            </p>\n          </div>\n\n          {isUploading && (\n            <div className="progress-bar">\n              <div \n                className="progress-fill" \n                style={{ width: `${uploadProgress}%` }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n\n      {error && (\n        <div className="error-message">\n          {error}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Usage in opportunity management form\nfunction OpportunityFilesManager({ opportunityId }: { opportunityId: string }) {\n  const [opportunityFiles, setOpportunityFiles] = useState<OpportunityFileUploadResult[]>([]);\n\n  const handleFileUpload = (result: OpportunityFileUploadResult) => {\n    setOpportunityFiles(prev => [...prev, result]);\n    console.log(\'File uploaded successfully:\', result.filename);\n  };\n\n  return (\n    <div className="opportunity-files-manager">\n      <h3>Opportunity Files</h3>\n      \n      <div className="file-upload-sections">\n        <div className="upload-section">\n          <h4>Job Description</h4>\n          <OpportunityFileUploader\n            opportunityId={opportunityId}\n            fileType="description"\n            acceptedTypes=".pdf,.doc,.docx"\n            onUploadComplete={handleFileUpload}\n          />\n        </div>\n\n        <div className="upload-section">\n          <h4>Application Form</h4>\n          <OpportunityFileUploader\n            opportunityId={opportunityId}\n            fileType="application"\n            acceptedTypes=".pdf,.doc,.docx"\n            onUploadComplete={handleFileUpload}\n          />\n        </div>\n\n        <div className="upload-section">\n          <h4>Requirements & Specifications</h4>\n          <OpportunityFileUploader\n            opportunityId={opportunityId}\n            fileType="requirement"\n            acceptedTypes=".pdf,.doc,.docx,.txt"\n            allowPrivateFiles={true}\n            onUploadComplete={handleFileUpload}\n          />\n        </div>\n\n        <div className="upload-section">\n          <h4>Company Materials</h4>\n          <OpportunityFileUploader\n            opportunityId={opportunityId}\n            fileType="company"\n            acceptedTypes=".pdf,.ppt,.pptx,.jpg,.png"\n            onUploadComplete={handleFileUpload}\n          />\n        </div>\n      </div>\n\n      <div className="uploaded-files">\n        <h4>Uploaded Files</h4>\n        {opportunityFiles.map((file, index) => (\n          <div key={index} className="file-item">\n            <div className="file-info">\n              <span className="file-name">{file.filename}</span>\n              <span className="file-type">{file.fileType}</span>\n              <span className="file-size">{(file.size / 1024).toFixed(1)} KB</span>\n              <span className={`file-visibility ${file.isPublic ? \'public\' : \'private\'}`}>\n                {file.isPublic ? \'\ud83c\udf10 Public\' : \'\ud83d\udd12 Private\'}\n              </span>\n            </div>\n            <div className="file-actions">\n              <a href={file.url} target="_blank" rel="noopener noreferrer">\n                View\n              </a>\n              <a href={file.downloadUrl} download>\n                Download\n              </a>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"curl-example",children:"cURL Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Upload job description\ncurl -X POST "https://ring.ck.ua/api/opportunities/upload" \\\n  -H "Authorization: Bearer YOUR_AUTH_TOKEN" \\\n  -F "file=@job-description.pdf" \\\n  -F "opportunityId=opp_abc123def456" \\\n  -F "fileType=description" \\\n  -F "description=Comprehensive job description for Senior Developer" \\\n  -F "isPublic=true"\n\n# Upload confidential requirements\ncurl -X POST "https://ring.ck.ua/api/opportunities/upload" \\\n  -H "Authorization: Bearer YOUR_AUTH_TOKEN" \\\n  -F "file=@technical-requirements.pdf" \\\n  -F "opportunityId=opp_confidential_789" \\\n  -F "fileType=requirement" \\\n  -F "description=Confidential technical specifications" \\\n  -F "isPublic=false"\n\n# Upload application form\ncurl -X POST "https://ring.ck.ua/api/opportunities/upload" \\\n  -H "Authorization: Bearer YOUR_AUTH_TOKEN" \\\n  -F "file=@application-form.docx" \\\n  -F "opportunityId=opp_abc123def456" \\\n  -F "fileType=application" \\\n  -F "description=Custom application form for candidates"\n\n# Expected response\n# {\n#   "success": true,\n#   "url": "https://blob.vercel-storage.com/opportunities/opp_abc123/user_456_1705234567890_job-description.pdf",\n#   "filename": "job-description.pdf",\n#   "size": 1048576,\n#   "contentType": "application/pdf",\n#   "opportunityId": "opp_abc123def456",\n#   "fileType": "description",\n#   "uploadedAt": "2025-01-14T16:45:00Z"\n# }\n'})}),"\n",(0,t.jsx)(n.h3,{id:"python-example",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import requests\nfrom typing import Dict, Any, Optional\n\nclass OpportunityFileUploader:\n    def __init__(self, base_url: str, auth_token: str):\n        self.base_url = base_url.rstrip(\'/\')\n        self.auth_token = auth_token\n        self.headers = {\n            \'Authorization\': f\'Bearer {auth_token}\'\n        }\n    \n    def upload_file(\n        self, \n        file_path: str, \n        opportunity_id: Optional[str] = None,\n        file_type: Optional[str] = None,\n        description: Optional[str] = None,\n        is_public: bool = True\n    ) -> Dict[str, Any]:\n        """Upload a file for an opportunity"""\n        url = f"{self.base_url}/api/opportunities/upload"\n        \n        # Prepare form data\n        files = {\'file\': open(file_path, \'rb\')}\n        data = {}\n        \n        if opportunity_id:\n            data[\'opportunityId\'] = opportunity_id\n        if file_type:\n            data[\'fileType\'] = file_type\n        if description:\n            data[\'description\'] = description\n        data[\'isPublic\'] = str(is_public).lower()\n        \n        try:\n            response = requests.post(\n                url, \n                headers=self.headers, \n                files=files, \n                data=data\n            )\n            \n            if response.status_code == 200:\n                return response.json()\n            elif response.status_code == 401:\n                raise Exception("Unauthorized - check your authentication token")\n            elif response.status_code == 403:\n                raise Exception("Forbidden - insufficient permissions to upload opportunity files")\n            elif response.status_code == 400:\n                error_data = response.json()\n                raise Exception(f"Bad request: {error_data.get(\'error\', \'Unknown error\')}")\n            elif response.status_code == 413:\n                raise Exception("File too large - exceeds 25MB limit")\n            elif response.status_code == 415:\n                raise Exception("Unsupported file type")\n            else:\n                error_data = response.json()\n                raise Exception(f"Upload failed: {error_data.get(\'error\', \'Unknown error\')}")\n        \n        finally:\n            files[\'file\'].close()\n    \n    def upload_job_description(self, file_path: str, opportunity_id: str) -> Dict[str, Any]:\n        """Convenience method for uploading job descriptions"""\n        return self.upload_file(\n            file_path, \n            opportunity_id=opportunity_id, \n            file_type=\'description\',\n            description=\'Job description document\'\n        )\n    \n    def upload_application_form(self, file_path: str, opportunity_id: str) -> Dict[str, Any]:\n        """Convenience method for uploading application forms"""\n        return self.upload_file(\n            file_path, \n            opportunity_id=opportunity_id, \n            file_type=\'application\',\n            description=\'Application form for candidates\'\n        )\n    \n    def upload_requirements(self, file_path: str, opportunity_id: str, is_confidential: bool = False) -> Dict[str, Any]:\n        """Convenience method for uploading requirements"""\n        return self.upload_file(\n            file_path, \n            opportunity_id=opportunity_id, \n            file_type=\'requirement\',\n            description=\'Technical requirements and specifications\',\n            is_public=not is_confidential\n        )\n\n# Usage examples\nuploader = OpportunityFileUploader("https://ring.ck.ua", "your-auth-token")\n\ntry:\n    # Upload job description\n    job_desc_result = uploader.upload_job_description(\n        "./documents/senior-dev-job-description.pdf", \n        "opp_abc123"\n    )\n    print(f"Job description uploaded: {job_desc_result[\'url\']}")\n    \n    # Upload application form\n    app_form_result = uploader.upload_application_form(\n        "./forms/application-form.docx",\n        "opp_abc123"\n    )\n    print(f"Application form uploaded: {app_form_result[\'url\']}")\n    \n    # Upload confidential requirements\n    req_result = uploader.upload_requirements(\n        "./requirements/technical-specs.pdf",\n        "opp_confidential_456",\n        is_confidential=True\n    )\n    print(f"Requirements uploaded: {req_result[\'url\']}")\n    \n    # Batch upload multiple files for an opportunity\n    files_to_upload = [\n        {\n            "path": "./docs/job-description.pdf",\n            "type": "description",\n            "desc": "Senior Developer job description"\n        },\n        {\n            "path": "./forms/application.docx",\n            "type": "application", \n            "desc": "Application form"\n        },\n        {\n            "path": "./specs/technical-requirements.pdf",\n            "type": "requirement",\n            "desc": "Technical requirements"\n        },\n        {\n            "path": "./company/company-overview.pptx",\n            "type": "company",\n            "desc": "Company overview presentation"\n        }\n    ]\n    \n    opportunity_id = "opp_abc123"\n    upload_results = []\n    \n    for file_info in files_to_upload:\n        try:\n            result = uploader.upload_file(\n                file_info["path"],\n                opportunity_id=opportunity_id,\n                file_type=file_info["type"],\n                description=file_info["desc"]\n            )\n            upload_results.append({\n                \'filename\': result[\'filename\'],\n                \'url\': result[\'url\'],\n                \'type\': result[\'fileType\'],\n                \'status\': \'success\'\n            })\n        except Exception as e:\n            upload_results.append({\n                \'filename\': file_info["path"],\n                \'error\': str(e),\n                \'status\': \'error\'\n            })\n    \n    # Summary\n    successful = [r for r in upload_results if r[\'status\'] == \'success\']\n    failed = [r for r in upload_results if r[\'status\'] == \'error\']\n    \n    print(f"Batch upload complete: {len(successful)} successful, {len(failed)} failed")\n    \n    for result in successful:\n        print(f"\u2705 {result[\'filename\']} ({result[\'type\']})")\n    \n    for result in failed:\n        print(f"\u274c {result[\'filename\']}: {result[\'error\']}")\n    \nexcept Exception as e:\n    print(f"Error uploading file: {e}")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"file-management-and-security",children:"File Management and Security"}),"\n",(0,t.jsx)(n.h3,{id:"permission-based-access-1",children:"Permission-Based Access"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MEMBER Level"}),": Can upload files for their entity's opportunities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CONFIDENTIAL Level"}),": Can upload files for confidential opportunities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ADMIN Level"}),": Can upload files for any opportunity"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"File Visibility"}),": Public files accessible to all, private files restricted"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"security-features",children:"Security Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"File Validation"}),": Server-side validation of file types and sizes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Malware Scanning"}),": Automatic scanning of uploaded files"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Access Logging"}),": Track all file uploads and downloads"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Encryption"}),": Confidential files encrypted at rest"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"file-organization",children:"File Organization"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unique Naming"}),": Automatic file naming prevents conflicts"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Directory Structure"}),": Files organized by opportunity and user"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Metadata Tracking"}),": File purpose, upload date, and permissions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Version Control"}),": Handle file updates and replacements"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api/opportunities/create",children:"Create Opportunity"})," - Create new opportunities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api/opportunities/update",children:"Update Opportunity"})," - Modify opportunity information"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api/opportunities/get-by-id",children:"Get Opportunity"})," - Retrieve opportunity details"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api/entities/upload",children:"Entities Upload"})," - Upload entity files"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"v1.0.0"})," - Initial implementation with basic file upload"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"v1.1.0"})," - Added file type categorization and privacy controls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"v1.2.0"})," - Enhanced security for confidential opportunities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"v1.3.0"})," - Improved performance and metadata tracking"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);