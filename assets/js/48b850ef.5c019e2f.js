"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[7863],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(96540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},39305:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api/auth/crypto-nonce","title":"Web3 Nonce Generation","description":"Overview","source":"@site/docs/ru/api/auth/crypto-nonce.md","sourceDirName":"api/auth","slug":"/api/auth/crypto-nonce","permalink":"/ring/ru/api/auth/crypto-nonce","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/ru/api/auth/crypto-nonce.md","tags":[],"version":"current","lastUpdatedAt":1750331037000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"NextAuth.js Authentication","permalink":"/ring/ru/api/auth/nextauth"},"next":{"title":"User Profile Management","permalink":"/ring/ru/api/profile"}}');var r=s(74848),i=s(28453);const a={},o="Web3 Nonce Generation",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"Request",id:"request",level:2},{value:"Headers",id:"headers",level:3},{value:"Body Parameters",id:"body-parameters",level:3},{value:"Request Example",id:"request-example",level:3},{value:"Response",id:"response",level:2},{value:"Success Response (200)",id:"success-response-200",level:3},{value:"Response Fields",id:"response-fields",level:3},{value:"Authentication Flow",id:"authentication-flow",level:2},{value:"Complete Web3 Authentication Process",id:"complete-web3-authentication-process",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Frontend Integration (React/TypeScript)",id:"frontend-integration-reacttypescript",level:3},{value:"Backend Verification (NextAuth Credentials Provider)",id:"backend-verification-nextauth-credentials-provider",level:3},{value:"cURL Example",id:"curl-example",level:3},{value:"Python Example",id:"python-example",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Error Responses",id:"error-responses",level:3},{value:"Invalid Address (400)",id:"invalid-address-400",level:4},{value:"Rate Limit Exceeded (429)",id:"rate-limit-exceeded-429",level:4},{value:"Server Error (500)",id:"server-error-500",level:4},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Nonce Properties",id:"nonce-properties",level:3},{value:"Message Format",id:"message-format",level:3},{value:"Signature Verification",id:"signature-verification",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Nonce Storage",id:"nonce-storage",level:3},{value:"Validation Logic",id:"validation-logic",level:3},{value:"Testing",id:"testing",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"web3-nonce-generation",children:"Web3 Nonce Generation"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"/api/auth/crypto/generateNonce"})," endpoint generates cryptographic nonces for Web3 wallet authentication. This endpoint is essential for the MetaMask/Web3 login flow, providing secure message signing verification."]}),"\n",(0,r.jsx)(n.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"POST /api/auth/crypto/generateNonce\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Authentication"}),": None required (public endpoint)\n",(0,r.jsx)(n.strong,{children:"Rate Limit"}),": 10 requests per minute per IP"]}),"\n",(0,r.jsx)(n.h2,{id:"request",children:"Request"}),"\n",(0,r.jsx)(n.h3,{id:"headers",children:"Headers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"Content-Type: application/json\nAccept: application/json\n"})}),"\n",(0,r.jsx)(n.h3,{id:"body-parameters",children:"Body Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"address"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Ethereum wallet address (0x...)"})]})})]}),"\n",(0,r.jsx)(n.h3,{id:"request-example",children:"Request Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "address": "0x742d35Cc6634C0532925a3b8D4C2C4e0C8A8C8C8"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"response",children:"Response"}),"\n",(0,r.jsx)(n.h3,{id:"success-response-200",children:"Success Response (200)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "nonce": "Sign this message to authenticate with Ring Platform: 1703123456789",\n  "timestamp": 1703123456789,\n  "expiresAt": 1703123756789\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"response-fields",children:"Response Fields"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"nonce"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Formatted message for wallet signing"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"timestamp"})}),(0,r.jsx)(n.td,{children:"number"}),(0,r.jsx)(n.td,{children:"Unix timestamp when nonce was generated"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"expiresAt"})}),(0,r.jsx)(n.td,{children:"number"}),(0,r.jsx)(n.td,{children:"Unix timestamp when nonce expires (5 minutes)"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"authentication-flow",children:"Authentication Flow"}),"\n",(0,r.jsx)(n.h3,{id:"complete-web3-authentication-process",children:"Complete Web3 Authentication Process"}),"\n",(0,r.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Client\n    participant Ring API\n    participant MetaMask\n    participant NextAuth\n    \n    Client->>Ring API: POST /api/auth/crypto/generateNonce\n    Ring API->>Client: Return nonce message\n    Client->>MetaMask: Request signature\n    MetaMask->>Client: Return signed message\n    Client->>NextAuth: POST /api/auth/callback/credentials\n    NextAuth->>Ring API: Verify signature\n    Ring API->>NextAuth: Return user data\n    NextAuth->>Client: Set session"}),"\n",(0,r.jsx)(n.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,r.jsx)(n.h3,{id:"frontend-integration-reacttypescript",children:"Frontend Integration (React/TypeScript)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { ethers } from 'ethers'\nimport { signIn } from 'next-auth/react'\n\nasync function authenticateWithWallet() {\n  try {\n    // 1. Request account access\n    if (!window.ethereum) {\n      throw new Error('MetaMask not installed')\n    }\n    \n    const provider = new ethers.BrowserProvider(window.ethereum)\n    const accounts = await provider.send('eth_requestAccounts', [])\n    const address = accounts[0]\n    \n    // 2. Generate nonce\n    const nonceResponse = await fetch('/api/auth/crypto/generateNonce', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ address })\n    })\n    \n    const { nonce } = await nonceResponse.json()\n    \n    // 3. Sign message\n    const signer = await provider.getSigner()\n    const signature = await signer.signMessage(nonce)\n    \n    // 4. Authenticate with NextAuth\n    const result = await signIn('credentials', {\n      address,\n      signature,\n      message: nonce,\n      redirect: false\n    })\n    \n    if (result?.ok) {\n      console.log('Authentication successful')\n    } else {\n      console.error('Authentication failed:', result?.error)\n    }\n    \n  } catch (error) {\n    console.error('Wallet authentication error:', error)\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"backend-verification-nextauth-credentials-provider",children:"Backend Verification (NextAuth Credentials Provider)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { ethers } from 'ethers'\n\nconst credentialsProvider = CredentialsProvider({\n  id: 'web3',\n  name: 'Web3 Wallet',\n  credentials: {\n    address: { label: 'Address', type: 'text' },\n    signature: { label: 'Signature', type: 'text' },\n    message: { label: 'Message', type: 'text' }\n  },\n  async authorize(credentials) {\n    try {\n      if (!credentials?.address || !credentials?.signature || !credentials?.message) {\n        return null\n      }\n      \n      // Verify signature\n      const recoveredAddress = ethers.verifyMessage(\n        credentials.message,\n        credentials.signature\n      )\n      \n      if (recoveredAddress.toLowerCase() !== credentials.address.toLowerCase()) {\n        return null\n      }\n      \n      // Check nonce validity (implement your nonce storage/validation)\n      const isValidNonce = await validateNonce(credentials.message)\n      if (!isValidNonce) {\n        return null\n      }\n      \n      // Get or create user\n      const user = await getUserByWalletAddress(credentials.address)\n      \n      return {\n        id: user.id,\n        name: user.name || `User ${credentials.address.slice(0, 6)}...`,\n        email: user.email || `${credentials.address}@wallet.local`,\n        address: credentials.address\n      }\n      \n    } catch (error) {\n      console.error('Web3 auth error:', error)\n      return null\n    }\n  }\n})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"curl-example",children:"cURL Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Generate nonce\ncurl -X POST "https://ring.ck.ua/api/auth/crypto/generateNonce" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "address": "0x742d35Cc6634C0532925a3b8D4C2C4e0C8A8C8C8"\n  }\'\n'})}),"\n",(0,r.jsx)(n.h3,{id:"python-example",children:"Python Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import requests\nimport json\nfrom eth_account import Account\nfrom eth_account.messages import encode_defunct\n\ndef authenticate_with_wallet(private_key, address):\n    # Generate nonce\n    nonce_response = requests.post(\n        'https://ring.ck.ua/api/auth/crypto/generateNonce',\n        json={'address': address}\n    )\n    nonce_data = nonce_response.json()\n    \n    # Sign message\n    message = encode_defunct(text=nonce_data['nonce'])\n    signed_message = Account.sign_message(message, private_key)\n    \n    # Authenticate\n    auth_response = requests.post(\n        'https://ring.ck.ua/api/auth/callback/credentials',\n        data={\n            'address': address,\n            'signature': signed_message.signature.hex(),\n            'message': nonce_data['nonce']\n        }\n    )\n    \n    return auth_response.json()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"error-responses",children:"Error Responses"}),"\n",(0,r.jsx)(n.h4,{id:"invalid-address-400",children:"Invalid Address (400)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "INVALID_ADDRESS",\n  "message": "Invalid Ethereum address format",\n  "code": 400\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"rate-limit-exceeded-429",children:"Rate Limit Exceeded (429)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "RATE_LIMIT_EXCEEDED",\n  "message": "Too many nonce requests. Please try again later.",\n  "code": 429,\n  "retryAfter": 60\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"server-error-500",children:"Server Error (500)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "INTERNAL_ERROR",\n  "message": "Failed to generate nonce",\n  "code": 500\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"nonce-properties",children:"Nonce Properties"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Uniqueness"}),": Each nonce is unique per address and timestamp"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Expiration"}),": Nonces expire after 5 minutes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Single Use"}),": Each nonce can only be used once"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Format"}),": Includes timestamp and platform identifier"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"message-format",children:"Message Format"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Sign this message to authenticate with Ring Platform: {timestamp}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"signature-verification",children:"Signature Verification"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Address Recovery"}),": Verify signature recovers to provided address"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Nonce Validation"}),": Check nonce hasn't expired or been used"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Integrity"}),": Ensure message matches generated nonce"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Replay Protection"}),": Prevent signature reuse"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,r.jsx)(n.h3,{id:"nonce-storage",children:"Nonce Storage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface NonceRecord {\n  address: string\n  nonce: string\n  timestamp: number\n  expiresAt: number\n  used: boolean\n}\n\n// Store in Redis or database\nconst storeNonce = async (record: NonceRecord) => {\n  await redis.setex(\n    `nonce:${record.address}:${record.timestamp}`,\n    300, // 5 minutes TTL\n    JSON.stringify(record)\n  )\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"validation-logic",children:"Validation Logic"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const validateNonce = async (message: string, address: string): Promise<boolean> => {\n  const timestampMatch = message.match(/: (\\d+)$/)\n  if (!timestampMatch) return false\n  \n  const timestamp = parseInt(timestampMatch[1])\n  const now = Date.now()\n  \n  // Check expiration (5 minutes)\n  if (now - timestamp > 300000) return false\n  \n  // Check if nonce exists and hasn't been used\n  const nonceKey = `nonce:${address}:${timestamp}`\n  const nonceData = await redis.get(nonceKey)\n  \n  if (!nonceData) return false\n  \n  const nonce = JSON.parse(nonceData)\n  if (nonce.used) return false\n  \n  // Mark as used\n  nonce.used = true\n  await redis.setex(nonceKey, 300, JSON.stringify(nonce))\n  \n  return true\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"describe('Nonce Generation', () => {\n  test('should generate valid nonce for valid address', async () => {\n    const response = await request(app)\n      .post('/api/auth/crypto/generateNonce')\n      .send({ address: '0x742d35Cc6634C0532925a3b8D4C2C4e0C8A8C8C8' })\n      .expect(200)\n    \n    expect(response.body.nonce).toMatch(/^Sign this message to authenticate with Ring Platform: \\d+$/)\n    expect(response.body.timestamp).toBeGreaterThan(Date.now() - 1000)\n    expect(response.body.expiresAt).toBe(response.body.timestamp + 300000)\n  })\n  \n  test('should reject invalid address', async () => {\n    await request(app)\n      .post('/api/auth/crypto/generateNonce')\n      .send({ address: 'invalid-address' })\n      .expect(400)\n  })\n})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"describe('Web3 Authentication Flow', () => {\n  test('should complete full authentication', async () => {\n    const wallet = ethers.Wallet.createRandom()\n    \n    // Generate nonce\n    const nonceResponse = await request(app)\n      .post('/api/auth/crypto/generateNonce')\n      .send({ address: wallet.address })\n    \n    const { nonce } = nonceResponse.body\n    \n    // Sign message\n    const signature = await wallet.signMessage(nonce)\n    \n    // Authenticate\n    const authResponse = await request(app)\n      .post('/api/auth/callback/credentials')\n      .send({\n        address: wallet.address,\n        signature,\n        message: nonce\n      })\n    \n    expect(authResponse.status).toBe(200)\n  })\n})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/ring/ru/api/auth/nextauth",children:(0,r.jsx)(n.code,{children:"/api/auth/[...nextauth]"})})," - Main authentication endpoint"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/ring/ru/api/profile",children:(0,r.jsx)(n.code,{children:"/api/profile"})})," - User profile management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/ring/ru/api/wallet/create",children:(0,r.jsx)(n.code,{children:"/api/wallet/create"})})," - Wallet creation"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),': "Invalid signature"\n',(0,r.jsx)(n.strong,{children:"Solution"}),": Ensure message is signed exactly as provided by nonce endpoint"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),': "Nonce expired"\n',(0,r.jsx)(n.strong,{children:"Solution"}),": Generate new nonce, signatures must be completed within 5 minutes"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),': "Address mismatch"\n',(0,r.jsx)(n.strong,{children:"Solution"}),": Verify the signing address matches the address used to generate nonce"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),': "MetaMask not detected"\n',(0,r.jsx)(n.strong,{children:"Solution"}),": Ensure MetaMask extension is installed and enabled"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);