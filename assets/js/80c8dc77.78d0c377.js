"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[7615],{8594:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api/admin/users","title":"Admin User Management","description":"Overview","source":"@site/docs/uk/api/admin/users.md","sourceDirName":"api/admin","slug":"/api/admin/users","permalink":"/ring/uk/api/admin/users","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/uk/api/admin/users.md","tags":[],"version":"current","lastUpdatedAt":1750331037000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Transaction History API","permalink":"/ring/uk/api/wallet/transaction-history"},"next":{"title":"Admin User Verification API","permalink":"/ring/uk/api/admin/users-verification"}}');var r=s(74848),t=s(28453);const a={},o="Admin User Management",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"Get User Details",id:"get-user-details",level:3},{value:"Update User Role",id:"update-user-role",level:3},{value:"Update Verification Status",id:"update-verification-status",level:3},{value:"Delete User Account",id:"delete-user-account",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"JavaScript/TypeScript",id:"javascripttypescript",level:3},{value:"React Admin Component",id:"react-admin-component",level:3},{value:"cURL Examples",id:"curl-examples",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Unauthorized Access (403)",id:"unauthorized-access-403",level:3},{value:"User Not Found (404)",id:"user-not-found-404",level:3},{value:"Invalid Role (400)",id:"invalid-role-400",level:3},{value:"Cannot Delete Admin (400)",id:"cannot-delete-admin-400",level:3},{value:"Audit Logging",id:"audit-logging",level:2},{value:"Admin Action Logging",id:"admin-action-logging",level:3},{value:"Audit Log Example",id:"audit-log-example",level:3},{value:"Security Features",id:"security-features",level:2},{value:"Access Control",id:"access-control",level:3},{value:"Data Protection",id:"data-protection",level:3},{value:"Admin Restrictions",id:"admin-restrictions",level:3},{value:"Bulk Operations",id:"bulk-operations",level:2},{value:"Bulk Role Update",id:"bulk-role-update",level:3},{value:"Bulk Verification",id:"bulk-verification",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2},{value:"Testing",id:"testing",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"admin-user-management",children:"Admin User Management"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The admin user management endpoints provide comprehensive CRUD operations for user accounts, role management, and verification status. These endpoints are restricted to users with admin privileges and provide full control over the platform's user base."}),"\n",(0,r.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Required"}),": Admin role\n",(0,r.jsx)(n.strong,{children:"Endpoints"}),": ",(0,r.jsx)(n.code,{children:"/api/admin/users/*"}),"\n",(0,r.jsx)(n.strong,{children:"Rate Limit"}),": 300 requests per minute for admins"]}),"\n",(0,r.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,r.jsx)(n.h3,{id:"get-user-details",children:"Get User Details"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"GET /api/admin/users/[id]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Headers:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"Authorization: Bearer <admin-session-token>\nAccept: application/json\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Path Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"User ID"})]})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response (200):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "id": "user_123",\n  "email": "john.doe@example.com",\n  "name": "John Doe",\n  "firstName": "John",\n  "lastName": "Doe",\n  "avatar": "https://storage.ring.ck.ua/avatars/user_123.jpg",\n  "role": "member",\n  "isVerified": true,\n  "isActive": true,\n  "bio": "Software engineer passionate about Web3",\n  "location": "Kyiv, Ukraine",\n  "company": "Tech Innovations Ltd",\n  "position": "Senior Developer",\n  "walletAddress": "0x742d35Cc6634C0532925a3b8D4C2C4e0C8A8C8C8",\n  "authProviders": ["google", "metamask"],\n  "loginHistory": [\n    {\n      "timestamp": "2024-12-14T15:45:00Z",\n      "ip": "192.168.1.100",\n      "userAgent": "Mozilla/5.0...",\n      "provider": "google"\n    }\n  ],\n  "statistics": {\n    "entitiesCreated": 3,\n    "opportunitiesCreated": 7,\n    "notificationsSent": 45,\n    "lastActivity": "2024-12-14T15:45:00Z"\n  },\n  "preferences": {\n    "language": "en",\n    "theme": "dark",\n    "notifications": {\n      "email": true,\n      "push": true,\n      "sms": false\n    }\n  },\n  "createdAt": "2024-01-15T10:30:00Z",\n  "updatedAt": "2024-12-14T15:45:00Z",\n  "lastLoginAt": "2024-12-14T15:45:00Z"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"update-user-role",children:"Update User Role"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"PUT /api/admin/users/[id]/role\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Headers:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"Authorization: Bearer <admin-session-token>\nContent-Type: application/json\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Path Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"User ID"})]})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Request Body:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "role": "confidential",\n  "reason": "User verified as industry professional"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Available Roles:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"visitor"})," - Basic access"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"subscriber"})," - Newsletter and updates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"member"})," - Full platform access"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"confidential"})," - Premium features and exclusive content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"admin"})," - Administrative privileges"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response (200):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "message": "User role updated successfully",\n  "data": {\n    "userId": "user_123",\n    "previousRole": "member",\n    "newRole": "confidential",\n    "updatedBy": "admin_456",\n    "updatedAt": "2024-12-14T16:00:00Z",\n    "reason": "User verified as industry professional"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"update-verification-status",children:"Update Verification Status"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"PUT /api/admin/users/[id]/verification\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Headers:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"Authorization: Bearer <admin-session-token>\nContent-Type: application/json\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Request Body:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "isVerified": true,\n  "verificationType": "manual",\n  "notes": "Verified through LinkedIn profile and company email"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response (200):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "message": "User verification status updated",\n  "data": {\n    "userId": "user_123",\n    "isVerified": true,\n    "verificationType": "manual",\n    "verifiedBy": "admin_456",\n    "verifiedAt": "2024-12-14T16:00:00Z",\n    "notes": "Verified through LinkedIn profile and company email"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"delete-user-account",children:"Delete User Account"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"DELETE /api/admin/users/[id]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Headers:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"Authorization: Bearer <admin-session-token>\nContent-Type: application/json\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Request Body:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "reason": "Account violation - spam content",\n  "deleteData": true,\n  "notifyUser": false\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response (200):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "message": "User account deleted successfully",\n  "data": {\n    "userId": "user_123",\n    "deletedBy": "admin_456",\n    "deletedAt": "2024-12-14T16:00:00Z",\n    "reason": "Account violation - spam content",\n    "dataDeleted": true\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,r.jsx)(n.h3,{id:"javascripttypescript",children:"JavaScript/TypeScript"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Admin user management service\nclass AdminUserService {\n  private baseUrl = '/api/admin/users'\n  \n  async getUserDetails(userId: string) {\n    try {\n      const response = await fetch(`${this.baseUrl}/${userId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.getAdminToken()}`,\n          'Accept': 'application/json'\n        }\n      })\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch user details')\n      }\n      \n      return await response.json()\n    } catch (error) {\n      console.error('Error fetching user details:', error)\n      throw error\n    }\n  }\n  \n  async updateUserRole(userId: string, role: string, reason?: string) {\n    try {\n      const response = await fetch(`${this.baseUrl}/${userId}/role`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${this.getAdminToken()}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ role, reason })\n      })\n      \n      if (!response.ok) {\n        throw new Error('Failed to update user role')\n      }\n      \n      return await response.json()\n    } catch (error) {\n      console.error('Error updating user role:', error)\n      throw error\n    }\n  }\n  \n  async updateVerificationStatus(\n    userId: string, \n    isVerified: boolean, \n    notes?: string\n  ) {\n    try {\n      const response = await fetch(`${this.baseUrl}/${userId}/verification`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${this.getAdminToken()}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          isVerified,\n          verificationType: 'manual',\n          notes\n        })\n      })\n      \n      if (!response.ok) {\n        throw new Error('Failed to update verification status')\n      }\n      \n      return await response.json()\n    } catch (error) {\n      console.error('Error updating verification:', error)\n      throw error\n    }\n  }\n  \n  async deleteUser(userId: string, reason: string, deleteData = true) {\n    try {\n      const response = await fetch(`${this.baseUrl}/${userId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${this.getAdminToken()}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          reason,\n          deleteData,\n          notifyUser: false\n        })\n      })\n      \n      if (!response.ok) {\n        throw new Error('Failed to delete user')\n      }\n      \n      return await response.json()\n    } catch (error) {\n      console.error('Error deleting user:', error)\n      throw error\n    }\n  }\n  \n  private getAdminToken(): string {\n    // Implementation to get admin session token\n    return localStorage.getItem('adminToken') || ''\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"react-admin-component",children:"React Admin Component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { useState, useEffect } from 'react'\nimport { useSession } from 'next-auth/react'\n\ninterface User {\n  id: string\n  email: string\n  name: string\n  role: string\n  isVerified: boolean\n  isActive: boolean\n  createdAt: string\n  lastLoginAt: string\n}\n\nexport function UserManagement({ userId }: { userId: string }) {\n  const { data: session } = useSession()\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [updating, setUpdating] = useState(false)\n  \n  useEffect(() => {\n    if (session?.user?.role === 'admin') {\n      fetchUserDetails()\n    }\n  }, [userId, session])\n  \n  const fetchUserDetails = async () => {\n    try {\n      setLoading(true)\n      const response = await fetch(`/api/admin/users/${userId}`)\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch user')\n      }\n      \n      const userData = await response.json()\n      setUser(userData)\n    } catch (error) {\n      console.error('Error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n  \n  const handleRoleChange = async (newRole: string) => {\n    try {\n      setUpdating(true)\n      const response = await fetch(`/api/admin/users/${userId}/role`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          role: newRole,\n          reason: `Role updated by admin`\n        })\n      })\n      \n      if (!response.ok) {\n        throw new Error('Failed to update role')\n      }\n      \n      await fetchUserDetails() // Refresh data\n    } catch (error) {\n      console.error('Error updating role:', error)\n    } finally {\n      setUpdating(false)\n    }\n  }\n  \n  const handleVerificationToggle = async () => {\n    try {\n      setUpdating(true)\n      const response = await fetch(`/api/admin/users/${userId}/verification`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          isVerified: !user?.isVerified,\n          notes: `Verification ${!user?.isVerified ? 'approved' : 'revoked'} by admin`\n        })\n      })\n      \n      if (!response.ok) {\n        throw new Error('Failed to update verification')\n      }\n      \n      await fetchUserDetails() // Refresh data\n    } catch (error) {\n      console.error('Error updating verification:', error)\n    } finally {\n      setUpdating(false)\n    }\n  }\n  \n  if (session?.user?.role !== 'admin') {\n    return <div>Access denied. Admin privileges required.</div>\n  }\n  \n  if (loading) return <div>Loading user details...</div>\n  if (!user) return <div>User not found</div>\n  \n  return (\n    <div className=\"user-management\">\n      <h2>User Management: {user.name}</h2>\n      \n      <div className=\"user-info\">\n        <p><strong>Email:</strong> {user.email}</p>\n        <p><strong>Role:</strong> {user.role}</p>\n        <p><strong>Verified:</strong> {user.isVerified ? '\u2705' : '\u274c'}</p>\n        <p><strong>Active:</strong> {user.isActive ? '\u2705' : '\u274c'}</p>\n        <p><strong>Created:</strong> {new Date(user.createdAt).toLocaleDateString()}</p>\n        <p><strong>Last Login:</strong> {new Date(user.lastLoginAt).toLocaleDateString()}</p>\n      </div>\n      \n      <div className=\"actions\">\n        <div className=\"role-management\">\n          <label>Role:</label>\n          <select\n            value={user.role}\n            onChange={(e) => handleRoleChange(e.target.value)}\n            disabled={updating}\n          >\n            <option value=\"visitor\">Visitor</option>\n            <option value=\"subscriber\">Subscriber</option>\n            <option value=\"member\">Member</option>\n            <option value=\"confidential\">Confidential</option>\n            <option value=\"admin\">Admin</option>\n          </select>\n        </div>\n        \n        <button\n          onClick={handleVerificationToggle}\n          disabled={updating}\n          className={user.isVerified ? 'revoke' : 'approve'}\n        >\n          {user.isVerified ? 'Revoke Verification' : 'Approve Verification'}\n        </button>\n      </div>\n    </div>\n  )\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"curl-examples",children:"cURL Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Get user details\ncurl -X GET "https://ring.ck.ua/api/admin/users/user_123" \\\n  -H "Authorization: Bearer admin-session-token" \\\n  -H "Accept: application/json"\n\n# Update user role\ncurl -X PUT "https://ring.ck.ua/api/admin/users/user_123/role" \\\n  -H "Authorization: Bearer admin-session-token" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "role": "confidential",\n    "reason": "User verified as industry professional"\n  }\'\n\n# Update verification status\ncurl -X PUT "https://ring.ck.ua/api/admin/users/user_123/verification" \\\n  -H "Authorization: Bearer admin-session-token" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "isVerified": true,\n    "notes": "Verified through LinkedIn profile"\n  }\'\n\n# Delete user account\ncurl -X DELETE "https://ring.ck.ua/api/admin/users/user_123" \\\n  -H "Authorization: Bearer admin-session-token" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "reason": "Account violation",\n    "deleteData": true,\n    "notifyUser": false\n  }\'\n'})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"unauthorized-access-403",children:"Unauthorized Access (403)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "FORBIDDEN",\n  "message": "Admin privileges required",\n  "code": 403\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"user-not-found-404",children:"User Not Found (404)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "USER_NOT_FOUND",\n  "message": "User with specified ID does not exist",\n  "code": 404\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"invalid-role-400",children:"Invalid Role (400)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "INVALID_ROLE",\n  "message": "Invalid role specified",\n  "code": 400,\n  "validRoles": ["visitor", "subscriber", "member", "confidential", "admin"]\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"cannot-delete-admin-400",children:"Cannot Delete Admin (400)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "CANNOT_DELETE_ADMIN",\n  "message": "Cannot delete admin user account",\n  "code": 400\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"audit-logging",children:"Audit Logging"}),"\n",(0,r.jsx)(n.h3,{id:"admin-action-logging",children:"Admin Action Logging"}),"\n",(0,r.jsx)(n.p,{children:"All admin actions are automatically logged for audit purposes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface AdminAuditLog {\n  id: string\n  adminId: string\n  adminEmail: string\n  action: 'USER_ROLE_UPDATE' | 'USER_VERIFICATION' | 'USER_DELETE' | 'USER_VIEW'\n  targetUserId: string\n  targetUserEmail: string\n  details: {\n    previousValue?: any\n    newValue?: any\n    reason?: string\n  }\n  timestamp: string\n  ipAddress: string\n  userAgent: string\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"audit-log-example",children:"Audit Log Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "id": "audit_789",\n  "adminId": "admin_456",\n  "adminEmail": "admin@ring.ck.ua",\n  "action": "USER_ROLE_UPDATE",\n  "targetUserId": "user_123",\n  "targetUserEmail": "john.doe@example.com",\n  "details": {\n    "previousValue": "member",\n    "newValue": "confidential",\n    "reason": "User verified as industry professional"\n  },\n  "timestamp": "2024-12-14T16:00:00Z",\n  "ipAddress": "192.168.1.100",\n  "userAgent": "Mozilla/5.0..."\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"security-features",children:"Security Features"}),"\n",(0,r.jsx)(n.h3,{id:"access-control",children:"Access Control"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Role Verification"}),": Admin role required for all operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Session Validation"}),": Valid admin session token required"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"IP Logging"}),": All admin actions logged with IP address"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rate Limiting"}),": 300 requests per minute for admin users"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"data-protection",children:"Data Protection"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sensitive Data"}),": Password hashes and tokens not exposed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audit Trail"}),": Complete history of admin actions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Soft Delete"}),": User data can be recovered if needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GDPR Compliance"}),": Data deletion follows privacy regulations"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"admin-restrictions",children:"Admin Restrictions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Self-Modification"}),": Admins cannot modify their own role"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Admin Deletion"}),": Cannot delete other admin accounts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reason Required"}),": All significant actions require reason"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Confirmation"}),": Destructive actions require confirmation"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"bulk-operations",children:"Bulk Operations"}),"\n",(0,r.jsx)(n.h3,{id:"bulk-role-update",children:"Bulk Role Update"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"POST /api/admin/users/bulk/role\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Request Body:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "userIds": ["user_123", "user_456", "user_789"],\n  "role": "member",\n  "reason": "Bulk promotion to member status"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"bulk-verification",children:"Bulk Verification"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"POST /api/admin/users/bulk/verification\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Request Body:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "userIds": ["user_123", "user_456"],\n  "isVerified": true,\n  "notes": "Bulk verification after document review"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/ring/uk/api/auth/nextauth",children:(0,r.jsx)(n.code,{children:"/api/auth/[...nextauth]"})})," - Authentication"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/ring/uk/api/profile",children:(0,r.jsx)(n.code,{children:"/api/profile"})})," - User profile management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/ring/uk/api/admin/set-user-role",children:(0,r.jsx)(n.code,{children:"/api/set-user-role"})})," - Role assignment"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/ring/uk/api/info",children:(0,r.jsx)(n.code,{children:"/api/info"})})," - Platform statistics"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"describe('Admin User Management', () => {\n  test('should get user details for admin', async () => {\n    const response = await request(app)\n      .get('/api/admin/users/user_123')\n      .set('Authorization', `Bearer ${adminToken}`)\n      .expect(200)\n    \n    expect(response.body).toHaveProperty('id', 'user_123')\n    expect(response.body).toHaveProperty('email')\n    expect(response.body).toHaveProperty('role')\n  })\n  \n  test('should update user role', async () => {\n    const response = await request(app)\n      .put('/api/admin/users/user_123/role')\n      .set('Authorization', `Bearer ${adminToken}`)\n      .send({\n        role: 'confidential',\n        reason: 'Test role update'\n      })\n      .expect(200)\n    \n    expect(response.body.success).toBe(true)\n    expect(response.body.data.newRole).toBe('confidential')\n  })\n  \n  test('should reject non-admin access', async () => {\n    await request(app)\n      .get('/api/admin/users/user_123')\n      .set('Authorization', `Bearer ${memberToken}`)\n      .expect(403)\n  })\n})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),': "Admin privileges required"\n',(0,r.jsx)(n.strong,{children:"Solution"}),": Ensure user has admin role and valid session"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),': "User not found"\n',(0,r.jsx)(n.strong,{children:"Solution"}),": Verify user ID exists in the system"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),': "Cannot modify admin user"\n',(0,r.jsx)(n.strong,{children:"Solution"}),": Admin users have special restrictions for security"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),': "Rate limit exceeded"\n',(0,r.jsx)(n.strong,{children:"Solution"}),": Admin rate limit is 300/minute, reduce request frequency"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(96540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);