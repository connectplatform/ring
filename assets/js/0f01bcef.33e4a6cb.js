"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[7160],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},58616:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api/comments/likes","title":"Comment Likes API","description":"Overview","source":"@site/docs/en/api/comments/likes.md","sourceDirName":"api/comments","slug":"/api/comments/likes","permalink":"/ring/docs/api/comments/likes","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/en/api/comments/likes.md","tags":[],"version":"current","lastUpdatedAt":1750331037000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Comments API","permalink":"/ring/docs/api/comments/list"},"next":{"title":"Wallet Balance API","permalink":"/ring/docs/api/wallet/balance"}}');var i=s(74848),r=s(28453);const o={},a="Comment Likes API",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"URL Parameters",id:"url-parameters",level:2},{value:"Authentication",id:"authentication",level:2},{value:"POST - Like/Unlike Comment",id:"post---likeunlike-comment",level:2},{value:"Request Body",id:"request-body",level:3},{value:"Response Format",id:"response-format",level:3},{value:"Success Response (200)",id:"success-response-200",level:4},{value:"Unlike Response (200)",id:"unlike-response-200",level:4},{value:"GET - Check Like Status",id:"get---check-like-status",level:2},{value:"Response Format",id:"response-format-1",level:3},{value:"Success Response (200)",id:"success-response-200-1",level:4},{value:"Error Responses",id:"error-responses",level:2},{value:"Unauthorized (401)",id:"unauthorized-401",level:3},{value:"Bad Request (400)",id:"bad-request-400",level:3},{value:"Not Found (404)",id:"not-found-404",level:3},{value:"Internal Server Error (500)",id:"internal-server-error-500",level:3},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"React Component with Optimistic Updates",id:"react-component-with-optimistic-updates",level:3},{value:"React Hook for Comment Likes",id:"react-hook-for-comment-likes",level:3},{value:"Comments List with Likes",id:"comments-list-with-likes",level:3},{value:"Server Action (Next.js 13+)",id:"server-action-nextjs-13",level:3},{value:"cURL Examples",id:"curl-examples",level:3},{value:"Like a Comment",id:"like-a-comment",level:4},{value:"Check Like Status",id:"check-like-status",level:4},{value:"Business Logic",id:"business-logic",level:2},{value:"POST Request Flow:",id:"post-request-flow",level:3},{value:"GET Request Flow:",id:"get-request-flow",level:3},{value:"Database Schema",id:"database-schema",level:2},{value:"Comment Document",id:"comment-document",level:3},{value:"Comment Like Document",id:"comment-like-document",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Performance Notes",id:"performance-notes",level:2},{value:"Rate Limiting",id:"rate-limiting",level:2},{value:"Analytics Integration",id:"analytics-integration",level:2},{value:"Testing",id:"testing",level:2},{value:"Unit Test Example",id:"unit-test-example",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"comment-likes-api",children:"Comment Likes API"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Comment Likes API"})," allows authenticated users to like and unlike comments throughout the Ring Platform. This endpoint supports optimistic UI updates and tracks user engagement with comment content, including nested comment interactions."]}),"\n",(0,i.jsx)(n.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"URL"}),": ",(0,i.jsx)(n.code,{children:"/api/comments/[id]/like"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Methods"}),": ",(0,i.jsx)(n.code,{children:"POST"}),", ",(0,i.jsx)(n.code,{children:"GET"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authentication"}),": Required (NextAuth.js session)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Content-Type"}),": ",(0,i.jsx)(n.code,{children:"application/json"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"url-parameters",children:"URL Parameters"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"The unique identifier of the comment to like/unlike"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,i.jsx)(n.p,{children:"This endpoint requires user authentication via NextAuth.js session:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { getSession } from 'next-auth/react'\n\nconst session = await getSession()\nif (!session) {\n  // Handle unauthenticated state\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"post---likeunlike-comment",children:"POST - Like/Unlike Comment"}),"\n",(0,i.jsx)(n.h3,{id:"request-body",children:"Request Body"}),"\n",(0,i.jsx)(n.p,{children:"No request body required. The action (like/unlike) is determined automatically based on current like status."}),"\n",(0,i.jsx)(n.h3,{id:"response-format",children:"Response Format"}),"\n",(0,i.jsx)(n.h4,{id:"success-response-200",children:"Success Response (200)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "data": {\n    "commentId": "comment123",\n    "action": "like",\n    "liked": true,\n    "likes": 15,\n    "userId": "user456"\n  },\n  "message": "Comment liked successfully"\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"unlike-response-200",children:"Unlike Response (200)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "data": {\n    "commentId": "comment123",\n    "action": "unlike",\n    "liked": false,\n    "likes": 14,\n    "userId": "user456"\n  },\n  "message": "Comment unliked successfully"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"get---check-like-status",children:"GET - Check Like Status"}),"\n",(0,i.jsx)(n.h3,{id:"response-format-1",children:"Response Format"}),"\n",(0,i.jsx)(n.h4,{id:"success-response-200-1",children:"Success Response (200)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "data": {\n    "commentId": "comment123",\n    "liked": true,\n    "likes": 15,\n    "userId": "user456"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"error-responses",children:"Error Responses"}),"\n",(0,i.jsx)(n.h3,{id:"unauthorized-401",children:"Unauthorized (401)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Authentication required"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"bad-request-400",children:"Bad Request (400)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Comment ID is required"\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Cannot like inactive comment"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"not-found-404",children:"Not Found (404)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Comment not found"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"internal-server-error-500",children:"Internal Server Error (500)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Failed to process like action"\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Failed to get like status"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,i.jsx)(n.h3,{id:"react-component-with-optimistic-updates",children:"React Component with Optimistic Updates"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useState, useEffect } from 'react'\nimport { useSession } from 'next-auth/react'\n\ninterface CommentLikeData {\n  commentId: string\n  liked: boolean\n  likes: number\n  userId: string\n}\n\ninterface CommentLikeButtonProps {\n  commentId: string\n  initialLikes: number\n  initialLiked?: boolean\n  onLikeUpdate?: (commentId: string, liked: boolean, likes: number) => void\n}\n\nfunction CommentLikeButton({ \n  commentId, \n  initialLikes, \n  initialLiked = false,\n  onLikeUpdate \n}: CommentLikeButtonProps) {\n  const { data: session } = useSession()\n  const [liked, setLiked] = useState(initialLiked)\n  const [likes, setLikes] = useState(initialLikes)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  // Fetch initial like status\n  useEffect(() => {\n    if (!session) return\n\n    const fetchLikeStatus = async () => {\n      try {\n        const response = await fetch(`/api/comments/${commentId}/like`)\n        \n        if (response.ok) {\n          const data = await response.json()\n          setLiked(data.data.liked)\n          setLikes(data.data.likes)\n        }\n      } catch (err) {\n        console.error('Error fetching like status:', err)\n      }\n    }\n\n    fetchLikeStatus()\n  }, [commentId, session])\n\n  const handleLikeToggle = async () => {\n    if (!session || loading) return\n\n    // Optimistic update\n    const wasLiked = liked\n    const newLiked = !liked\n    const newLikes = newLiked ? likes + 1 : likes - 1\n\n    setLiked(newLiked)\n    setLikes(newLikes)\n    setLoading(true)\n    setError(null)\n\n    try {\n      const response = await fetch(`/api/comments/${commentId}/like`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to toggle like')\n      }\n\n      const result = await response.json()\n      \n      // Update with server response\n      setLiked(result.data.liked)\n      setLikes(result.data.likes)\n      \n      // Notify parent component\n      onLikeUpdate?.(commentId, result.data.liked, result.data.likes)\n\n    } catch (err) {\n      // Revert optimistic update on error\n      setLiked(wasLiked)\n      setLikes(wasLiked ? likes + 1 : likes - 1)\n      setError(err instanceof Error ? err.message : 'Unknown error')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (!session) {\n    return (\n      <div className=\"flex items-center space-x-1 text-gray-500\">\n        <span className=\"text-sm\">\u2764\ufe0f {likes}</span>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex items-center space-x-1\">\n      <button\n        onClick={handleLikeToggle}\n        disabled={loading}\n        className={`flex items-center space-x-1 px-2 py-1 rounded transition-colors ${\n          liked\n            ? 'text-red-600 hover:text-red-700 bg-red-50 hover:bg-red-100'\n            : 'text-gray-600 hover:text-red-600 hover:bg-red-50'\n        } disabled:opacity-50`}\n      >\n        <span className={`text-sm ${loading ? 'animate-pulse' : ''}`}>\n          {liked ? '\u2764\ufe0f' : '\ud83e\udd0d'}\n        </span>\n        <span className=\"text-sm font-medium\">{likes}</span>\n      </button>\n\n      {error && (\n        <div className=\"text-xs text-red-500 ml-2\">{error}</div>\n      )}\n    </div>\n  )\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"react-hook-for-comment-likes",children:"React Hook for Comment Likes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useState, useCallback } from 'react'\nimport { useSession } from 'next-auth/react'\n\nexport function useCommentLikes() {\n  const { data: session } = useSession()\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const toggleLike = useCallback(async (commentId: string) => {\n    if (!session) return { success: false, error: 'Not authenticated' }\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      const response = await fetch(`/api/comments/${commentId}/like`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.error || 'Failed to toggle like')\n      }\n\n      const result = await response.json()\n      \n      return {\n        success: true,\n        data: result.data,\n        message: result.message\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred'\n      setError(errorMessage)\n      return { success: false, error: errorMessage }\n    } finally {\n      setLoading(false)\n    }\n  }, [session])\n\n  const getLikeStatus = useCallback(async (commentId: string) => {\n    if (!session) return { success: false, error: 'Not authenticated' }\n\n    try {\n      const response = await fetch(`/api/comments/${commentId}/like`)\n      \n      if (!response.ok) {\n        throw new Error('Failed to get like status')\n      }\n\n      const result = await response.json()\n      return {\n        success: true,\n        data: result.data\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred'\n      return { success: false, error: errorMessage }\n    }\n  }, [session])\n\n  const batchGetLikeStatus = useCallback(async (commentIds: string[]) => {\n    if (!session || commentIds.length === 0) return { success: false, error: 'Invalid request' }\n\n    try {\n      const results = await Promise.all(\n        commentIds.map(id => \n          fetch(`/api/comments/${id}/like`)\n            .then(res => res.json())\n            .then(data => ({ commentId: id, ...data.data }))\n        )\n      )\n\n      return {\n        success: true,\n        data: results\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred'\n      return { success: false, error: errorMessage }\n    }\n  }, [session])\n\n  return {\n    toggleLike,\n    getLikeStatus,\n    batchGetLikeStatus,\n    loading,\n    error,\n    clearError: () => setError(null)\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"comments-list-with-likes",children:"Comments List with Likes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { useState, useEffect } from \'react\'\nimport { useCommentLikes } from \'@/hooks/useCommentLikes\'\n\ninterface Comment {\n  id: string\n  content: string\n  authorName: string\n  authorAvatar: string | null\n  likes: number\n  replies: number\n  createdAt: string\n  level: number\n}\n\ninterface CommentsListProps {\n  targetId: string\n  targetType: \'news\' | \'entity\' | \'opportunity\'\n  comments: Comment[]\n  onCommentsUpdate: (comments: Comment[]) => void\n}\n\nfunction CommentsList({ targetId, targetType, comments, onCommentsUpdate }: CommentsListProps) {\n  const { batchGetLikeStatus } = useCommentLikes()\n  const [likeStates, setLikeStates] = useState<Record<string, boolean>>({})\n\n  // Fetch like states for all comments\n  useEffect(() => {\n    const fetchLikeStates = async () => {\n      const commentIds = comments.map(c => c.id)\n      const result = await batchGetLikeStatus(commentIds)\n      \n      if (result.success) {\n        const states: Record<string, boolean> = {}\n        result.data.forEach((item: any) => {\n          states[item.commentId] = item.liked\n        })\n        setLikeStates(states)\n      }\n    }\n\n    if (comments.length > 0) {\n      fetchLikeStates()\n    }\n  }, [comments, batchGetLikeStatus])\n\n  const handleLikeUpdate = (commentId: string, liked: boolean, likes: number) => {\n    // Update like state\n    setLikeStates(prev => ({ ...prev, [commentId]: liked }))\n    \n    // Update comment likes count\n    const updatedComments = comments.map(comment => \n      comment.id === commentId \n        ? { ...comment, likes }\n        : comment\n    )\n    onCommentsUpdate(updatedComments)\n  }\n\n  return (\n    <div className="space-y-4">\n      {comments.map((comment) => (\n        <div key={comment.id} className="bg-white border rounded-lg p-4">\n          <div className="flex items-start space-x-3">\n            {comment.authorAvatar && (\n              <img\n                src={comment.authorAvatar}\n                alt={comment.authorName}\n                className="w-8 h-8 rounded-full"\n              />\n            )}\n            <div className="flex-1 min-w-0">\n              <div className="flex items-center space-x-2">\n                <span className="font-medium text-gray-900">{comment.authorName}</span>\n                <span className="text-sm text-gray-500">\n                  {new Date(comment.createdAt).toLocaleDateString()}\n                </span>\n              </div>\n              <p className="mt-1 text-gray-700">{comment.content}</p>\n              \n              <div className="flex items-center space-x-4 mt-3">\n                <CommentLikeButton\n                  commentId={comment.id}\n                  initialLikes={comment.likes}\n                  initialLiked={likeStates[comment.id] || false}\n                  onLikeUpdate={handleLikeUpdate}\n                />\n                \n                <button className="text-sm text-gray-500 hover:text-gray-700">\n                  Reply ({comment.replies})\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"server-action-nextjs-13",children:"Server Action (Next.js 13+)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"'use server'\n\nimport { auth } from '@/auth'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function toggleCommentLikeAction(commentId: string, currentPath: string) {\n  const session = await auth()\n  \n  if (!session) {\n    redirect('/auth/signin')\n  }\n\n  try {\n    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/comments/${commentId}/like`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Cookie': request.headers.get('cookie') || '',\n      },\n    })\n\n    if (!response.ok) {\n      const error = await response.json()\n      throw new Error(error.error || 'Failed to toggle like')\n    }\n\n    const result = await response.json()\n    \n    // Revalidate the current page to show updated like count\n    revalidatePath(currentPath)\n    \n    return {\n      success: true,\n      data: result.data,\n      message: result.message\n    }\n    \n  } catch (error) {\n    console.error('Server action error:', error)\n    throw error\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"curl-examples",children:"cURL Examples"}),"\n",(0,i.jsx)(n.h4,{id:"like-a-comment",children:"Like a Comment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -X POST https://ring.ck.ua/api/comments/comment123/like \\\n  -H "Content-Type: application/json" \\\n  -H "Cookie: next-auth.session-token=your-session-token"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"check-like-status",children:"Check Like Status"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -X GET https://ring.ck.ua/api/comments/comment123/like \\\n  -H "Cookie: next-auth.session-token=your-session-token"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"business-logic",children:"Business Logic"}),"\n",(0,i.jsx)(n.h3,{id:"post-request-flow",children:"POST Request Flow:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authentication Check"}),": Verifies user session"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comment Validation"}),": Ensures comment exists and is active"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Like Status Check"}),": Determines if user has already liked the comment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Atomic Update"}),": Uses Firestore batch operations for consistency"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Response"}),": Returns updated like status and count"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"get-request-flow",children:"GET Request Flow:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authentication Check"}),": Verifies user session"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comment Validation"}),": Ensures comment exists"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Like Status Lookup"}),": Checks user's like status for the comment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Response"}),": Returns current like status and total count"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,i.jsx)(n.h3,{id:"comment-document",children:"Comment Document"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "id": "comment123",\n  "content": "Great article! Very informative.",\n  "authorId": "user456",\n  "authorName": "John Doe",\n  "targetId": "news789",\n  "targetType": "news",\n  "likes": 15,\n  "replies": 3,\n  "status": "active",\n  "createdAt": "2024-01-15T10:30:00Z",\n  "updatedAt": "2024-01-15T14:22:00Z"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"comment-like-document",children:"Comment Like Document"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "id": "comment123_user456",\n  "commentId": "comment123",\n  "userId": "user456",\n  "userName": "John Doe",\n  "userAvatar": "https://example.com/avatar.jpg",\n  "createdAt": "2024-01-15T14:22:00Z"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authentication Required"}),": Only authenticated users can like comments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User Tracking"}),": Individual like records prevent duplicate likes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comment Status Check"}),": Only active comments can be liked"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Atomic Operations"}),": Batch operations ensure data consistency"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"performance-notes",children:"Performance Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Batch Operations"}),": Uses Firestore batch writes for atomic updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optimistic Updates"}),": Frontend can update UI before server confirmation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Indexed Queries"}),": Like lookups use composite document IDs for performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Minimal Data Transfer"}),": Only necessary fields are returned"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User-based"}),": 60 requests per minute per authenticated user"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Global"}),": 1000 requests per minute across all users"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"analytics-integration",children:"Analytics Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Track like events for analytics\nconst trackCommentLike = (commentId: string, action: 'like' | 'unlike') => {\n  // Google Analytics\n  gtag('event', 'comment_engagement', {\n    action: action,\n    comment_id: commentId,\n    engagement_type: 'like'\n  })\n\n  // Custom analytics\n  analytics.track('Comment Like', {\n    commentId,\n    action,\n    timestamp: new Date().toISOString()\n  })\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.h3,{id:"unit-test-example",children:"Unit Test Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { POST, GET } from '@/app/api/comments/[id]/like/route'\nimport { NextRequest } from 'next/server'\n\njest.mock('@/auth')\njest.mock('firebase-admin/firestore')\n\ndescribe('/api/comments/[id]/like', () => {\n  it('should like a comment successfully', async () => {\n    (auth as jest.Mock).mockResolvedValue({\n      user: { id: 'user123', name: 'John Doe' }\n    })\n\n    const request = new NextRequest('http://localhost:3000/api/comments/comment123/like', {\n      method: 'POST'\n    })\n\n    const response = await POST(request, { params: { id: 'comment123' } })\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    expect(data.data.action).toBe('like')\n    expect(data.data.liked).toBe(true)\n  })\n\n  it('should get like status successfully', async () => {\n    const request = new NextRequest('http://localhost:3000/api/comments/comment123/like')\n\n    const response = await GET(request, { params: { id: 'comment123' } })\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    expect(data.data.commentId).toBe('comment123')\n  })\n})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/comments/list",children:(0,i.jsx)(n.code,{children:"GET /api/comments"})})," - List comments with likes data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/comments/list",children:(0,i.jsx)(n.code,{children:"POST /api/comments"})})," - Create new comment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/news/likes",children:(0,i.jsx)(n.code,{children:"GET /api/news/[id]/like"})})," - News article likes API"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/notifications/list",children:(0,i.jsx)(n.code,{children:"GET /api/notifications"})})," - Get like notifications"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);