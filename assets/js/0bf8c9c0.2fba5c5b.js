"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[6026],{67438:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api/entities-upload","title":"Entities Upload API","description":"Overview","source":"@site/docs/api/entities-upload.md","sourceDirName":"api","slug":"/api/entities-upload","permalink":"/ring/docs/api/entities-upload","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/api/entities-upload.md","tags":[],"version":"current","lastUpdatedAt":1750255417000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Entity Deletion API","permalink":"/ring/docs/api/entities-delete"},"next":{"title":"Get","permalink":"/ring/docs/api/get-confidential-entities"}}');var s=i(74848),l=i(28453);const o={},r="Entities Upload API",a={},d=[{value:"Overview",id:"overview",level:2},{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"Ring Platform Entity File Management",id:"ring-platform-entity-file-management",level:2},{value:"File Types and Use Cases",id:"file-types-and-use-cases",level:3},{value:"<strong>Supported File Categories</strong>",id:"supported-file-categories",level:4},{value:"<strong>File Organization</strong>",id:"file-organization",level:4},{value:"Request Format",id:"request-format",level:2},{value:"Headers",id:"headers",level:3},{value:"Form Data Parameters",id:"form-data-parameters",level:3},{value:"Example Form Data",id:"example-form-data",level:3},{value:"Response Format",id:"response-format",level:2},{value:"Success Response (200 OK)",id:"success-response-200-ok",level:3},{value:"Error Responses",id:"error-responses",level:3},{value:"Unauthorized (401)",id:"unauthorized-401",level:4},{value:"No File Provided (400)",id:"no-file-provided-400",level:4},{value:"File Too Large (413)",id:"file-too-large-413",level:4},{value:"Unsupported File Type (415)",id:"unsupported-file-type-415",level:4},{value:"Upload Failed (500)",id:"upload-failed-500",level:4},{value:"Code Examples",id:"code-examples",level:2},{value:"JavaScript/TypeScript",id:"javascripttypescript",level:3},{value:"React Component for File Upload",id:"react-component-for-file-upload",level:3},{value:"cURL Example",id:"curl-example",level:3},{value:"Python Example",id:"python-example",level:3},{value:"File Management Best Practices",id:"file-management-best-practices",level:2},{value:"File Organization",id:"file-organization-1",level:3},{value:"Security Considerations",id:"security-considerations",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2},{value:"Changelog",id:"changelog",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"entities-upload-api",children:"Entities Upload API"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Entities Upload API allows authenticated users to upload files and attachments related to entities within the Ring Platform. This endpoint uses Vercel Blob storage for secure, scalable file management with proper access controls."}),"\n",(0,s.jsx)(n.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"URL"}),": ",(0,s.jsx)(n.code,{children:"/api/entities/upload"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Method"}),": ",(0,s.jsx)(n.code,{children:"POST"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authentication"}),": Required (Bearer token or session)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authorization"}),": SUBSCRIBER level and above"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Content Type"}),": ",(0,s.jsx)(n.code,{children:"multipart/form-data"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"File Size Limit"}),": 10MB per file"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Supported Formats"}),": Images, documents, PDFs, presentations"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"ring-platform-entity-file-management",children:"Ring Platform Entity File Management"}),"\n",(0,s.jsx)(n.h3,{id:"file-types-and-use-cases",children:"File Types and Use Cases"}),"\n",(0,s.jsx)(n.p,{children:"Ring Platform supports various file types for entity documentation and branding:"}),"\n",(0,s.jsx)(n.h4,{id:"supported-file-categories",children:(0,s.jsx)(n.strong,{children:"Supported File Categories"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Entity Logos"}),": PNG, JPG, SVG (company branding)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Documentation"}),": PDF, DOC, DOCX (company profiles, certifications)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Presentations"}),": PPT, PPTX (pitch decks, company overviews)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Images"}),": JPG, PNG, GIF (office photos, team pictures)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Certificates"}),": PDF (business licenses, certifications, awards)"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"file-organization",children:(0,s.jsx)(n.strong,{children:"File Organization"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Public Access"}),": Files are publicly accessible via CDN"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unique Naming"}),": Automatic file naming to prevent conflicts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metadata Tracking"}),": File size, type, upload date, and user information"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Entity Association"}),": Files can be linked to specific entities"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"request-format",children:"Request Format"}),"\n",(0,s.jsx)(n.h3,{id:"headers",children:"Headers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"POST /api/entities/upload\nContent-Type: multipart/form-data\nAuthorization: Bearer <token>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"form-data-parameters",children:"Form Data Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file"})," (required): The file to upload"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"entityId"})," (optional): Associate file with specific entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fileType"})," (optional): Category of file (logo, document, certificate, etc.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"description"})," (optional): File description or purpose"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-form-data",children:"Example Form Data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const formData = new FormData();\nformData.append('file', fileInput.files[0]);\nformData.append('entityId', 'ent_abc123def456');\nformData.append('fileType', 'logo');\nformData.append('description', 'Company logo for TechCorp Solutions');\n"})}),"\n",(0,s.jsx)(n.h2,{id:"response-format",children:"Response Format"}),"\n",(0,s.jsx)(n.h3,{id:"success-response-200-ok",children:"Success Response (200 OK)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "url": "https://blob.vercel-storage.com/entities/ent_abc123/user_456_1705234567890_company-logo.png",\n  "downloadUrl": "https://blob.vercel-storage.com/entities/ent_abc123/user_456_1705234567890_company-logo.png?download=1",\n  "filename": "company-logo.png",\n  "size": 245760,\n  "contentType": "image/png",\n  "entityId": "ent_abc123def456",\n  "fileType": "logo",\n  "description": "Company logo for TechCorp Solutions",\n  "uploadedAt": "2025-01-14T16:45:00Z",\n  "uploadedBy": "user_456",\n  "metadata": {\n    "width": 512,\n    "height": 512,\n    "format": "PNG"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"error-responses",children:"Error Responses"}),"\n",(0,s.jsx)(n.h4,{id:"unauthorized-401",children:"Unauthorized (401)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Unauthorized"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"no-file-provided-400",children:"No File Provided (400)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "No file provided"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"file-too-large-413",children:"File Too Large (413)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "File size exceeds the maximum allowed limit"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"unsupported-file-type-415",children:"Unsupported File Type (415)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Invalid file type"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"upload-failed-500",children:"Upload Failed (500)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Error uploading file: Storage service unavailable"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,s.jsx)(n.h3,{id:"javascripttypescript",children:"JavaScript/TypeScript"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface EntityFileUploadResult {\n  success: boolean;\n  url: string;\n  downloadUrl: string;\n  filename: string;\n  size: number;\n  contentType: string;\n  entityId?: string;\n  fileType?: string;\n  description?: string;\n  uploadedAt: string;\n  uploadedBy: string;\n  metadata?: {\n    width?: number;\n    height?: number;\n    format?: string;\n  };\n}\n\nasync function uploadEntityFile(\n  file: File,\n  authToken: string,\n  options: {\n    entityId?: string;\n    fileType?: string;\n    description?: string;\n  } = {}\n): Promise<EntityFileUploadResult> {\n  const formData = new FormData();\n  formData.append('file', file);\n  \n  if (options.entityId) {\n    formData.append('entityId', options.entityId);\n  }\n  \n  if (options.fileType) {\n    formData.append('fileType', options.fileType);\n  }\n  \n  if (options.description) {\n    formData.append('description', options.description);\n  }\n\n  const response = await fetch('/api/entities/upload', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${authToken}`\n    },\n    body: formData\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to upload file');\n  }\n\n  return response.json();\n}\n\n// Usage examples\ntry {\n  // Upload entity logo\n  const logoFile = document.getElementById('logoInput').files[0];\n  const logoResult = await uploadEntityFile(logoFile, userToken, {\n    entityId: 'ent_abc123',\n    fileType: 'logo',\n    description: 'Company logo'\n  });\n  \n  console.log('Logo uploaded:', logoResult.url);\n\n  // Upload company document\n  const docFile = document.getElementById('docInput').files[0];\n  const docResult = await uploadEntityFile(docFile, userToken, {\n    entityId: 'ent_abc123',\n    fileType: 'document',\n    description: 'Company profile PDF'\n  });\n  \n  console.log('Document uploaded:', docResult.url);\n\n} catch (error) {\n  console.error('Upload failed:', error.message);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"react-component-for-file-upload",children:"React Component for File Upload"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { useState, useRef } from \'react\';\n\ninterface EntityFileUploaderProps {\n  entityId?: string;\n  fileType?: string;\n  onUploadComplete?: (result: EntityFileUploadResult) => void;\n  acceptedTypes?: string;\n  maxSize?: number; // in bytes\n}\n\nfunction EntityFileUploader({\n  entityId,\n  fileType,\n  onUploadComplete,\n  acceptedTypes = "image/*,.pdf,.doc,.docx,.ppt,.pptx",\n  maxSize = 10 * 1024 * 1024 // 10MB\n}: EntityFileUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file size\n    if (file.size > maxSize) {\n      setError(`File size exceeds ${maxSize / (1024 * 1024)}MB limit`);\n      return;\n    }\n\n    setIsUploading(true);\n    setError(null);\n    setUploadProgress(0);\n\n    try {\n      const token = localStorage.getItem(\'authToken\');\n      if (!token) {\n        throw new Error(\'Authentication required\');\n      }\n\n      // Simulate upload progress (in real implementation, use XMLHttpRequest for progress)\n      const progressInterval = setInterval(() => {\n        setUploadProgress(prev => Math.min(prev + 10, 90));\n      }, 100);\n\n      const result = await uploadEntityFile(file, token, {\n        entityId,\n        fileType,\n        description: `${fileType || \'File\'} for entity`\n      });\n\n      clearInterval(progressInterval);\n      setUploadProgress(100);\n      \n      onUploadComplete?.(result);\n      \n      // Reset form\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \'\';\n      }\n\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \'Upload failed\');\n    } finally {\n      setIsUploading(false);\n      setTimeout(() => setUploadProgress(0), 1000);\n    }\n  };\n\n  return (\n    <div className="entity-file-uploader">\n      <div className="upload-area">\n        <input\n          ref={fileInputRef}\n          type="file"\n          accept={acceptedTypes}\n          onChange={handleFileSelect}\n          disabled={isUploading}\n          className="file-input"\n        />\n        \n        <div className="upload-prompt">\n          <div className="upload-icon">\ud83d\udcc1</div>\n          <p>\n            {isUploading \n              ? `Uploading... ${uploadProgress}%`\n              : `Choose ${fileType || \'file\'} to upload`\n            }\n          </p>\n          <p className="upload-hint">\n            Max size: {maxSize / (1024 * 1024)}MB\n          </p>\n        </div>\n\n        {isUploading && (\n          <div className="progress-bar">\n            <div \n              className="progress-fill" \n              style={{ width: `${uploadProgress}%` }}\n            />\n          </div>\n        )}\n      </div>\n\n      {error && (\n        <div className="error-message">\n          {error}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Usage in entity profile form\nfunction EntityProfileForm({ entityId }: { entityId: string }) {\n  const [entityFiles, setEntityFiles] = useState<EntityFileUploadResult[]>([]);\n\n  const handleFileUpload = (result: EntityFileUploadResult) => {\n    setEntityFiles(prev => [...prev, result]);\n    console.log(\'File uploaded successfully:\', result.filename);\n  };\n\n  return (\n    <div className="entity-profile-form">\n      <h3>Entity Files</h3>\n      \n      <div className="file-upload-sections">\n        <div className="upload-section">\n          <h4>Company Logo</h4>\n          <EntityFileUploader\n            entityId={entityId}\n            fileType="logo"\n            acceptedTypes="image/*"\n            maxSize={5 * 1024 * 1024} // 5MB for images\n            onUploadComplete={handleFileUpload}\n          />\n        </div>\n\n        <div className="upload-section">\n          <h4>Company Documents</h4>\n          <EntityFileUploader\n            entityId={entityId}\n            fileType="document"\n            acceptedTypes=".pdf,.doc,.docx"\n            onUploadComplete={handleFileUpload}\n          />\n        </div>\n\n        <div className="upload-section">\n          <h4>Certificates</h4>\n          <EntityFileUploader\n            entityId={entityId}\n            fileType="certificate"\n            acceptedTypes=".pdf,.jpg,.png"\n            onUploadComplete={handleFileUpload}\n          />\n        </div>\n      </div>\n\n      <div className="uploaded-files">\n        <h4>Uploaded Files</h4>\n        {entityFiles.map((file, index) => (\n          <div key={index} className="file-item">\n            <span className="file-name">{file.filename}</span>\n            <span className="file-type">{file.fileType}</span>\n            <span className="file-size">{(file.size / 1024).toFixed(1)} KB</span>\n            <a href={file.url} target="_blank" rel="noopener noreferrer">\n              View\n            </a>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"curl-example",children:"cURL Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Upload entity logo\ncurl -X POST "https://ring.ck.ua/api/entities/upload" \\\n  -H "Authorization: Bearer YOUR_AUTH_TOKEN" \\\n  -F "file=@company-logo.png" \\\n  -F "entityId=ent_abc123def456" \\\n  -F "fileType=logo" \\\n  -F "description=Company logo for TechCorp Solutions"\n\n# Upload company document\ncurl -X POST "https://ring.ck.ua/api/entities/upload" \\\n  -H "Authorization: Bearer YOUR_AUTH_TOKEN" \\\n  -F "file=@company-profile.pdf" \\\n  -F "entityId=ent_abc123def456" \\\n  -F "fileType=document" \\\n  -F "description=Company profile and overview"\n\n# Expected response\n# {\n#   "success": true,\n#   "url": "https://blob.vercel-storage.com/entities/ent_abc123/user_456_1705234567890_company-logo.png",\n#   "filename": "company-logo.png",\n#   "size": 245760,\n#   "contentType": "image/png",\n#   "uploadedAt": "2025-01-14T16:45:00Z"\n# }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"python-example",children:"Python Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import requests\nfrom typing import Dict, Any, Optional\n\nclass EntityFileUploader:\n    def __init__(self, base_url: str, auth_token: str):\n        self.base_url = base_url.rstrip(\'/\')\n        self.auth_token = auth_token\n        self.headers = {\n            \'Authorization\': f\'Bearer {auth_token}\'\n        }\n    \n    def upload_file(\n        self, \n        file_path: str, \n        entity_id: Optional[str] = None,\n        file_type: Optional[str] = None,\n        description: Optional[str] = None\n    ) -> Dict[str, Any]:\n        """Upload a file for an entity"""\n        url = f"{self.base_url}/api/entities/upload"\n        \n        # Prepare form data\n        files = {\'file\': open(file_path, \'rb\')}\n        data = {}\n        \n        if entity_id:\n            data[\'entityId\'] = entity_id\n        if file_type:\n            data[\'fileType\'] = file_type\n        if description:\n            data[\'description\'] = description\n        \n        try:\n            response = requests.post(\n                url, \n                headers=self.headers, \n                files=files, \n                data=data\n            )\n            \n            if response.status_code == 200:\n                return response.json()\n            elif response.status_code == 401:\n                raise Exception("Unauthorized - check your authentication token")\n            elif response.status_code == 400:\n                error_data = response.json()\n                raise Exception(f"Bad request: {error_data.get(\'error\', \'Unknown error\')}")\n            elif response.status_code == 413:\n                raise Exception("File too large - exceeds size limit")\n            elif response.status_code == 415:\n                raise Exception("Unsupported file type")\n            else:\n                error_data = response.json()\n                raise Exception(f"Upload failed: {error_data.get(\'error\', \'Unknown error\')}")\n        \n        finally:\n            files[\'file\'].close()\n    \n    def upload_logo(self, file_path: str, entity_id: str) -> Dict[str, Any]:\n        """Convenience method for uploading entity logos"""\n        return self.upload_file(\n            file_path, \n            entity_id=entity_id, \n            file_type=\'logo\',\n            description=\'Company logo\'\n        )\n    \n    def upload_document(self, file_path: str, entity_id: str, description: str) -> Dict[str, Any]:\n        """Convenience method for uploading entity documents"""\n        return self.upload_file(\n            file_path, \n            entity_id=entity_id, \n            file_type=\'document\',\n            description=description\n        )\n    \n    def upload_certificate(self, file_path: str, entity_id: str, description: str) -> Dict[str, Any]:\n        """Convenience method for uploading certificates"""\n        return self.upload_file(\n            file_path, \n            entity_id=entity_id, \n            file_type=\'certificate\',\n            description=description\n        )\n\n# Usage examples\nuploader = EntityFileUploader("https://ring.ck.ua", "your-auth-token")\n\ntry:\n    # Upload company logo\n    logo_result = uploader.upload_logo("./assets/company-logo.png", "ent_abc123")\n    print(f"Logo uploaded: {logo_result[\'url\']}")\n    print(f"File size: {logo_result[\'size\']} bytes")\n    \n    # Upload company profile document\n    doc_result = uploader.upload_document(\n        "./documents/company-profile.pdf", \n        "ent_abc123",\n        "Comprehensive company profile and overview"\n    )\n    print(f"Document uploaded: {doc_result[\'url\']}")\n    \n    # Upload business certificate\n    cert_result = uploader.upload_certificate(\n        "./certificates/business-license.pdf",\n        "ent_abc123",\n        "Official business license certificate"\n    )\n    print(f"Certificate uploaded: {cert_result[\'url\']}")\n    \n    # Batch upload multiple files\n    files_to_upload = [\n        {"path": "./images/office-photo1.jpg", "type": "image", "desc": "Office main area"},\n        {"path": "./images/office-photo2.jpg", "type": "image", "desc": "Office meeting room"},\n        {"path": "./docs/company-brochure.pdf", "type": "document", "desc": "Company brochure"}\n    ]\n    \n    upload_results = []\n    for file_info in files_to_upload:\n        try:\n            result = uploader.upload_file(\n                file_info["path"],\n                entity_id="ent_abc123",\n                file_type=file_info["type"],\n                description=file_info["desc"]\n            )\n            upload_results.append({\n                \'filename\': result[\'filename\'],\n                \'url\': result[\'url\'],\n                \'status\': \'success\'\n            })\n        except Exception as e:\n            upload_results.append({\n                \'filename\': file_info["path"],\n                \'error\': str(e),\n                \'status\': \'error\'\n            })\n    \n    # Summary\n    successful = [r for r in upload_results if r[\'status\'] == \'success\']\n    failed = [r for r in upload_results if r[\'status\'] == \'error\']\n    \n    print(f"Batch upload complete: {len(successful)} successful, {len(failed)} failed")\n    \nexcept Exception as e:\n    print(f"Error uploading file: {e}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"file-management-best-practices",children:"File Management Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"file-organization-1",children:"File Organization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Naming Convention"}),": Automatic unique naming prevents conflicts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Directory Structure"}),": Files organized by entity and user"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metadata Storage"}),": Track file purpose, upload date, and user"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version Control"}),": Handle file updates and replacements"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Access Control"}),": Files are publicly accessible but require authentication to upload"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"File Validation"}),": Server-side validation of file types and sizes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Malware Scanning"}),": Implement virus scanning for uploaded files"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Content Filtering"}),": Prevent upload of inappropriate content"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CDN Distribution"}),": Files served via global CDN for fast access"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Image Optimization"}),": Automatic image compression and format optimization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lazy Loading"}),": Load files on demand to improve page performance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Caching Strategy"}),": Implement appropriate caching headers"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/entities-create",children:"Create Entity"})," - Create new entities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/entities-update",children:"Update Entity"})," - Modify entity information"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/entities-get-by-id",children:"Get Entity"})," - Retrieve entity details"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/opportunities-upload",children:"Opportunities Upload"})," - Upload opportunity files"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v1.0.0"})," - Initial implementation with basic file upload"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v1.1.0"})," - Added file type categorization and metadata"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v1.2.0"})," - Enhanced security and validation features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v1.3.0"})," - Improved performance and CDN integration"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(96540);const s={},l=t.createContext(s);function o(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);