"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[531],{3331:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api/create-additional","title":"Create Additional Wallet API","description":"This API endpoint allows authenticated users to create an additional Ethereum wallet associated with their account.","source":"@site/docs/api/create-additional.md","sourceDirName":"api","slug":"/api/create-additional","permalink":"/ring/docs/api/create-additional","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/api/create-additional.md","tags":[],"version":"current","lastUpdatedAt":1733486397000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"apiSidebar","previous":{"title":"List User Wallets API","permalink":"/ring/docs/api/wallet-list"},"next":{"title":"Firebase Service API","permalink":"/ring/docs/libraries/firebase-service"}}');var r=t(4848),s=t(8453);const a={sidebar_position:4},o="Create Additional Wallet API",l={},d=[{value:"Endpoint",id:"endpoint",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Request",id:"request",level:2},{value:"Response",id:"response",level:2},{value:"Error Responses",id:"error-responses",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"create-additional-wallet-api",children:"Create Additional Wallet API"})}),"\n",(0,r.jsx)(n.p,{children:"This API endpoint allows authenticated users to create an additional Ethereum wallet associated with their account."}),"\n",(0,r.jsx)(n.h2,{id:"endpoint",children:"Endpoint"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("span",{class:"api-method api-method--post",children:"POST"})," ",(0,r.jsx)(n.code,{children:"/api/wallet/create-additional"})]}),"\n",(0,r.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,r.jsx)(n.p,{children:"This endpoint requires authentication. Ensure that the user is logged in and has a valid session."}),"\n",(0,r.jsx)(n.h2,{id:"request",children:"Request"}),"\n",(0,r.jsx)(n.p,{children:"This endpoint does not require any parameters in the request body. The user's information is obtained from the authenticated session."}),"\n",(0,r.jsx)(n.h2,{id:"response",children:"Response"}),"\n",(0,r.jsx)(n.p,{children:"The API returns a JSON object with the following structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"{\n  address: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Where:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"address"})," is the Ethereum address of the newly created additional wallet."]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{title:"Usage Example",type:"tip",children:[(0,r.jsx)(n.p,{children:"Create an additional wallet for the authenticated user:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const response = await fetch('/api/wallet/create-additional', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\nconst data = await response.json();\nconsole.log(data.address); // The newly created wallet address\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"error-responses",children:"Error Responses"}),"\n",(0,r.jsx)(n.p,{children:"The API may return the following error responses:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"401 Unauthorized"}),": If the user is not authenticated."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"404 Not Found"}),": If the authenticated user's data is not found in the database."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"500 Internal Server Error"}),": If there's an error creating the additional wallet or updating the user's data."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Implementation Details",type:"note",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The endpoint first checks if the user is authenticated using the ",(0,r.jsx)(n.code,{children:"auth()"})," function."]}),"\n",(0,r.jsx)(n.li,{children:"It retrieves the user's data from the Firebase Admin database."}),"\n",(0,r.jsxs)(n.li,{children:["A new Ethereum wallet is created using ",(0,r.jsx)(n.code,{children:"ethers.Wallet.createRandom()"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"The new wallet's address and encrypted private key (for demonstration purposes) are stored in the user's document in the database."}),"\n",(0,r.jsx)(n.li,{children:"The new wallet address is returned to the client."}),"\n"]})}),"\n",(0,r.jsx)(n.admonition,{title:"Security Note",type:"caution",children:(0,r.jsx)(n.p,{children:"The current implementation stores the private key without encryption. In a production environment, implement a secure method to encrypt the private key before storing it in the database."})}),"\n",(0,r.jsx)(n.admonition,{title:"Best Practices",type:"info",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Implement proper error handling in your client-side code to manage potential API errors."}),"\n",(0,r.jsx)(n.li,{children:"Consider implementing rate limiting to prevent abuse of this endpoint."}),"\n",(0,r.jsx)(n.li,{children:"Implement a secure method for encrypting and storing private keys."}),"\n",(0,r.jsx)(n.li,{children:"Provide users with clear instructions on how to securely manage multiple wallets."}),"\n",(0,r.jsx)(n.li,{children:"Consider implementing a maximum limit on the number of additional wallets a user can create."}),"\n"]})}),"\n",(0,r.jsx)(n.admonition,{title:"Limitations",type:"warning",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"This API currently creates Ethereum-compatible wallets but does not specify a particular network (e.g., Ethereum mainnet, Polygon, etc.)."}),"\n",(0,r.jsx)(n.li,{children:"The private key is currently stored without encryption, which is not secure for production use."}),"\n",(0,r.jsx)(n.li,{children:"There is no limit on the number of additional wallets a user can create, which could potentially lead to database bloat if not managed."}),"\n",(0,r.jsx)(n.li,{children:"The API does not provide options for users to name or label their additional wallets for easier management."}),"\n"]})}),"\n",(0,r.jsx)(n.p,{children:"Stay tuned for updates and feel free to provide feedback for improvements!"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);