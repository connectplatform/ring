"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[364],{28453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var t=i(96540);const s={},r=t.createContext(s);function a(n){const e=t.useContext(r);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),t.createElement(r.Provider,{value:e},n.children)}},53549:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api/notifications/list","title":"Notification System API","description":"Ring Platform\'s comprehensive notification system provides multi-channel delivery with smart targeting and user preferences.","source":"@site/docs/ru/api/notifications/list.md","sourceDirName":"api/notifications","slug":"/api/notifications/list","permalink":"/ring/ru/api/notifications/list","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/ru/api/notifications/list.md","tags":[],"version":"current","lastUpdatedAt":1750331037000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"News Likes API","permalink":"/ring/ru/api/news/likes"},"next":{"title":"Mark Notification as Read API","permalink":"/ring/ru/api/notifications/read"}}');var s=i(74848),r=i(28453);const a={},o="Notification System API",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Base URL",id:"base-url",level:2},{value:"Authentication",id:"authentication",level:2},{value:"API Endpoints",id:"api-endpoints",level:2},{value:"Get User Notifications",id:"get-user-notifications",level:3},{value:"Get Notification Statistics",id:"get-notification-statistics",level:3},{value:"Create Notification (Admin Only)",id:"create-notification-admin-only",level:3},{value:"Mark Notification as Read",id:"mark-notification-as-read",level:3},{value:"Mark All Notifications as Read",id:"mark-all-notifications-as-read",level:3},{value:"Get User Notification Preferences",id:"get-user-notification-preferences",level:3},{value:"Update User Notification Preferences",id:"update-user-notification-preferences",level:3},{value:"Data Types",id:"data-types",level:2},{value:"NotificationType",id:"notificationtype",level:3},{value:"NotificationPriority",id:"notificationpriority",level:3},{value:"NotificationChannel",id:"notificationchannel",level:3},{value:"NotificationStatus",id:"notificationstatus",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Rate Limiting",id:"rate-limiting",level:2},{value:"Integration Examples",id:"integration-examples",level:2},{value:"React Hook for Notifications",id:"react-hook-for-notifications",level:3},{value:"Notification Service Worker",id:"notification-service-worker",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Testing",id:"testing",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"notification-system-api",children:"Notification System API"})}),"\n",(0,s.jsx)(e.p,{children:"Ring Platform's comprehensive notification system provides multi-channel delivery with smart targeting and user preferences."}),"\n",(0,s.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(e.p,{children:"The notification system supports:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Multi-Channel Delivery"}),": In-app, email, SMS, and push notifications"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Smart Targeting"}),": Role-based and preference-driven notifications"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"User Preferences"}),": Granular control over notification types and channels"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Analytics Ready"}),": Built-in tracking and delivery monitoring"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Internationalized"}),": Full Ukrainian/English notification support"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Event-Driven"}),": Automatic triggers for all platform activities"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"base-url",children:"Base URL"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"Development: http://localhost:3000/api\nProduction: https://ring.ck.ua/api\n"})}),"\n",(0,s.jsx)(e.h2,{id:"authentication",children:"Authentication"}),"\n",(0,s.jsx)(e.p,{children:"All notification endpoints require authentication via NextAuth.js session:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"headers: {\n  'Cookie': 'next-auth.session-token=<token>'\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"api-endpoints",children:"API Endpoints"}),"\n",(0,s.jsx)(e.h3,{id:"get-user-notifications",children:"Get User Notifications"}),"\n",(0,s.jsx)(e.p,{children:"Retrieve a paginated list of notifications for the authenticated user."}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Endpoint:"})," ",(0,s.jsx)(e.code,{children:"GET /api/notifications"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Query Parameters:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"limit"})," (number, optional): Maximum number of notifications to return (default: 20)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"startAfter"})," (string, optional): Document ID to start pagination after"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"unreadOnly"})," (boolean, optional): Only return unread notifications"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"stats"})," (boolean, optional): Return notification statistics instead of list"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"types"})," (string, optional): Comma-separated list of notification types to filter"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Response:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"interface NotificationListResponse {\n  notifications: Notification[];\n  unreadCount: number;\n  totalCount: number;\n  hasMore: boolean;\n  lastVisible?: string;\n}\n\ninterface Notification {\n  id: string;\n  userId: string;\n  type: NotificationType;\n  priority: NotificationPriority;\n  status: NotificationStatus;\n  trigger: NotificationTrigger;\n  title: string;\n  body: string;\n  actionText?: string;\n  actionUrl?: string;\n  data: NotificationData;\n  channels: NotificationChannel[];\n  deliveries: NotificationDelivery[];\n  createdAt: Date;\n  readAt?: Date;\n  scheduledFor?: Date;\n  expiresAt?: Date;\n  templateId?: string;\n  locale: string;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example Request:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'curl -X GET "http://localhost:3000/api/notifications?limit=10&unreadOnly=true" \\\n  -H "Cookie: next-auth.session-token=<token>"\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example Response:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "notifications": [\n    {\n      "id": "notif_123",\n      "userId": "user_456",\n      "type": "SYSTEM_ANNOUNCEMENT",\n      "priority": "HIGH",\n      "status": "DELIVERED",\n      "trigger": "ADMIN_ACTION",\n      "title": "New Feature Available",\n      "body": "Check out our new notification system!",\n      "actionText": "Learn More",\n      "actionUrl": "/features/notifications",\n      "data": {\n        "featureId": "notifications"\n      },\n      "channels": ["IN_APP", "EMAIL"],\n      "deliveries": [\n        {\n          "channel": "IN_APP",\n          "status": "DELIVERED",\n          "retryCount": 0,\n          "deliveredAt": "2024-01-15T10:30:00Z"\n        }\n      ],\n      "createdAt": "2024-01-15T10:30:00Z",\n      "scheduledFor": null,\n      "expiresAt": null,\n      "templateId": "system_announcement",\n      "locale": "en"\n    }\n  ],\n  "unreadCount": 5,\n  "totalCount": 42,\n  "hasMore": true,\n  "lastVisible": "notif_123"\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"get-notification-statistics",children:"Get Notification Statistics"}),"\n",(0,s.jsx)(e.p,{children:"Get notification statistics for the authenticated user."}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Endpoint:"})," ",(0,s.jsx)(e.code,{children:"GET /api/notifications?stats=true"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Response:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"interface NotificationStatsResponse {\n  unreadCount: number;\n  totalCount: number;\n  typeBreakdown: Record<NotificationType, number>;\n  channelBreakdown: Record<NotificationChannel, number>;\n  recentActivity: {\n    last7Days: number;\n    last30Days: number;\n  };\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example Response:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "unreadCount": 5,\n  "totalCount": 42,\n  "typeBreakdown": {\n    "SYSTEM_ANNOUNCEMENT": 10,\n    "ENTITY_VERIFICATION": 8,\n    "OPPORTUNITY_UPDATE": 15,\n    "WALLET_TRANSACTION": 9\n  },\n  "channelBreakdown": {\n    "IN_APP": 42,\n    "EMAIL": 35,\n    "SMS": 12,\n    "PUSH": 28\n  },\n  "recentActivity": {\n    "last7Days": 12,\n    "last30Days": 35\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"create-notification-admin-only",children:"Create Notification (Admin Only)"}),"\n",(0,s.jsx)(e.p,{children:"Create a new notification. Only administrators can create manual notifications via API."}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Endpoint:"})," ",(0,s.jsx)(e.code,{children:"POST /api/notifications"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Request Body:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"interface CreateNotificationRequest {\n  userId?: string;           // Single user target\n  userIds?: string[];        // Multiple user targets\n  type: NotificationType;\n  priority?: NotificationPriority;\n  title: string;\n  body: string;\n  data?: NotificationData;\n  channels?: NotificationChannel[];\n  scheduledFor?: Date;\n  expiresAt?: Date;\n  actionText?: string;\n  actionUrl?: string;\n  templateId?: string;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example Request:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'curl -X POST "http://localhost:3000/api/notifications" \\\n  -H "Content-Type: application/json" \\\n  -H "Cookie: next-auth.session-token=<admin-token>" \\\n  -d \'{\n    "userIds": ["user_123", "user_456"],\n    "type": "SYSTEM_ANNOUNCEMENT",\n    "priority": "HIGH",\n    "title": "Maintenance Scheduled",\n    "body": "The platform will be under maintenance tonight from 2-4 AM UTC.",\n    "actionText": "View Details",\n    "actionUrl": "/maintenance",\n    "channels": ["IN_APP", "EMAIL"],\n    "scheduledFor": "2024-01-15T20:00:00Z",\n    "expiresAt": "2024-01-16T04:00:00Z"\n  }\'\n'})}),"\n",(0,s.jsx)(e.h3,{id:"mark-notification-as-read",children:"Mark Notification as Read"}),"\n",(0,s.jsx)(e.p,{children:"Mark a specific notification as read for the authenticated user."}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Endpoint:"})," ",(0,s.jsx)(e.code,{children:"POST /api/notifications/[id]/read"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"URL Parameters:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"id"})," (string, required): The notification ID"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example Request:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'curl -X POST "http://localhost:3000/api/notifications/notif_123/read" \\\n  -H "Cookie: next-auth.session-token=<token>"\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Response:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "success": true,\n  "readAt": "2024-01-15T14:30:00Z"\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"mark-all-notifications-as-read",children:"Mark All Notifications as Read"}),"\n",(0,s.jsx)(e.p,{children:"Mark all notifications as read for the authenticated user."}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Endpoint:"})," ",(0,s.jsx)(e.code,{children:"POST /api/notifications/read-all"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example Request:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'curl -X POST "http://localhost:3000/api/notifications/read-all" \\\n  -H "Cookie: next-auth.session-token=<token>"\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Response:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "success": true,\n  "markedCount": 12\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"get-user-notification-preferences",children:"Get User Notification Preferences"}),"\n",(0,s.jsx)(e.p,{children:"Retrieve notification preferences for the authenticated user."}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Endpoint:"})," ",(0,s.jsx)(e.code,{children:"GET /api/notifications/preferences"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Response:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"interface DetailedNotificationPreferences {\n  id: string;\n  userId: string;\n  language: 'en' | 'uk';\n  timezone: string;\n  enabled: boolean;\n  channels: {\n    inApp: boolean;\n    email: boolean;\n    sms: boolean;\n    push: boolean;\n  };\n  types: {\n    systemAnnouncements: boolean;\n    entityVerification: boolean;\n    opportunityUpdates: boolean;\n    walletTransactions: boolean;\n    securityAlerts: boolean;\n    marketingOffers: boolean;\n  };\n  quiet_hours: {\n    enabled: boolean;\n    start: string;  // \"22:00\"\n    end: string;    // \"08:00\"\n  };\n  frequency: {\n    digest: 'real_time' | 'hourly' | 'daily' | 'weekly';\n    batching: boolean;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example Response:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "id": "pref_123",\n  "userId": "user_456",\n  "language": "en",\n  "timezone": "Europe/Kiev",\n  "enabled": true,\n  "channels": {\n    "inApp": true,\n    "email": true,\n    "sms": false,\n    "push": true\n  },\n  "types": {\n    "systemAnnouncements": true,\n    "entityVerification": true,\n    "opportunityUpdates": true,\n    "walletTransactions": true,\n    "securityAlerts": true,\n    "marketingOffers": false\n  },\n  "quiet_hours": {\n    "enabled": true,\n    "start": "22:00",\n    "end": "08:00"\n  },\n  "frequency": {\n    "digest": "real_time",\n    "batching": false\n  },\n  "createdAt": "2024-01-10T12:00:00Z",\n  "updatedAt": "2024-01-15T10:30:00Z"\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"update-user-notification-preferences",children:"Update User Notification Preferences"}),"\n",(0,s.jsx)(e.p,{children:"Update notification preferences for the authenticated user."}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Endpoint:"})," ",(0,s.jsx)(e.code,{children:"PUT /api/notifications/preferences"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Request Body:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// Partial update - only include fields to change\ninterface UpdatePreferencesRequest {\n  language?: 'en' | 'uk';\n  timezone?: string;\n  enabled?: boolean;\n  channels?: {\n    inApp?: boolean;\n    email?: boolean;\n    sms?: boolean;\n    push?: boolean;\n  };\n  types?: {\n    systemAnnouncements?: boolean;\n    entityVerification?: boolean;\n    opportunityUpdates?: boolean;\n    walletTransactions?: boolean;\n    securityAlerts?: boolean;\n    marketingOffers?: boolean;\n  };\n  quiet_hours?: {\n    enabled?: boolean;\n    start?: string;\n    end?: string;\n  };\n  frequency?: {\n    digest?: 'real_time' | 'hourly' | 'daily' | 'weekly';\n    batching?: boolean;\n  };\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example Request:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'curl -X PUT "http://localhost:3000/api/notifications/preferences" \\\n  -H "Content-Type: application/json" \\\n  -H "Cookie: next-auth.session-token=<token>" \\\n  -d \'{\n    "channels": {\n      "sms": true\n    },\n    "types": {\n      "marketingOffers": true\n    },\n    "quiet_hours": {\n      "enabled": true,\n      "start": "23:00",\n      "end": "07:00"\n    }\n  }\'\n'})}),"\n",(0,s.jsx)(e.h2,{id:"data-types",children:"Data Types"}),"\n",(0,s.jsx)(e.h3,{id:"notificationtype",children:"NotificationType"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"enum NotificationType {\n  SYSTEM_ANNOUNCEMENT = 'SYSTEM_ANNOUNCEMENT',\n  ENTITY_VERIFICATION = 'ENTITY_VERIFICATION',\n  OPPORTUNITY_UPDATE = 'OPPORTUNITY_UPDATE',\n  WALLET_TRANSACTION = 'WALLET_TRANSACTION',\n  SECURITY_ALERT = 'SECURITY_ALERT',\n  MARKETING_OFFER = 'MARKETING_OFFER',\n  USER_MENTION = 'USER_MENTION',\n  MESSAGE_RECEIVED = 'MESSAGE_RECEIVED'\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"notificationpriority",children:"NotificationPriority"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"enum NotificationPriority {\n  LOW = 'LOW',\n  NORMAL = 'NORMAL',\n  HIGH = 'HIGH',\n  URGENT = 'URGENT'\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"notificationchannel",children:"NotificationChannel"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"enum NotificationChannel {\n  IN_APP = 'IN_APP',\n  EMAIL = 'EMAIL',\n  SMS = 'SMS',\n  PUSH = 'PUSH'\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"notificationstatus",children:"NotificationStatus"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"enum NotificationStatus {\n  PENDING = 'PENDING',\n  DELIVERED = 'DELIVERED',\n  READ = 'READ',\n  FAILED = 'FAILED',\n  EXPIRED = 'EXPIRED'\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(e.p,{children:"All endpoints return appropriate HTTP status codes:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"200 OK"})," - Successful request"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"201 Created"})," - Notification created successfully"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"400 Bad Request"})," - Invalid request data"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"401 Unauthorized"})," - Authentication required"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"403 Forbidden"})," - Insufficient permissions"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"404 Not Found"})," - Notification not found"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"500 Internal Server Error"})," - Server error"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Error Response Format:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "error": "Error message describing what went wrong"\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"GET /api/notifications"}),": 100 requests per minute per user"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"POST /api/notifications"}),": 10 requests per minute per admin"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"POST /api/notifications/[id]/read"}),": 200 requests per minute per user"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"POST /api/notifications/read-all"}),": 5 requests per minute per user"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Preferences endpoints"}),": 20 requests per minute per user"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,s.jsx)(e.h3,{id:"react-hook-for-notifications",children:"React Hook for Notifications"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { useState, useEffect } from 'react';\nimport { useSession } from 'next-auth/react';\n\nexport function useNotifications() {\n  const { data: session } = useSession();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const fetchNotifications = async (params = {}) => {\n    if (!session) return;\n    \n    setLoading(true);\n    try {\n      const queryParams = new URLSearchParams({\n        limit: '20',\n        ...params\n      });\n      \n      const response = await fetch(`/api/notifications?${queryParams}`);\n      const data = await response.json();\n      \n      setNotifications(data.notifications);\n      setUnreadCount(data.unreadCount);\n    } catch (error) {\n      console.error('Failed to fetch notifications:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const markAsRead = async (notificationId) => {\n    try {\n      await fetch(`/api/notifications/${notificationId}/read`, {\n        method: 'POST'\n      });\n      \n      // Update local state\n      setNotifications(prev => \n        prev.map(notif => \n          notif.id === notificationId \n            ? { ...notif, readAt: new Date(), status: 'READ' }\n            : notif\n        )\n      );\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      console.error('Failed to mark notification as read:', error);\n    }\n  };\n\n  const markAllAsRead = async () => {\n    try {\n      const response = await fetch('/api/notifications/read-all', {\n        method: 'POST'\n      });\n      const { markedCount } = await response.json();\n      \n      setNotifications(prev => \n        prev.map(notif => ({ \n          ...notif, \n          readAt: new Date(), \n          status: 'READ' \n        }))\n      );\n      setUnreadCount(0);\n    } catch (error) {\n      console.error('Failed to mark all notifications as read:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchNotifications();\n  }, [session]);\n\n  return {\n    notifications,\n    unreadCount,\n    loading,\n    fetchNotifications,\n    markAsRead,\n    markAllAsRead\n  };\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"notification-service-worker",children:"Notification Service Worker"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// sw.js - Service Worker for push notifications\nself.addEventListener('push', event => {\n  if (!event.data) return;\n\n  const notification = event.data.json();\n  const { title, body, actionUrl, data } = notification;\n\n  const options = {\n    body,\n    icon: '/icons/ring-192.png',\n    badge: '/icons/ring-badge.png',\n    data: {\n      url: actionUrl || '/',\n      ...data\n    }\n  };\n\n  event.waitUntil(\n    self.registration.showNotification(title, options)\n  );\n});\n\nself.addEventListener('notificationclick', event => {\n  event.notification.close();\n  \n  const urlToOpen = event.notification.data.url;\n  \n  event.waitUntil(\n    clients.openWindow(urlToOpen)\n  );\n});\n"})}),"\n",(0,s.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Pagination"}),": Always use pagination for notification lists"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Real-time Updates"}),": Consider WebSocket connections for real-time notifications"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Error Handling"}),": Implement proper error handling and retry logic"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"User Preferences"}),": Respect user notification preferences"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Rate Limiting"}),": Implement client-side rate limiting to avoid API limits"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Caching"}),": Cache notification data appropriately with proper invalidation"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Accessibility"}),": Ensure notifications are accessible to all users"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsxs)(e.p,{children:["Use the interactive ",(0,s.jsx)(e.a,{href:"https://github.com/connectplatform/ring/blob/main/my-docs/notebooks/api-testing/ring-notification-system.ipynb",children:"Notification System Jupyter notebook"})," for comprehensive API testing and exploration."]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}}}]);