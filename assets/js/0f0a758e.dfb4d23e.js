"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[3381],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},64851:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api/opportunities/update","title":"Opportunities Update API","description":"Overview","source":"@site/docs/ru/api/opportunities/update.md","sourceDirName":"api/opportunities","slug":"/api/opportunities/update","permalink":"/ring/ru/api/opportunities/update","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/ru/api/opportunities/update.md","tags":[],"version":"current","lastUpdatedAt":1750331037000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Opportunity Details API","permalink":"/ring/ru/api/opportunities/get-by-id"},"next":{"title":"Opportunities Delete API","permalink":"/ring/ru/api/opportunities/delete"}}');var r=t(74848),s=t(28453);const a={},o="Opportunities Update API",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"Ring Platform Opportunity Updates",id:"ring-platform-opportunity-updates",level:2},{value:"Update Permissions",id:"update-permissions",level:3},{value:"<strong>Permission Levels</strong>",id:"permission-levels",level:4},{value:"<strong>Confidential Opportunity Rules</strong>",id:"confidential-opportunity-rules",level:4},{value:"<strong>Field-Level Permissions</strong>",id:"field-level-permissions",level:4},{value:"Request Format",id:"request-format",level:2},{value:"URL Parameters",id:"url-parameters",level:3},{value:"Headers",id:"headers",level:3},{value:"Request Body",id:"request-body",level:3},{value:"Partial Update Example",id:"partial-update-example",level:3},{value:"Response Format",id:"response-format",level:2},{value:"Success Response (200 OK)",id:"success-response-200-ok",level:3},{value:"Error Responses",id:"error-responses",level:3},{value:"Unauthorized (401)",id:"unauthorized-401",level:4},{value:"Forbidden (403)",id:"forbidden-403",level:4},{value:"Not Found (404)",id:"not-found-404",level:4},{value:"Validation Error (400)",id:"validation-error-400",level:4},{value:"Confidential Permission Error (403)",id:"confidential-permission-error-403",level:4},{value:"Code Examples",id:"code-examples",level:2},{value:"JavaScript/TypeScript",id:"javascripttypescript",level:3},{value:"React Hook for Opportunity Updates",id:"react-hook-for-opportunity-updates",level:3},{value:"cURL Example",id:"curl-example",level:3},{value:"Python Example",id:"python-example",level:3},{value:"Validation Rules",id:"validation-rules",level:2},{value:"Field Validation",id:"field-validation",level:3},{value:"Business Rules",id:"business-rules",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Permission Checks",id:"permission-checks",level:3},{value:"Data Sanitization",id:"data-sanitization",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2},{value:"Changelog",id:"changelog",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"opportunities-update-api",children:"Opportunities Update API"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The Opportunities Update API allows authenticated users to modify existing opportunities within the Ring Platform. This endpoint supports partial updates, enabling users to modify specific fields without affecting the entire opportunity record."}),"\n",(0,r.jsx)(n.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL"}),": ",(0,r.jsx)(n.code,{children:"/api/opportunities/update/[id]"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Method"}),": ",(0,r.jsx)(n.code,{children:"PATCH"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Authentication"}),": Required (Bearer token or session)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Authorization"}),": Owner, Admin, or Entity Member"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rate Limit"}),": 60 requests per minute per user"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),": Comprehensive field validation and business rules"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ring-platform-opportunity-updates",children:"Ring Platform Opportunity Updates"}),"\n",(0,r.jsx)(n.h3,{id:"update-permissions",children:"Update Permissions"}),"\n",(0,r.jsx)(n.p,{children:"Ring Platform implements a sophisticated permission system for opportunity updates:"}),"\n",(0,r.jsx)(n.h4,{id:"permission-levels",children:(0,r.jsx)(n.strong,{children:"Permission Levels"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Owner"}),": User who created the opportunity (full update access)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Entity Admin"}),": Admin of the entity that owns the opportunity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Platform Admin"}),": System administrators (full access)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Entity Member"}),": Members of the owning entity (limited updates)"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"confidential-opportunity-rules",children:(0,r.jsx)(n.strong,{children:"Confidential Opportunity Rules"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Only ",(0,r.jsx)(n.strong,{children:"CONFIDENTIAL"})," users can update confidential opportunities"]}),"\n",(0,r.jsx)(n.li,{children:"Confidential status cannot be changed once set"}),"\n",(0,r.jsx)(n.li,{children:"Enhanced audit logging for all confidential opportunity changes"}),"\n",(0,r.jsx)(n.li,{children:"Additional security validations for sensitive fields"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"field-level-permissions",children:(0,r.jsx)(n.strong,{children:"Field-Level Permissions"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Public Fields"}),": Title, description, requirements (all authorized users)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sensitive Fields"}),": Budget, contact info (owner/admin only)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"System Fields"}),": Created date, ID, audit trail (read-only)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"request-format",children:"Request Format"}),"\n",(0,r.jsx)(n.h3,{id:"url-parameters",children:"URL Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," (required): Unique identifier of the opportunity to update"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"headers",children:"Headers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"PATCH /api/opportunities/update/[id]\nContent-Type: application/json\nAuthorization: Bearer <token>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"request-body",children:"Request Body"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "title": "Senior Full-Stack Developer - Updated",\n  "description": "Updated job description with new requirements...",\n  "type": "offer",\n  "category": "technology",\n  "industry": "software-development",\n  "location": {\n    "type": "hybrid",\n    "city": "San Francisco",\n    "state": "CA",\n    "country": "US",\n    "remote": true\n  },\n  "budget": {\n    "min": 120000,\n    "max": 180000,\n    "currency": "USD",\n    "type": "annual"\n  },\n  "requirements": [\n    "5+ years React/Node.js experience",\n    "TypeScript proficiency",\n    "System design experience",\n    "Team leadership skills"\n  ],\n  "benefits": [\n    "Competitive salary",\n    "Equity package",\n    "Health insurance",\n    "Remote work flexibility",\n    "Professional development budget"\n  ],\n  "tags": ["react", "nodejs", "typescript", "leadership", "remote"],\n  "expiresAt": "2025-03-15T23:59:59Z",\n  "isActive": true,\n  "contactInfo": {\n    "email": "hiring@techcorp.com",\n    "phone": "+1-555-0123",\n    "preferredMethod": "email"\n  },\n  "applicationProcess": {\n    "method": "external",\n    "url": "https://techcorp.com/careers/senior-fullstack",\n    "instructions": "Please apply through our careers page with your portfolio"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"partial-update-example",children:"Partial Update Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "title": "Updated Opportunity Title",\n  "budget": {\n    "min": 130000,\n    "max": 190000\n  },\n  "tags": ["react", "nodejs", "typescript", "senior", "remote"]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"response-format",children:"Response Format"}),"\n",(0,r.jsx)(n.h3,{id:"success-response-200-ok",children:"Success Response (200 OK)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Opportunity updated successfully",\n  "success": true,\n  "data": {\n    "id": "opp_abc123def456",\n    "title": "Senior Full-Stack Developer - Updated",\n    "description": "Updated job description with new requirements...",\n    "type": "offer",\n    "category": "technology",\n    "industry": "software-development",\n    "entityId": "ent_xyz789",\n    "entityName": "TechCorp Solutions",\n    "createdBy": "user_123",\n    "location": {\n      "type": "hybrid",\n      "city": "San Francisco",\n      "state": "CA",\n      "country": "US",\n      "remote": true\n    },\n    "budget": {\n      "min": 120000,\n      "max": 180000,\n      "currency": "USD",\n      "type": "annual"\n    },\n    "requirements": [\n      "5+ years React/Node.js experience",\n      "TypeScript proficiency",\n      "System design experience",\n      "Team leadership skills"\n    ],\n    "benefits": [\n      "Competitive salary",\n      "Equity package",\n      "Health insurance",\n      "Remote work flexibility",\n      "Professional development budget"\n    ],\n    "tags": ["react", "nodejs", "typescript", "leadership", "remote"],\n    "visibility": "public",\n    "isActive": true,\n    "isConfidential": false,\n    "contactInfo": {\n      "email": "hiring@techcorp.com",\n      "phone": "+1-555-0123",\n      "preferredMethod": "email"\n    },\n    "applicationProcess": {\n      "method": "external",\n      "url": "https://techcorp.com/careers/senior-fullstack",\n      "instructions": "Please apply through our careers page with your portfolio"\n    },\n    "stats": {\n      "views": 245,\n      "applications": 12,\n      "saves": 18\n    },\n    "createdAt": "2025-01-10T14:30:00Z",\n    "updatedAt": "2025-01-14T16:45:00Z",\n    "expiresAt": "2025-03-15T23:59:59Z"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"error-responses",children:"Error Responses"}),"\n",(0,r.jsx)(n.h4,{id:"unauthorized-401",children:"Unauthorized (401)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Unauthorized"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"forbidden-403",children:"Forbidden (403)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Access denied: Forbidden"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"not-found-404",children:"Not Found (404)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Opportunity not found"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"validation-error-400",children:"Validation Error (400)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Validation failed",\n  "details": {\n    "budget.min": "Minimum budget must be greater than 0",\n    "expiresAt": "Expiration date must be in the future",\n    "tags": "Maximum 10 tags allowed"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"confidential-permission-error-403",children:"Confidential Permission Error (403)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Cannot update confidential opportunity: Insufficient permissions"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,r.jsx)(n.h3,{id:"javascripttypescript",children:"JavaScript/TypeScript"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface OpportunityUpdateData {\n  title?: string;\n  description?: string;\n  type?: 'offer' | 'request';\n  category?: string;\n  industry?: string;\n  location?: {\n    type: 'remote' | 'onsite' | 'hybrid';\n    city?: string;\n    state?: string;\n    country?: string;\n    remote?: boolean;\n  };\n  budget?: {\n    min?: number;\n    max?: number;\n    currency?: string;\n    type?: 'hourly' | 'daily' | 'monthly' | 'annual' | 'project';\n  };\n  requirements?: string[];\n  benefits?: string[];\n  tags?: string[];\n  expiresAt?: string;\n  isActive?: boolean;\n  contactInfo?: {\n    email?: string;\n    phone?: string;\n    preferredMethod?: 'email' | 'phone' | 'platform';\n  };\n  applicationProcess?: {\n    method: 'internal' | 'external' | 'email';\n    url?: string;\n    email?: string;\n    instructions?: string;\n  };\n}\n\nasync function updateOpportunity(\n  opportunityId: string, \n  updateData: OpportunityUpdateData,\n  authToken: string\n): Promise<any> {\n  const response = await fetch(`/api/opportunities/update/${opportunityId}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${authToken}`\n    },\n    body: JSON.stringify(updateData)\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to update opportunity');\n  }\n\n  return response.json();\n}\n\n// Usage examples\ntry {\n  // Partial update - only modify specific fields\n  const partialUpdate = await updateOpportunity('opp_abc123', {\n    title: 'Updated Job Title',\n    budget: {\n      min: 130000,\n      max: 190000\n    },\n    tags: ['react', 'nodejs', 'senior']\n  }, userToken);\n\n  console.log('Opportunity updated:', partialUpdate.data.title);\n\n  // Full update with all fields\n  const fullUpdate = await updateOpportunity('opp_def456', {\n    title: 'Senior Backend Engineer',\n    description: 'We are looking for an experienced backend engineer...',\n    type: 'offer',\n    category: 'technology',\n    industry: 'software-development',\n    location: {\n      type: 'remote',\n      country: 'US',\n      remote: true\n    },\n    budget: {\n      min: 140000,\n      max: 200000,\n      currency: 'USD',\n      type: 'annual'\n    },\n    requirements: [\n      'Go or Python experience',\n      'Microservices architecture',\n      'Cloud platforms (AWS/GCP)'\n    ],\n    benefits: [\n      'Competitive salary',\n      'Stock options',\n      'Health benefits'\n    ],\n    tags: ['golang', 'python', 'microservices', 'cloud'],\n    expiresAt: '2025-04-01T23:59:59Z',\n    isActive: true,\n    contactInfo: {\n      email: 'engineering@company.com',\n      preferredMethod: 'email'\n    },\n    applicationProcess: {\n      method: 'external',\n      url: 'https://company.com/careers/backend-engineer',\n      instructions: 'Please include your GitHub profile'\n    }\n  }, userToken);\n\n  console.log('Full update completed:', fullUpdate.data.id);\n\n} catch (error) {\n  console.error('Update failed:', error.message);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"react-hook-for-opportunity-updates",children:"React Hook for Opportunity Updates"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { useState } from \'react\';\n\ninterface UseOpportunityUpdateResult {\n  updateOpportunity: (id: string, data: OpportunityUpdateData) => Promise<void>;\n  isUpdating: boolean;\n  error: string | null;\n  success: boolean;\n}\n\nfunction useOpportunityUpdate(): UseOpportunityUpdateResult {\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n\n  const updateOpportunity = async (id: string, data: OpportunityUpdateData) => {\n    setIsUpdating(true);\n    setError(null);\n    setSuccess(false);\n\n    try {\n      const token = localStorage.getItem(\'authToken\');\n      if (!token) {\n        throw new Error(\'Authentication required\');\n      }\n\n      const result = await updateOpportunity(id, data, token);\n      setSuccess(true);\n      \n      // Optional: trigger refresh of opportunity data\n      // onUpdate?.(result.data);\n      \n    } catch (err) {\n      setError(err instanceof Error ? err.message : \'Update failed\');\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  return { updateOpportunity, isUpdating, error, success };\n}\n\n// Usage in component\nfunction OpportunityEditForm({ opportunityId, initialData }: OpportunityEditFormProps) {\n  const { updateOpportunity, isUpdating, error, success } = useOpportunityUpdate();\n  const [formData, setFormData] = useState(initialData);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Only send changed fields\n    const changes = getChangedFields(initialData, formData);\n    \n    if (Object.keys(changes).length === 0) {\n      alert(\'No changes to save\');\n      return;\n    }\n\n    await updateOpportunity(opportunityId, changes);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className="form-group">\n        <label>Title</label>\n        <input\n          type="text"\n          value={formData.title}\n          onChange={(e) => setFormData({...formData, title: e.target.value})}\n          disabled={isUpdating}\n        />\n      </div>\n\n      <div className="form-group">\n        <label>Description</label>\n        <textarea\n          value={formData.description}\n          onChange={(e) => setFormData({...formData, description: e.target.value})}\n          disabled={isUpdating}\n        />\n      </div>\n\n      {/* Budget fields */}\n      <div className="form-group">\n        <label>Budget Range</label>\n        <div className="budget-inputs">\n          <input\n            type="number"\n            placeholder="Min"\n            value={formData.budget?.min || \'\'}\n            onChange={(e) => setFormData({\n              ...formData,\n              budget: { ...formData.budget, min: parseInt(e.target.value) }\n            })}\n            disabled={isUpdating}\n          />\n          <input\n            type="number"\n            placeholder="Max"\n            value={formData.budget?.max || \'\'}\n            onChange={(e) => setFormData({\n              ...formData,\n              budget: { ...formData.budget, max: parseInt(e.target.value) }\n            })}\n            disabled={isUpdating}\n          />\n        </div>\n      </div>\n\n      {error && <div className="error-message">{error}</div>}\n      {success && <div className="success-message">Opportunity updated successfully!</div>}\n\n      <div className="form-actions">\n        <button type="submit" disabled={isUpdating}>\n          {isUpdating ? \'Updating...\' : \'Update Opportunity\'}\n        </button>\n      </div>\n    </form>\n  );\n}\n\n// Helper function to detect changes\nfunction getChangedFields(original: any, updated: any): any {\n  const changes: any = {};\n  \n  for (const key in updated) {\n    if (JSON.stringify(original[key]) !== JSON.stringify(updated[key])) {\n      changes[key] = updated[key];\n    }\n  }\n  \n  return changes;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"curl-example",children:"cURL Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Update opportunity title and budget\ncurl -X PATCH "https://ring.ck.ua/api/opportunities/update/opp_abc123def456" \\\n  -H "Content-Type: application/json" \\\n  -H "Authorization: Bearer YOUR_AUTH_TOKEN" \\\n  -d \'{\n    "title": "Updated Senior Developer Position",\n    "budget": {\n      "min": 130000,\n      "max": 190000,\n      "currency": "USD",\n      "type": "annual"\n    },\n    "tags": ["react", "nodejs", "typescript", "senior", "remote"]\n  }\'\n\n# Partial update - change only status\ncurl -X PATCH "https://ring.ck.ua/api/opportunities/update/opp_def456" \\\n  -H "Content-Type: application/json" \\\n  -H "Authorization: Bearer YOUR_AUTH_TOKEN" \\\n  -d \'{\n    "isActive": false\n  }\'\n\n# Update location and remote work options\ncurl -X PATCH "https://ring.ck.ua/api/opportunities/update/opp_ghi789" \\\n  -H "Content-Type: application/json" \\\n  -H "Authorization: Bearer YOUR_AUTH_TOKEN" \\\n  -d \'{\n    "location": {\n      "type": "hybrid",\n      "city": "Austin",\n      "state": "TX",\n      "country": "US",\n      "remote": true\n    }\n  }\'\n'})}),"\n",(0,r.jsx)(n.h3,{id:"python-example",children:"Python Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import requests\nfrom typing import Dict, Any, Optional\n\nclass OpportunityUpdater:\n    def __init__(self, base_url: str, auth_token: str):\n        self.base_url = base_url.rstrip(\'/\')\n        self.auth_token = auth_token\n        self.headers = {\n            \'Content-Type\': \'application/json\',\n            \'Authorization\': f\'Bearer {auth_token}\'\n        }\n    \n    def update_opportunity(self, opportunity_id: str, update_data: Dict[str, Any]) -> Dict[str, Any]:\n        """Update an opportunity with partial data"""\n        url = f"{self.base_url}/api/opportunities/update/{opportunity_id}"\n        \n        response = requests.patch(url, json=update_data, headers=self.headers)\n        \n        if response.status_code == 200:\n            return response.json()\n        elif response.status_code == 401:\n            raise Exception("Unauthorized - check your authentication token")\n        elif response.status_code == 403:\n            raise Exception("Forbidden - insufficient permissions")\n        elif response.status_code == 404:\n            raise Exception("Opportunity not found")\n        else:\n            error_data = response.json()\n            raise Exception(f"Update failed: {error_data.get(\'error\', \'Unknown error\')}")\n    \n    def update_budget(self, opportunity_id: str, min_budget: int, max_budget: int, currency: str = "USD") -> Dict[str, Any]:\n        """Convenience method to update only budget information"""\n        update_data = {\n            "budget": {\n                "min": min_budget,\n                "max": max_budget,\n                "currency": currency,\n                "type": "annual"\n            }\n        }\n        return self.update_opportunity(opportunity_id, update_data)\n    \n    def toggle_active_status(self, opportunity_id: str, is_active: bool) -> Dict[str, Any]:\n        """Toggle opportunity active status"""\n        update_data = {"isActive": is_active}\n        return self.update_opportunity(opportunity_id, update_data)\n    \n    def update_tags(self, opportunity_id: str, tags: list) -> Dict[str, Any]:\n        """Update opportunity tags"""\n        update_data = {"tags": tags}\n        return self.update_opportunity(opportunity_id, update_data)\n    \n    def extend_expiration(self, opportunity_id: str, new_expiration: str) -> Dict[str, Any]:\n        """Extend opportunity expiration date"""\n        update_data = {"expiresAt": new_expiration}\n        return self.update_opportunity(opportunity_id, update_data)\n\n# Usage examples\nupdater = OpportunityUpdater("https://ring.ck.ua", "your-auth-token")\n\ntry:\n    # Update multiple fields\n    result = updater.update_opportunity("opp_abc123", {\n        "title": "Senior Python Developer - Remote",\n        "description": "Updated job description with remote work emphasis...",\n        "location": {\n            "type": "remote",\n            "country": "US",\n            "remote": True\n        },\n        "budget": {\n            "min": 120000,\n            "max": 180000,\n            "currency": "USD",\n            "type": "annual"\n        },\n        "tags": ["python", "django", "remote", "senior"],\n        "benefits": [\n            "Competitive salary",\n            "Health insurance",\n            "401k matching",\n            "Unlimited PTO",\n            "Home office stipend"\n        ]\n    })\n    \n    print(f"Updated opportunity: {result[\'data\'][\'title\']}")\n    \n    # Use convenience methods\n    budget_update = updater.update_budget("opp_def456", 140000, 200000)\n    print(f"Budget updated for: {budget_update[\'data\'][\'id\']}")\n    \n    # Toggle status\n    status_update = updater.toggle_active_status("opp_ghi789", False)\n    print(f"Deactivated opportunity: {status_update[\'data\'][\'id\']}")\n    \n    # Update tags\n    tag_update = updater.update_tags("opp_jkl012", ["react", "typescript", "nextjs", "remote"])\n    print(f"Tags updated for: {tag_update[\'data\'][\'id\']}")\n    \nexcept Exception as e:\n    print(f"Error updating opportunity: {e}")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"validation-rules",children:"Validation Rules"}),"\n",(0,r.jsx)(n.h3,{id:"field-validation",children:"Field Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const validationRules = {\n  title: {\n    minLength: 10,\n    maxLength: 200,\n    required: false // for updates\n  },\n  description: {\n    minLength: 50,\n    maxLength: 5000,\n    required: false\n  },\n  budget: {\n    min: {\n      minimum: 0,\n      maximum: 10000000\n    },\n    max: {\n      minimum: 0,\n      maximum: 10000000,\n      mustBeGreaterThanMin: true\n    },\n    currency: {\n      allowedValues: ['USD', 'EUR', 'GBP', 'CAD', 'AUD']\n    }\n  },\n  tags: {\n    maxItems: 10,\n    itemMaxLength: 30\n  },\n  expiresAt: {\n    mustBeFuture: true,\n    maxDaysFromNow: 365\n  }\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"business-rules",children:"Business Rules"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Budget Consistency"}),": Maximum budget must be greater than minimum"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Expiration Logic"}),": Cannot set expiration date in the past"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tag Limits"}),": Maximum 10 tags per opportunity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Confidential Updates"}),": Only confidential users can update confidential opportunities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Entity Ownership"}),": Users can only update opportunities owned by their entities"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"permission-checks",children:"Permission Checks"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ownership Validation"}),": Verify user owns the opportunity or has entity permissions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Confidential Access"}),": Additional checks for confidential opportunities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Field-Level Security"}),": Sensitive fields require higher permissions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audit Logging"}),": All updates are logged for security and compliance"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"data-sanitization",children:"Data Sanitization"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input Validation"}),": All fields are validated and sanitized"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"XSS Prevention"}),": HTML content is escaped"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SQL Injection"}),": Parameterized queries prevent injection attacks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rate Limiting"}),": Prevent abuse with request rate limits"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/api/opportunities/create",children:"Create Opportunity"})," - Create new opportunities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/api/opportunities/get-by-id",children:"Get Opportunity"})," - Retrieve opportunity details"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/api/opportunities/delete",children:"Delete Opportunity"})," - Remove opportunities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/api/opportunities/list",children:"List Opportunities"})," - Browse and search opportunities"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"v1.0.0"})," - Initial implementation with basic update functionality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"v1.1.0"})," - Added partial update support and field validation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"v1.2.0"})," - Enhanced permission system and confidential opportunity support"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"v1.3.0"})," - Improved error handling and audit logging"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);