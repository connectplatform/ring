"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[1555],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(96540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}},95584:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api/auth/nextauth","title":"NextAuth.js Authentication","description":"Overview","source":"@site/docs/en/api/auth/nextauth.md","sourceDirName":"api/auth","slug":"/api/auth/nextauth","permalink":"/ring/docs/api/auth/nextauth","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/en/api/auth/nextauth.md","tags":[],"version":"current","lastUpdatedAt":1750331037000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Ring Platform API Documentation","permalink":"/ring/docs/api/"},"next":{"title":"Web3 Nonce Generation","permalink":"/ring/docs/api/auth/crypto-nonce"}}');var r=i(74848),t=i(28453);const a={},l="NextAuth.js Authentication",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Authentication Providers",id:"authentication-providers",level:2},{value:"Google OAuth",id:"google-oauth",level:3},{value:"Apple ID",id:"apple-id",level:3},{value:"MetaMask/Web3",id:"metamaskweb3",level:3},{value:"Email/Password",id:"emailpassword",level:3},{value:"Endpoints",id:"endpoints",level:2},{value:"Sign In",id:"sign-in",level:3},{value:"Sign Out",id:"sign-out",level:3},{value:"Session",id:"session",level:3},{value:"CSRF Token",id:"csrf-token",level:3},{value:"Authentication Flow",id:"authentication-flow",level:2},{value:"1. OAuth Flow (Google/Apple)",id:"1-oauth-flow-googleapple",level:3},{value:"2. Web3 Flow (MetaMask)",id:"2-web3-flow-metamask",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"JavaScript/TypeScript",id:"javascripttypescript",level:3},{value:"cURL Examples",id:"curl-examples",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Error Codes",id:"common-error-codes",level:3},{value:"Error Response Format",id:"error-response-format",level:3},{value:"Security Features",id:"security-features",level:2},{value:"CSRF Protection",id:"csrf-protection",level:3},{value:"Session Security",id:"session-security",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2},{value:"Testing",id:"testing",level:2},{value:"Test Accounts",id:"test-accounts",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"nextauthjs-authentication",children:"NextAuth.js Authentication"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"/api/auth/[...nextauth]"})," endpoint handles all authentication flows for Ring Platform using NextAuth.js v5. This endpoint manages multiple authentication providers including Google OAuth, Apple ID, MetaMask/Web3 wallets, and traditional credentials."]}),"\n",(0,r.jsx)(n.h2,{id:"authentication-providers",children:"Authentication Providers"}),"\n",(0,r.jsx)(n.h3,{id:"google-oauth",children:"Google OAuth"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provider"}),": Google"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scopes"}),": ",(0,r.jsx)(n.code,{children:"openid"}),", ",(0,r.jsx)(n.code,{children:"email"}),", ",(0,r.jsx)(n.code,{children:"profile"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Auto-registration"}),": Enabled for new users"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"apple-id",children:"Apple ID"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provider"}),": Apple"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scopes"}),": ",(0,r.jsx)(n.code,{children:"name"}),", ",(0,r.jsx)(n.code,{children:"email"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Privacy"}),": Supports private relay emails"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"metamaskweb3",children:"MetaMask/Web3"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provider"}),": Credentials (Web3)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Method"}),": Signature verification"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wallet"}),": Automatic wallet creation on first login"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"emailpassword",children:"Email/Password"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provider"}),": Credentials"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),": Email format and password strength"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security"}),": Bcrypt hashing with salt rounds"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,r.jsx)(n.h3,{id:"sign-in",children:"Sign In"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"POST /api/auth/signin\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Request Body:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "email": "user@example.com",\n  "password": "securePassword123",\n  "callbackUrl": "/dashboard"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "url": "https://ring.ck.ua/dashboard",\n  "ok": true\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sign-out",children:"Sign Out"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"POST /api/auth/signout\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "url": "https://ring.ck.ua/",\n  "ok": true\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"session",children:"Session"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"GET /api/auth/session\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "user": {\n    "id": "user_123",\n    "name": "John Doe",\n    "email": "john@example.com",\n    "image": "https://example.com/avatar.jpg",\n    "role": "member"\n  },\n  "expires": "2024-12-31T23:59:59.999Z"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"csrf-token",children:"CSRF Token"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"GET /api/auth/csrf\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "csrfToken": "abc123def456ghi789"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"authentication-flow",children:"Authentication Flow"}),"\n",(0,r.jsx)(n.h3,{id:"1-oauth-flow-googleapple",children:"1. OAuth Flow (Google/Apple)"}),"\n",(0,r.jsx)(n.mermaid,{value:'sequenceDiagram\n    participant User\n    participant Ring\n    participant Provider\n    participant Firebase\n    \n    User->>Ring: Click "Sign in with Google"\n    Ring->>Provider: Redirect to OAuth\n    Provider->>User: Show consent screen\n    User->>Provider: Grant permissions\n    Provider->>Ring: Return with auth code\n    Ring->>Provider: Exchange code for tokens\n    Provider->>Ring: Return user profile\n    Ring->>Firebase: Create/update user\n    Ring->>User: Redirect with session'}),"\n",(0,r.jsx)(n.h3,{id:"2-web3-flow-metamask",children:"2. Web3 Flow (MetaMask)"}),"\n",(0,r.jsx)(n.mermaid,{value:'sequenceDiagram\n    participant User\n    participant Ring\n    participant MetaMask\n    participant Firebase\n    \n    User->>Ring: Click "Connect Wallet"\n    Ring->>MetaMask: Request account access\n    MetaMask->>User: Show connection prompt\n    User->>MetaMask: Approve connection\n    MetaMask->>Ring: Return wallet address\n    Ring->>Ring: Generate nonce\n    Ring->>MetaMask: Request signature\n    MetaMask->>User: Show signature prompt\n    User->>MetaMask: Sign message\n    MetaMask->>Ring: Return signature\n    Ring->>Ring: Verify signature\n    Ring->>Firebase: Create/update user\n    Ring->>User: Set session'}),"\n",(0,r.jsx)(n.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,r.jsx)(n.h3,{id:"javascripttypescript",children:"JavaScript/TypeScript"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { signIn, signOut, useSession } from 'next-auth/react'\n\n// Sign in with Google\nawait signIn('google', { callbackUrl: '/dashboard' })\n\n// Sign in with credentials\nawait signIn('credentials', {\n  email: 'user@example.com',\n  password: 'password123',\n  callbackUrl: '/dashboard'\n})\n\n// Sign out\nawait signOut({ callbackUrl: '/' })\n\n// Get session\nconst { data: session, status } = useSession()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"curl-examples",children:"cURL Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Get CSRF token\ncurl -X GET "https://ring.ck.ua/api/auth/csrf" \\\n  -H "Accept: application/json"\n\n# Sign in with credentials\ncurl -X POST "https://ring.ck.ua/api/auth/callback/credentials" \\\n  -H "Content-Type: application/x-www-form-urlencoded" \\\n  -d "email=user@example.com&password=password123&csrfToken=abc123"\n\n# Get current session\ncurl -X GET "https://ring.ck.ua/api/auth/session" \\\n  -H "Cookie: next-auth.session-token=your-session-token"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"common-error-codes",children:"Common Error Codes"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Message"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"CredentialsSignin"})}),(0,r.jsx)(n.td,{children:"Invalid credentials"}),(0,r.jsx)(n.td,{children:"Email/password combination is incorrect"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"OAuthAccountNotLinked"})}),(0,r.jsx)(n.td,{children:"Account linking required"}),(0,r.jsx)(n.td,{children:"Email already exists with different provider"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"EmailCreateAccount"})}),(0,r.jsx)(n.td,{children:"Account creation failed"}),(0,r.jsx)(n.td,{children:"Error creating new user account"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Callback"})}),(0,r.jsx)(n.td,{children:"Callback error"}),(0,r.jsx)(n.td,{children:"OAuth callback processing failed"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"OAuthCallback"})}),(0,r.jsx)(n.td,{children:"OAuth error"}),(0,r.jsx)(n.td,{children:"Provider-specific OAuth error"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"error-response-format",children:"Error Response Format"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "CredentialsSignin",\n  "message": "Invalid email or password",\n  "status": 401\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"security-features",children:"Security Features"}),"\n",(0,r.jsx)(n.h3,{id:"csrf-protection",children:"CSRF Protection"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Automatic CSRF token generation"}),"\n",(0,r.jsx)(n.li,{children:"Token validation on all state-changing requests"}),"\n",(0,r.jsx)(n.li,{children:"Secure token storage in HTTP-only cookies"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"session-security",children:"Session Security"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"JWT tokens with RS256 signing"}),"\n",(0,r.jsx)(n.li,{children:"Secure HTTP-only session cookies"}),"\n",(0,r.jsx)(n.li,{children:"Automatic session rotation"}),"\n",(0,r.jsx)(n.li,{children:"Configurable session expiry (30 days default)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"5 failed login attempts per IP per 15 minutes"}),"\n",(0,r.jsx)(n.li,{children:"10 successful logins per IP per minute"}),"\n",(0,r.jsx)(n.li,{children:"Progressive backoff for repeated failures"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-env",children:"NEXTAUTH_URL=https://ring.ck.ua\nNEXTAUTH_SECRET=your-secret-key\n\n# Google OAuth\nGOOGLE_CLIENT_ID=your-google-client-id\nGOOGLE_CLIENT_SECRET=your-google-client-secret\n\n# Apple ID\nAPPLE_ID=your-apple-id\nAPPLE_TEAM_ID=your-apple-team-id\nAPPLE_PRIVATE_KEY=your-apple-private-key\nAPPLE_KEY_ID=your-apple-key-id\n\n# Firebase\nFIREBASE_PROJECT_ID=your-firebase-project\nFIREBASE_CLIENT_EMAIL=your-firebase-client-email\nFIREBASE_PRIVATE_KEY=your-firebase-private-key\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/ring/docs/api/auth/crypto-nonce",children:(0,r.jsx)(n.code,{children:"/api/auth/crypto/generateNonce"})})," - Web3 nonce generation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/ring/docs/api/profile",children:(0,r.jsx)(n.code,{children:"/api/profile"})})," - User profile management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/ring/docs/api/admin/set-user-role",children:(0,r.jsx)(n.code,{children:"/api/set-user-role"})})," - Role assignment"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(n.h3,{id:"test-accounts",children:"Test Accounts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Development test accounts\nconst testAccounts = {\n  admin: { email: 'admin@ring.ck.ua', password: 'admin123' },\n  member: { email: 'member@ring.ck.ua', password: 'member123' },\n  subscriber: { email: 'subscriber@ring.ck.ua', password: 'subscriber123' }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"describe('Authentication API', () => {\n  test('should authenticate with valid credentials', async () => {\n    const response = await signIn('credentials', {\n      email: 'test@example.com',\n      password: 'password123',\n      redirect: false\n    })\n    \n    expect(response?.ok).toBe(true)\n    expect(response?.error).toBeNull()\n  })\n  \n  test('should reject invalid credentials', async () => {\n    const response = await signIn('credentials', {\n      email: 'test@example.com',\n      password: 'wrongpassword',\n      redirect: false\n    })\n    \n    expect(response?.ok).toBe(false)\n    expect(response?.error).toBe('CredentialsSignin')\n  })\n})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),': "CSRF token mismatch"\n',(0,r.jsx)(n.strong,{children:"Solution"}),": Ensure CSRF token is included in requests and matches server-generated token"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),': "OAuth account not linked"\n',(0,r.jsx)(n.strong,{children:"Solution"}),": User needs to sign in with original provider or link accounts manually"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),': "Session not found"\n',(0,r.jsx)(n.strong,{children:"Solution"}),": Check cookie settings and ensure session hasn't expired"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),': "MetaMask connection failed"\n',(0,r.jsx)(n.strong,{children:"Solution"}),": Verify MetaMask is installed and user has approved connection"]}),"\n",(0,r.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Enable debug logging\nexport default NextAuth({\n  debug: process.env.NODE_ENV === 'development',\n  logger: {\n    error(code, metadata) {\n      console.error('NextAuth Error:', code, metadata)\n    },\n    warn(code) {\n      console.warn('NextAuth Warning:', code)\n    },\n    debug(code, metadata) {\n      console.debug('NextAuth Debug:', code, metadata)\n    }\n  }\n})\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);