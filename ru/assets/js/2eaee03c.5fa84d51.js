"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[7823],{58732:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"api/entities-delete","title":"Entity Deletion API","description":"Overview","source":"@site/docs/api/entities-delete.md","sourceDirName":"api","slug":"/api/entities-delete","permalink":"/ring/ru/docs/api/entities-delete","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/api/entities-delete.md","tags":[],"version":"current","lastUpdatedAt":1750259184000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Entity Update API","permalink":"/ring/ru/docs/api/entities-update"},"next":{"title":"Entities Upload API","permalink":"/ring/ru/docs/api/entities-upload"}}');var s=i(74848),r=i(28453);const l={},o="Entity Deletion API",d={},a=[{value:"Overview",id:"overview",level:2},{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"Ring Platform Concepts",id:"ring-platform-concepts",level:2},{value:"What are Entities?",id:"what-are-entities",level:3},{value:"Entity Deletion Impact",id:"entity-deletion-impact",level:3},{value:"URL Parameters",id:"url-parameters",level:2},{value:"Authentication Requirements",id:"authentication-requirements",level:2},{value:"Request Format",id:"request-format",level:2},{value:"Headers",id:"headers",level:3},{value:"Example Request",id:"example-request",level:3},{value:"Response Format",id:"response-format",level:2},{value:"Success Response (200 OK)",id:"success-response-200-ok",level:3},{value:"Error Responses",id:"error-responses",level:3},{value:"400 Bad Request - Invalid ID",id:"400-bad-request---invalid-id",level:4},{value:"401 Unauthorized",id:"401-unauthorized",level:4},{value:"403 Forbidden - Insufficient Permissions",id:"403-forbidden---insufficient-permissions",level:4},{value:"404 Not Found",id:"404-not-found",level:4},{value:"500 Internal Server Error",id:"500-internal-server-error",level:4},{value:"Code Examples",id:"code-examples",level:2},{value:"JavaScript/TypeScript",id:"javascripttypescript",level:3},{value:"React Hook Example",id:"react-hook-example",level:3},{value:"cURL Example",id:"curl-example",level:3},{value:"Python Example",id:"python-example",level:3},{value:"Authorization Logic",id:"authorization-logic",level:2},{value:"Permission Hierarchy",id:"permission-hierarchy",level:3},{value:"Authorization Checks",id:"authorization-checks",level:3},{value:"Business Logic",id:"business-logic",level:2},{value:"Cascade Deletion Effects",id:"cascade-deletion-effects",level:3},{value:"Audit Trail",id:"audit-trail",level:3},{value:"Validation Rules",id:"validation-rules",level:2},{value:"Pre-deletion Checks",id:"pre-deletion-checks",level:3},{value:"Safety Measures",id:"safety-measures",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Error Scenarios",id:"common-error-scenarios",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Testing Examples",id:"testing-examples",level:2},{value:"Unit Test Example",id:"unit-test-example",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"For Developers",id:"for-developers",level:3},{value:"For Administrators",id:"for-administrators",level:3},{value:"Changelog",id:"changelog",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"entity-deletion-api",children:"Entity Deletion API"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Entity Deletion API allows authorized users to permanently remove entities from the Ring Platform. This endpoint implements strict authorization controls and audit logging to ensure only appropriate users can delete entities."}),"\n",(0,s.jsx)(n.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"URL"}),": ",(0,s.jsx)(n.code,{children:"/api/entities/delete/[id]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Method"}),": ",(0,s.jsx)(n.code,{children:"DELETE"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authentication"}),": Required (JWT Token)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authorization"}),": Entity owner, ADMIN, or CONFIDENTIAL role"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rate Limit"}),": 10 requests per minute"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"ring-platform-concepts",children:"Ring Platform Concepts"}),"\n",(0,s.jsx)(n.h3,{id:"what-are-entities",children:"What are Entities?"}),"\n",(0,s.jsxs)(n.p,{children:["In Ring Platform, ",(0,s.jsx)(n.strong,{children:"Entities"})," represent organizations, companies, and institutions within the professional networking ecosystem:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"26 Industry Types"}),": From 3D printing to quantum computing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rich Metadata"}),": Certifications, partnerships, employee count, founding year"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Visibility Tiers"}),": Public, subscriber, member, confidential access levels"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Social Integration"}),": LinkedIn, Twitter, Facebook, Instagram connections"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Member Networks"}),": Connected users and opportunity listings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Management"}),": Upcoming events and announcements"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"entity-deletion-impact",children:"Entity Deletion Impact"}),"\n",(0,s.jsx)(n.p,{children:"Deleting an entity has cascading effects across the platform:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Opportunities"}),": All linked opportunities are affected"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Members"}),": User associations are updated"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Events"}),": Upcoming events are cancelled"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Partnerships"}),": Cross-entity relationships are severed"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"url-parameters",children:"URL Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"})," (string, required): The unique identifier of the entity to delete"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"authentication-requirements",children:"Authentication Requirements"}),"\n",(0,s.jsx)(n.p,{children:"This endpoint requires authentication with one of the following permissions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Entity Owner"}),": User who created the entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ADMIN"}),": Full platform administration access"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CONFIDENTIAL"}),": Premium access with entity management rights"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"request-format",children:"Request Format"}),"\n",(0,s.jsx)(n.h3,{id:"headers",children:"Headers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"DELETE /api/entities/delete/{entity_id}\nAuthorization: Bearer <jwt_token>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-request",children:"Example Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"DELETE /api/entities/delete/entity_123456789\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n"})}),"\n",(0,s.jsx)(n.h2,{id:"response-format",children:"Response Format"}),"\n",(0,s.jsx)(n.h3,{id:"success-response-200-ok",children:"Success Response (200 OK)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Entity deleted successfully"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"error-responses",children:"Error Responses"}),"\n",(0,s.jsx)(n.h4,{id:"400-bad-request---invalid-id",children:"400 Bad Request - Invalid ID"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Invalid ID parameter"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"401-unauthorized",children:"401 Unauthorized"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Unauthorized"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"403-forbidden---insufficient-permissions",children:"403 Forbidden - Insufficient Permissions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Access denied: Forbidden"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"404-not-found",children:"404 Not Found"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Entity not found"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"500-internal-server-error",children:"500 Internal Server Error"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Unable to delete entity: Internal Server Error"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,s.jsx)(n.h3,{id:"javascripttypescript",children:"JavaScript/TypeScript"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async function deleteEntity(entityId: string, token: string): Promise<void> {\n  const response = await fetch(`/api/entities/delete/${entityId}`, {\n    method: 'DELETE',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Failed to delete entity');\n  }\n\n  const result = await response.json();\n  console.log(result.message);\n}\n\n// Usage\ntry {\n  await deleteEntity('entity_123456789', userToken);\n  console.log('Entity deleted successfully');\n} catch (error) {\n  console.error('Deletion failed:', error.message);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"react-hook-example",children:"React Hook Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { useState } from 'react';\n\ninterface UseEntityDeletionResult {\n  deleteEntity: (entityId: string) => Promise<void>;\n  isDeleting: boolean;\n  error: string | null;\n}\n\nfunction useEntityDeletion(): UseEntityDeletionResult {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const deleteEntity = async (entityId: string) => {\n    setIsDeleting(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`/api/entities/delete/${entityId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${getAuthToken()}`\n        }\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error);\n      }\n\n      // Optionally refresh entity list or redirect\n      window.location.href = '/entities';\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n      throw err;\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  return { deleteEntity, isDeleting, error };\n}\n\n// Usage in component\nfunction EntityDeleteButton({ entityId }: { entityId: string }) {\n  const { deleteEntity, isDeleting, error } = useEntityDeletion();\n\n  const handleDelete = async () => {\n    if (confirm('Are you sure you want to delete this entity? This action cannot be undone.')) {\n      try {\n        await deleteEntity(entityId);\n      } catch (error) {\n        // Error is handled by the hook\n      }\n    }\n  };\n\n  return (\n    <div>\n      <button \n        onClick={handleDelete} \n        disabled={isDeleting}\n        className=\"bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 disabled:opacity-50\"\n      >\n        {isDeleting ? 'Deleting...' : 'Delete Entity'}\n      </button>\n      {error && (\n        <div className=\"text-red-600 mt-2\">\n          Error: {error}\n        </div>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"curl-example",children:"cURL Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Delete entity\ncurl -X DELETE https://ring.ck.ua/api/entities/delete/entity_123456789 \\\n  -H "Authorization: Bearer YOUR_JWT_TOKEN"\n\n# Expected response\n# {"message":"Entity deleted successfully"}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"python-example",children:"Python Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import requests\n\ndef delete_entity(entity_id: str, token: str) -> bool:\n    """Delete an entity by ID"""\n    url = f"https://ring.ck.ua/api/entities/delete/{entity_id}"\n    headers = {\n        "Authorization": f"Bearer {token}"\n    }\n    \n    response = requests.delete(url, headers=headers)\n    \n    if response.status_code == 200:\n        result = response.json()\n        print(f"Success: {result[\'message\']}")\n        return True\n    elif response.status_code == 401:\n        raise PermissionError("Unauthorized - check your authentication token")\n    elif response.status_code == 403:\n        raise PermissionError("Forbidden - insufficient permissions to delete this entity")\n    elif response.status_code == 404:\n        raise ValueError("Entity not found")\n    else:\n        response.raise_for_status()\n\n# Usage\ntry:\n    success = delete_entity("entity_123456789", "your_jwt_token")\n    if success:\n        print("Entity deleted successfully")\nexcept Exception as e:\n    print(f"Error: {e}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"authorization-logic",children:"Authorization Logic"}),"\n",(0,s.jsx)(n.h3,{id:"permission-hierarchy",children:"Permission Hierarchy"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Entity Owner"}),": User who originally created the entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ADMIN Role"}),": Full platform administration access"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CONFIDENTIAL Role"}),": Premium access with entity management rights"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"authorization-checks",children:"Authorization Checks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Simplified authorization logic\nfunction canDeleteEntity(user: User, entity: Entity): boolean {\n  // Admin can delete any entity\n  if (user.role === 'admin') return true;\n  \n  // Confidential role can delete entities\n  if (user.role === 'confidential') return true;\n  \n  // Entity owner can delete their own entity\n  if (entity.addedBy === user.id) return true;\n  \n  return false;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"business-logic",children:"Business Logic"}),"\n",(0,s.jsx)(n.h3,{id:"cascade-deletion-effects",children:"Cascade Deletion Effects"}),"\n",(0,s.jsx)(n.p,{children:"When an entity is deleted, the following related data is affected:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Opportunities"}),": All opportunities linked to the entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memberships"}),": User-entity associations are removed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Events"}),": Upcoming events hosted by the entity are cancelled"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Partnerships"}),": Cross-entity relationships are severed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Media"}),": Entity logos and gallery images are marked for cleanup"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"audit-trail",children:"Audit Trail"}),"\n",(0,s.jsx)(n.p,{children:"All entity deletions are logged with:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User ID"}),": Who performed the deletion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Entity ID"}),": Which entity was deleted"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Timestamp"}),": When the deletion occurred"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"IP Address"}),": Source of the deletion request"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reason"}),": Optional deletion reason (if provided)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"validation-rules",children:"Validation Rules"}),"\n",(0,s.jsx)(n.h3,{id:"pre-deletion-checks",children:"Pre-deletion Checks"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Entity must exist and be accessible"}),"\n",(0,s.jsx)(n.li,{children:"User must have appropriate permissions"}),"\n",(0,s.jsx)(n.li,{children:"Entity must not have active dependencies (configurable)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"safety-measures",children:"Safety Measures"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Soft Delete Option"}),": Some implementations may use soft deletion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backup Creation"}),": Entity data may be archived before deletion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Confirmation Required"}),": UI should require explicit confirmation"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.h3,{id:"common-error-scenarios",children:"Common Error Scenarios"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Invalid Entity ID"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Status: 400"}),"\n",(0,s.jsx)(n.li,{children:"Cause: Malformed or missing entity ID"}),"\n",(0,s.jsx)(n.li,{children:"Solution: Verify entity ID format and existence"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Unauthorized Access"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Status: 401"}),"\n",(0,s.jsx)(n.li,{children:"Cause: Missing or invalid authentication token"}),"\n",(0,s.jsx)(n.li,{children:"Solution: Ensure valid JWT token is provided"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Insufficient Permissions"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Status: 403"}),"\n",(0,s.jsx)(n.li,{children:"Cause: User lacks permission to delete the entity"}),"\n",(0,s.jsx)(n.li,{children:"Solution: Contact admin or entity owner"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Entity Not Found"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Status: 404"}),"\n",(0,s.jsx)(n.li,{children:"Cause: Entity doesn't exist or was already deleted"}),"\n",(0,s.jsx)(n.li,{children:"Solution: Verify entity ID and check if already deleted"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Server Error"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Status: 500"}),"\n",(0,s.jsx)(n.li,{children:"Cause: Database error or system failure"}),"\n",(0,s.jsx)(n.li,{children:"Solution: Retry request or contact support"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authentication Required"}),": All requests must include valid JWT token"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authorization Checks"}),": Strict permission validation before deletion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Audit Logging"}),": All deletion attempts are logged for security monitoring"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rate Limiting"}),": Prevents abuse with 10 requests per minute limit"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Input Validation"}),": Entity ID format validation to prevent injection attacks"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"testing-examples",children:"Testing Examples"}),"\n",(0,s.jsx)(n.h3,{id:"unit-test-example",children:"Unit Test Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"describe('DELETE /api/entities/delete/[id]', () => {\n  it('should delete entity successfully for admin user', async () => {\n    const response = await request(app)\n      .delete('/api/entities/delete/entity_123')\n      .set('Authorization', `Bearer ${adminToken}`)\n      .expect(200);\n\n    expect(response.body).toHaveProperty('message');\n    expect(response.body.message).toBe('Entity deleted successfully');\n  });\n\n  it('should return 403 for unauthorized user', async () => {\n    const response = await request(app)\n      .delete('/api/entities/delete/entity_123')\n      .set('Authorization', `Bearer ${regularUserToken}`)\n      .expect(403);\n\n    expect(response.body.error).toContain('Access denied');\n  });\n\n  it('should return 404 for non-existent entity', async () => {\n    const response = await request(app)\n      .delete('/api/entities/delete/nonexistent_id')\n      .set('Authorization', `Bearer ${adminToken}`)\n      .expect(404);\n\n    expect(response.body.error).toBe('Entity not found');\n  });\n\n  it('should return 400 for invalid entity ID', async () => {\n    const response = await request(app)\n      .delete('/api/entities/delete/')\n      .set('Authorization', `Bearer ${adminToken}`)\n      .expect(400);\n\n    expect(response.body.error).toBe('Invalid ID parameter');\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/entities-get-by-id",children:"Get Entity Details"})," - Retrieve entity information"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/entities-update",children:"Update Entity"})," - Modify entity details"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/entities-create",children:"Create Entity"})," - Create new entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/entities-list",children:"List Entities"})," - Browse all entities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/api/entities-upload",children:"Entity Upload"})," - Upload entity files"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"for-developers",children:"For Developers"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Confirmation UI"}),": Always require user confirmation before deletion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Implement comprehensive error handling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Loading States"}),": Show loading indicators during deletion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Success Feedback"}),": Provide clear success/failure feedback"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Navigation"}),": Redirect users appropriately after deletion"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"for-administrators",children:"For Administrators"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backup Strategy"}),": Ensure entity data is backed up before deletion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Audit Review"}),": Regularly review deletion logs for suspicious activity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Permission Management"}),": Carefully manage who has deletion permissions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Recovery Plan"}),": Have procedures for recovering accidentally deleted entities"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v1.0.0"})," - Initial implementation with basic deletion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v1.1.0"})," - Added authorization checks and audit logging"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v1.2.0"})," - Enhanced error handling and validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v1.3.0"})," - Added cascade deletion effects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v1.4.0"})," - Improved security and rate limiting"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var t=i(96540);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);