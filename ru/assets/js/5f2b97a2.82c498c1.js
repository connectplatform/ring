"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[4903],{4871:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api/wallet-list","title":"List User Wallets API","description":"This API endpoint allows authenticated users to retrieve a list of all Ethereum wallets associated with their account, including the primary wallet and any additional wallets.","source":"@site/docs/api/wallet-list.md","sourceDirName":"api","slug":"/api/wallet-list","permalink":"/ring/ru/docs/api/wallet-list","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/api/wallet-list.md","tags":[],"version":"current","lastUpdatedAt":1733486397000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"apiSidebar","previous":{"title":"Wallet Creation API","permalink":"/ring/ru/docs/api/ensure-wallet"},"next":{"title":"Create Additional Wallet API","permalink":"/ring/ru/docs/api/create-additional"}}');var s=t(4848),r=t(8453);const a={sidebar_position:4},l="List User Wallets API",o={},d=[{value:"Endpoint",id:"endpoint",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Request",id:"request",level:2},{value:"Response",id:"response",level:2},{value:"Error Responses",id:"error-responses",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"list-user-wallets-api",children:"List User Wallets API"})}),"\n",(0,s.jsx)(n.p,{children:"This API endpoint allows authenticated users to retrieve a list of all Ethereum wallets associated with their account, including the primary wallet and any additional wallets."}),"\n",(0,s.jsx)(n.h2,{id:"endpoint",children:"Endpoint"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("span",{class:"api-method api-method--get",children:"GET"})," ",(0,s.jsx)(n.code,{children:"/api/wallet/list"})]}),"\n",(0,s.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,s.jsx)(n.p,{children:"This endpoint requires authentication. Ensure that the user is logged in and has a valid session."}),"\n",(0,s.jsx)(n.h2,{id:"request",children:"Request"}),"\n",(0,s.jsx)(n.p,{children:"This endpoint does not require any parameters in the request body or query string. The user's information is obtained from the authenticated session."}),"\n",(0,s.jsx)(n.h2,{id:"response",children:"Response"}),"\n",(0,s.jsx)(n.p,{children:"The API returns a JSON object with the following structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"{\n  wallets: Array<{\n    address: string;\n    isPrimary: boolean;\n  }>\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Where:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"wallets"})," is an array of wallet objects."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Each wallet object contains:"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"address"}),": The Ethereum wallet address."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"isPrimary"}),": A boolean indicating whether this is the user's primary wallet."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{title:"Usage Example",type:"tip",children:[(0,s.jsx)(n.p,{children:"Retrieve the list of wallets for the authenticated user:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const response = await fetch('/api/wallet/list', {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\nconst data = await response.json();\nconsole.log(data.wallets); // Array of user's wallets\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"error-responses",children:"Error Responses"}),"\n",(0,s.jsx)(n.p,{children:"The API may return the following error responses:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"401 Unauthorized"}),": If the user is not authenticated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"404 Not Found"}),": If the authenticated user's data is not found in the database."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"500 Internal Server Error"}),": If there's an error fetching the user's wallet data from the database."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Implementation Details",type:"note",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The endpoint first checks if the user is authenticated using the ",(0,s.jsx)(n.code,{children:"auth()"})," function."]}),"\n",(0,s.jsx)(n.li,{children:"It then retrieves the user's data from the Firebase Admin database."}),"\n",(0,s.jsxs)(n.li,{children:["The primary wallet is identified and marked with ",(0,s.jsx)(n.code,{children:"isPrimary: true"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Any additional wallets are extracted from the ",(0,s.jsx)(n.code,{children:"additionalWallets"})," array in the user data."]}),"\n",(0,s.jsx)(n.li,{children:"All wallets are combined into a single array and returned to the client."}),"\n"]})}),"\n",(0,s.jsx)(n.admonition,{title:"Security Note",type:"caution",children:(0,s.jsx)(n.p,{children:"Ensure that proper authentication and authorization checks are in place to prevent unauthorized access to user wallet information."})}),"\n",(0,s.jsx)(n.admonition,{title:"Best Practices",type:"info",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Implement proper error handling in your client-side code to manage potential API errors."}),"\n",(0,s.jsx)(n.li,{children:"Consider implementing rate limiting to prevent abuse of this endpoint."}),"\n",(0,s.jsx)(n.li,{children:"Cache the wallet list results for a short period to reduce database load and improve response times."}),"\n",(0,s.jsx)(n.li,{children:"Regularly audit and clean up unused or inactive additional wallets to maintain data hygiene."}),"\n"]})}),"\n",(0,s.jsx)(n.admonition,{title:"Limitations",type:"warning",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"This API currently only lists Ethereum-compatible wallets."}),"\n",(0,s.jsx)(n.li,{children:"The API does not provide balance information for the wallets. To get balance information, you would need to call the balance API for each wallet separately."}),"\n",(0,s.jsx)(n.li,{children:"The order of additional wallets in the list is not guaranteed and may change between calls."}),"\n"]})}),"\n",(0,s.jsx)(n.p,{children:"Stay tuned for updates and feel free to provide feedback for improvements!"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);