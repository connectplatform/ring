"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[8149],{24260:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api/admin-users-verification","title":"Admin User Verification API","description":"Overview","source":"@site/docs/api/admin-users-verification.md","sourceDirName":"api","slug":"/api/admin-users-verification","permalink":"/ring/ru/docs/api/admin-users-verification","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/api/admin-users-verification.md","tags":[],"version":"current","lastUpdatedAt":1750255417000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"Admin User Management","permalink":"/ring/ru/docs/api/admin-users"},"next":{"title":"Entities List API","permalink":"/ring/ru/docs/api/entities-list"}}');var i=s(74848),t=s(28453);const a={},o="Admin User Verification API",d={},l=[{value:"Overview",id:"overview",level:2},{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"URL Parameters",id:"url-parameters",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Request Body",id:"request-body",level:2},{value:"Example Request",id:"example-request",level:3},{value:"Response Format",id:"response-format",level:2},{value:"Success Response (200)",id:"success-response-200",level:3},{value:"Error Responses",id:"error-responses",level:3},{value:"Unauthorized (401)",id:"unauthorized-401",level:4},{value:"Bad Request (400)",id:"bad-request-400",level:4},{value:"Internal Server Error (500)",id:"internal-server-error-500",level:4},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"React Admin Component",id:"react-admin-component",level:3},{value:"Admin User Management Table",id:"admin-user-management-table",level:3},{value:"Custom Hook for Admin Operations",id:"custom-hook-for-admin-operations",level:3},{value:"Server Action (Next.js 13+)",id:"server-action-nextjs-13",level:3},{value:"cURL Example",id:"curl-example",level:3},{value:"Business Logic",id:"business-logic",level:2},{value:"Database Schema",id:"database-schema",level:2},{value:"User Document Structure",id:"user-document-structure",level:3},{value:"After Verification Update",id:"after-verification-update",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Performance Notes",id:"performance-notes",level:2},{value:"Rate Limiting",id:"rate-limiting",level:2},{value:"Audit Logging",id:"audit-logging",level:2},{value:"Testing",id:"testing",level:2},{value:"Unit Test Example",id:"unit-test-example",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"admin-user-verification-api",children:"Admin User Verification API"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Admin User Verification API"})," allows administrators to manage user verification status. This endpoint enables admins to verify or unverify users, which affects their access levels and trust indicators throughout the platform."]}),"\n",(0,i.jsx)(n.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"URL"}),": ",(0,i.jsx)(n.code,{children:"/api/admin/users/[id]/verification"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Method"}),": ",(0,i.jsx)(n.code,{children:"PUT"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authentication"}),": Required (Admin role)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Content-Type"}),": ",(0,i.jsx)(n.code,{children:"application/json"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"url-parameters",children:"URL Parameters"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"The unique identifier of the user to update verification status"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,i.jsxs)(n.p,{children:["This endpoint requires admin authentication. Only users with the ",(0,i.jsx)(n.code,{children:"admin"})," role can access this endpoint:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { getSession } from 'next-auth/react'\n\nconst session = await getSession()\nif (!session || session.user.role !== 'admin') {\n  // Handle unauthorized access\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"request-body",children:"Request Body"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"isVerified"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"The verification status to set for the user"})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"example-request",children:"Example Request"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "isVerified": true\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"response-format",children:"Response Format"}),"\n",(0,i.jsx)(n.h3,{id:"success-response-200",children:"Success Response (200)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "message": "User verification status updated successfully"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"error-responses",children:"Error Responses"}),"\n",(0,i.jsx)(n.h4,{id:"unauthorized-401",children:"Unauthorized (401)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Unauthorized"\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"bad-request-400",children:"Bad Request (400)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Invalid verification status"\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"internal-server-error-500",children:"Internal Server Error (500)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Internal server error"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,i.jsx)(n.h3,{id:"react-admin-component",children:"React Admin Component"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useState } from 'react'\nimport { useSession } from 'next-auth/react'\n\ninterface User {\n  id: string\n  email: string\n  name: string\n  isVerified: boolean\n  role: string\n  createdAt: string\n}\n\nfunction UserVerificationToggle({ user, onUpdate }: { \n  user: User\n  onUpdate: (userId: string, isVerified: boolean) => void \n}) {\n  const { data: session } = useSession()\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const handleToggleVerification = async () => {\n    if (!session || session.user.role !== 'admin') return\n\n    setLoading(true)\n    setError(null)\n\n    const newVerificationStatus = !user.isVerified\n\n    try {\n      const response = await fetch(`/api/admin/users/${user.id}/verification`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          isVerified: newVerificationStatus\n        }),\n      })\n\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.error || 'Failed to update verification status')\n      }\n\n      onUpdate(user.id, newVerificationStatus)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (session?.user.role !== 'admin') {\n    return (\n      <span className={`px-2 py-1 text-xs rounded-full ${\n        user.isVerified \n          ? 'bg-green-100 text-green-800' \n          : 'bg-gray-100 text-gray-800'\n      }`}>\n        {user.isVerified ? 'Verified' : 'Unverified'}\n      </span>\n    )\n  }\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <button\n        onClick={handleToggleVerification}\n        disabled={loading}\n        className={`px-3 py-1 text-sm rounded transition-colors ${\n          user.isVerified\n            ? 'bg-green-500 text-white hover:bg-green-600'\n            : 'bg-gray-300 text-gray-700 hover:bg-gray-400'\n        } disabled:opacity-50`}\n      >\n        {loading ? 'Updating...' : user.isVerified ? 'Verified' : 'Unverified'}\n      </button>\n\n      {error && (\n        <span className=\"text-xs text-red-600\">{error}</span>\n      )}\n    </div>\n  )\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"admin-user-management-table",children:"Admin User Management Table"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { useState, useEffect } from \'react\'\nimport { useSession } from \'next-auth/react\'\n\nfunction AdminUserTable() {\n  const { data: session } = useSession()\n  const [users, setUsers] = useState<User[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    if (!session || session.user.role !== \'admin\') return\n\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch(\'/api/admin/users\')\n        if (!response.ok) throw new Error(\'Failed to fetch users\')\n        \n        const data = await response.json()\n        setUsers(data.users)\n      } catch (err) {\n        setError(err instanceof Error ? err.message : \'Unknown error\')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchUsers()\n  }, [session])\n\n  const handleVerificationUpdate = (userId: string, isVerified: boolean) => {\n    setUsers(prev => \n      prev.map(user => \n        user.id === userId \n          ? { ...user, isVerified }\n          : user\n      )\n    )\n  }\n\n  if (session?.user.role !== \'admin\') {\n    return <div className="text-red-500">Access denied. Admin role required.</div>\n  }\n\n  if (loading) return <div>Loading users...</div>\n  if (error) return <div className="text-red-500">Error: {error}</div>\n\n  return (\n    <div className="overflow-x-auto">\n      <table className="min-w-full divide-y divide-gray-200">\n        <thead className="bg-gray-50">\n          <tr>\n            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">\n              User\n            </th>\n            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">\n              Role\n            </th>\n            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">\n              Verification\n            </th>\n            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">\n              Actions\n            </th>\n          </tr>\n        </thead>\n        <tbody className="bg-white divide-y divide-gray-200">\n          {users.map((user) => (\n            <tr key={user.id}>\n              <td className="px-6 py-4 whitespace-nowrap">\n                <div className="flex items-center">\n                  <div className="flex-shrink-0 h-10 w-10">\n                    <div className="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">\n                      <span className="text-sm font-medium text-gray-700">\n                        {user.name?.charAt(0).toUpperCase() || user.email.charAt(0).toUpperCase()}\n                      </span>\n                    </div>\n                  </div>\n                  <div className="ml-4">\n                    <div className="text-sm font-medium text-gray-900">{user.name || \'No name\'}</div>\n                    <div className="text-sm text-gray-500">{user.email}</div>\n                  </div>\n                </div>\n              </td>\n              <td className="px-6 py-4 whitespace-nowrap">\n                <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">\n                  {user.role}\n                </span>\n              </td>\n              <td className="px-6 py-4 whitespace-nowrap">\n                <UserVerificationToggle \n                  user={user} \n                  onUpdate={handleVerificationUpdate}\n                />\n              </td>\n              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">\n                <div className="flex space-x-2">\n                  <button className="text-indigo-600 hover:text-indigo-900">\n                    Edit\n                  </button>\n                  <button className="text-red-600 hover:text-red-900">\n                    Delete\n                  </button>\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-hook-for-admin-operations",children:"Custom Hook for Admin Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useState, useCallback } from 'react'\nimport { useSession } from 'next-auth/react'\n\nexport function useAdminUserOperations() {\n  const { data: session } = useSession()\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const updateVerificationStatus = useCallback(async (\n    userId: string, \n    isVerified: boolean\n  ) => {\n    if (!session || session.user.role !== 'admin') {\n      return { success: false, error: 'Unauthorized' }\n    }\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      const response = await fetch(`/api/admin/users/${userId}/verification`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ isVerified }),\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.error || 'Failed to update verification status')\n      }\n\n      return { success: true }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred'\n      setError(errorMessage)\n      return { success: false, error: errorMessage }\n    } finally {\n      setLoading(false)\n    }\n  }, [session])\n\n  const batchUpdateVerification = useCallback(async (\n    userIds: string[], \n    isVerified: boolean\n  ) => {\n    if (!session || session.user.role !== 'admin') {\n      return { success: false, error: 'Unauthorized' }\n    }\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      const results = await Promise.allSettled(\n        userIds.map(userId => \n          fetch(`/api/admin/users/${userId}/verification`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ isVerified }),\n          })\n        )\n      )\n\n      const failed = results.filter(r => r.status === 'rejected').length\n      const successful = results.length - failed\n\n      if (failed > 0) {\n        throw new Error(`${failed} out of ${results.length} operations failed`)\n      }\n\n      return { \n        success: true, \n        message: `Successfully updated ${successful} users` \n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred'\n      setError(errorMessage)\n      return { success: false, error: errorMessage }\n    } finally {\n      setLoading(false)\n    }\n  }, [session])\n\n  return {\n    updateVerificationStatus,\n    batchUpdateVerification,\n    loading,\n    error,\n    clearError: () => setError(null)\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"server-action-nextjs-13",children:"Server Action (Next.js 13+)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"'use server'\n\nimport { auth } from '@/auth'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function updateUserVerificationAction(\n  userId: string, \n  isVerified: boolean\n) {\n  const session = await auth()\n  \n  if (!session || session.user.role !== 'admin') {\n    redirect('/unauthorized')\n  }\n\n  try {\n    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/users/${userId}/verification`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Cookie': request.headers.get('cookie') || '',\n      },\n      body: JSON.stringify({ isVerified }),\n    })\n\n    if (!response.ok) {\n      const error = await response.json()\n      throw new Error(error.error || 'Failed to update verification status')\n    }\n\n    // Revalidate admin pages\n    revalidatePath('/admin/users')\n    revalidatePath(`/admin/users/${userId}`)\n    \n    return { success: true }\n    \n  } catch (error) {\n    console.error('Server action error:', error)\n    throw error\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"curl-example",children:"cURL Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Verify a user\ncurl -X PUT https://ring.ck.ua/api/admin/users/user123/verification \\\n  -H "Content-Type: application/json" \\\n  -H "Cookie: next-auth.session-token=your-admin-session-token" \\\n  -d \'{\n    "isVerified": true\n  }\'\n\n# Unverify a user\ncurl -X PUT https://ring.ck.ua/api/admin/users/user123/verification \\\n  -H "Content-Type: application/json" \\\n  -H "Cookie: next-auth.session-token=your-admin-session-token" \\\n  -d \'{\n    "isVerified": false\n  }\'\n'})}),"\n",(0,i.jsx)(n.h2,{id:"business-logic",children:"Business Logic"}),"\n",(0,i.jsx)(n.p,{children:"The endpoint performs the following operations:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authentication Check"}),": Verifies admin session"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Role Authorization"}),": Ensures user has admin role"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Input Validation"}),": Validates the isVerified boolean value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User Lookup"}),": Verifies the target user exists"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database Update"}),": Updates user verification status and timestamp"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Response"}),": Returns success confirmation"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,i.jsx)(n.h3,{id:"user-document-structure",children:"User Document Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "id": "user123",\n  "email": "user@example.com",\n  "name": "John Doe",\n  "role": "member",\n  "isVerified": false,\n  "createdAt": "2024-01-15T10:30:00Z",\n  "updatedAt": "2024-01-15T10:30:00Z"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"after-verification-update",children:"After Verification Update"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "id": "user123",\n  "email": "user@example.com",\n  "name": "John Doe",\n  "role": "member",\n  "isVerified": true,\n  "verifiedAt": "2024-01-15T14:22:00Z",\n  "verifiedBy": "admin456",\n  "createdAt": "2024-01-15T10:30:00Z",\n  "updatedAt": "2024-01-15T14:22:00Z"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Admin Only"}),": Requires admin role for access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Input Validation"}),": Validates boolean values strictly"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Audit Trail"}),": Tracks who performed the verification action and when"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Session Verification"}),": Ensures valid admin session before processing"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"performance-notes",children:"Performance Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single Query"}),": Efficient single document update"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Indexed Queries"}),": User ID lookups are indexed for performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Atomic Operations"}),": Uses atomic updates to prevent race conditions"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Admin-based"}),": 30 requests per minute per admin user"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Global"}),": 100 requests per minute across all admins"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"audit-logging",children:"Audit Logging"}),"\n",(0,i.jsx)(n.p,{children:"All verification status changes are logged for compliance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "action": "user_verification_updated",\n  "adminId": "admin456",\n  "targetUserId": "user123",\n  "previousStatus": false,\n  "newStatus": true,\n  "timestamp": "2024-01-15T14:22:00Z",\n  "ipAddress": "192.168.1.100",\n  "userAgent": "Mozilla/5.0..."\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.h3,{id:"unit-test-example",children:"Unit Test Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { PUT } from '@/app/api/admin/users/[id]/verification/route'\nimport { NextRequest } from 'next/server'\n\n// Mock authentication\njest.mock('next-auth/next')\n\ndescribe('/api/admin/users/[id]/verification', () => {\n  it('should update user verification status successfully', async () => {\n    // Mock admin session\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: { id: 'admin123', role: 'admin' }\n    })\n\n    const request = new NextRequest('http://localhost:3000/api/admin/users/user123/verification', {\n      method: 'PUT',\n      body: JSON.stringify({ isVerified: true })\n    })\n\n    const response = await PUT(request, { params: Promise.resolve({ id: 'user123' }) })\n    const data = await response.json()\n\n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    expect(data.message).toBe('User verification status updated successfully')\n  })\n\n  it('should reject non-admin users', async () => {\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: { id: 'user123', role: 'member' }\n    })\n\n    const request = new NextRequest('http://localhost:3000/api/admin/users/user123/verification', {\n      method: 'PUT',\n      body: JSON.stringify({ isVerified: true })\n    })\n\n    const response = await PUT(request, { params: Promise.resolve({ id: 'user123' }) })\n\n    expect(response.status).toBe(401)\n  })\n})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/admin-users",children:(0,i.jsx)(n.code,{children:"GET /api/admin/users"})})," - List all users (admin)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/admin-users",children:(0,i.jsx)(n.code,{children:"GET /api/admin/users/[id]"})})," - Get specific user details (admin)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/set-user-role",children:(0,i.jsx)(n.code,{children:"PUT /api/admin/users/[id]/role"})})," - Update user role (admin)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/profile",children:(0,i.jsx)(n.code,{children:"GET /api/profile"})})," - Get user profile information"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(96540);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);