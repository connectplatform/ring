"use strict";(self.webpackChunkring_docs=self.webpackChunkring_docs||[]).push([[4858],{94673:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api/settings","title":"User Settings Management","description":"Overview","source":"@site/docs/api/settings.md","sourceDirName":"api","slug":"/api/settings","permalink":"/ring/ru/docs/api/settings","draft":false,"unlisted":false,"editUrl":"https://github.com/connectplatform/ring/ring-docs/tree/main/docs/api/settings.md","tags":[],"version":"current","lastUpdatedAt":1750255417000,"frontMatter":{},"sidebar":"apiSidebar","previous":{"title":"User Profile Management","permalink":"/ring/ru/docs/api/profile"},"next":{"title":"User Role Assignment","permalink":"/ring/ru/docs/api/set-user-role"}}');var i=s(74848),r=s(28453);const a={},o="User Settings Management",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"Get User Settings",id:"get-user-settings",level:3},{value:"Update User Settings",id:"update-user-settings",level:3},{value:"Reset Settings to Default",id:"reset-settings-to-default",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"JavaScript/TypeScript",id:"javascripttypescript",level:3},{value:"React Settings Component",id:"react-settings-component",level:3},{value:"cURL Examples",id:"curl-examples",level:3},{value:"Settings Categories",id:"settings-categories",level:2},{value:"Preferences",id:"preferences",level:3},{value:"Notifications",id:"notifications",level:3},{value:"Privacy",id:"privacy",level:3},{value:"Security",id:"security",level:3},{value:"Content",id:"content",level:3},{value:"Accessibility",id:"accessibility",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Validation Errors (400)",id:"validation-errors-400",level:3},{value:"Unauthorized (401)",id:"unauthorized-401",level:3},{value:"Settings Not Found (404)",id:"settings-not-found-404",level:3},{value:"Default Settings",id:"default-settings",level:2},{value:"New User Defaults",id:"new-user-defaults",level:3},{value:"Related Endpoints",id:"related-endpoints",level:2},{value:"Testing",id:"testing",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"user-settings-management",children:"User Settings Management"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"/api/settings"})," endpoint manages user preferences, notification settings, privacy controls, and application configuration. This endpoint allows users to customize their Ring Platform experience according to their preferences."]}),"\n",(0,i.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Required"}),": Valid session token\n",(0,i.jsx)(n.strong,{children:"Roles"}),": All authenticated users\n",(0,i.jsx)(n.strong,{children:"Rate Limit"}),": 60 requests per minute per user"]}),"\n",(0,i.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,i.jsx)(n.h3,{id:"get-user-settings",children:"Get User Settings"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:"GET /api/settings\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Headers:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:"Authorization: Bearer <session-token>\nAccept: application/json\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Response (200):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "userId": "user_123",\n  "preferences": {\n    "language": "en",\n    "theme": "dark",\n    "timezone": "Europe/Kiev",\n    "dateFormat": "DD/MM/YYYY",\n    "timeFormat": "24h"\n  },\n  "notifications": {\n    "email": {\n      "enabled": true,\n      "frequency": "immediate",\n      "types": {\n        "news": true,\n        "opportunities": true,\n        "messages": true,\n        "systemUpdates": false,\n        "marketing": false\n      }\n    },\n    "push": {\n      "enabled": true,\n      "types": {\n        "messages": true,\n        "opportunities": true,\n        "news": false,\n        "systemUpdates": true\n      }\n    },\n    "sms": {\n      "enabled": false,\n      "types": {\n        "security": true,\n        "urgent": false\n      }\n    },\n    "inApp": {\n      "enabled": true,\n      "sound": true,\n      "badge": true\n    }\n  },\n  "privacy": {\n    "profileVisibility": "public",\n    "showEmail": false,\n    "showWalletAddress": false,\n    "showLocation": true,\n    "showCompany": true,\n    "showSocialLinks": true,\n    "allowDirectMessages": true,\n    "allowOpportunityInvites": true,\n    "searchableProfile": true\n  },\n  "security": {\n    "twoFactorEnabled": false,\n    "sessionTimeout": 30,\n    "loginNotifications": true,\n    "deviceTracking": true\n  },\n  "content": {\n    "autoplayVideos": false,\n    "showImages": true,\n    "contentLanguages": ["en", "uk"],\n    "hideNSFW": true\n  },\n  "accessibility": {\n    "highContrast": false,\n    "largeText": false,\n    "reducedMotion": false,\n    "screenReader": false\n  },\n  "updatedAt": "2024-12-14T15:45:00Z"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"update-user-settings",children:"Update User Settings"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:"PUT /api/settings\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Headers:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:"Authorization: Bearer <session-token>\nContent-Type: application/json\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Request Body (Partial Update):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "preferences": {\n    "language": "uk",\n    "theme": "light",\n    "timezone": "Europe/Kiev"\n  },\n  "notifications": {\n    "email": {\n      "enabled": true,\n      "frequency": "daily",\n      "types": {\n        "news": true,\n        "opportunities": true,\n        "marketing": false\n      }\n    },\n    "push": {\n      "enabled": false\n    }\n  },\n  "privacy": {\n    "profileVisibility": "private",\n    "showEmail": false,\n    "allowDirectMessages": false\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Response (200):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "message": "Settings updated successfully",\n  "data": {\n    "userId": "user_123",\n    "updatedAt": "2024-12-14T16:00:00Z",\n    "changedFields": [\n      "preferences.language",\n      "preferences.theme",\n      "notifications.email.frequency",\n      "notifications.push.enabled",\n      "privacy.profileVisibility",\n      "privacy.allowDirectMessages"\n    ]\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"reset-settings-to-default",children:"Reset Settings to Default"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:"POST /api/settings/reset\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Headers:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:"Authorization: Bearer <session-token>\nContent-Type: application/json\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Request Body:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "sections": ["notifications", "privacy"],\n  "confirmReset": true\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Response (200):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "message": "Settings reset to default values",\n  "data": {\n    "userId": "user_123",\n    "resetSections": ["notifications", "privacy"],\n    "resetAt": "2024-12-14T16:00:00Z"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,i.jsx)(n.h3,{id:"javascripttypescript",children:"JavaScript/TypeScript"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Settings management service\nclass SettingsService {\n  private baseUrl = '/api/settings'\n  \n  async getSettings() {\n    try {\n      const response = await fetch(this.baseUrl, {\n        headers: {\n          'Authorization': `Bearer ${this.getSessionToken()}`,\n          'Accept': 'application/json'\n        }\n      })\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch settings')\n      }\n      \n      return await response.json()\n    } catch (error) {\n      console.error('Error fetching settings:', error)\n      throw error\n    }\n  }\n  \n  async updateSettings(settings: Partial<UserSettings>) {\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${this.getSessionToken()}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(settings)\n      })\n      \n      if (!response.ok) {\n        throw new Error('Failed to update settings')\n      }\n      \n      return await response.json()\n    } catch (error) {\n      console.error('Error updating settings:', error)\n      throw error\n    }\n  }\n  \n  async updateNotificationSettings(notifications: NotificationSettings) {\n    return this.updateSettings({ notifications })\n  }\n  \n  async updatePrivacySettings(privacy: PrivacySettings) {\n    return this.updateSettings({ privacy })\n  }\n  \n  async updatePreferences(preferences: UserPreferences) {\n    return this.updateSettings({ preferences })\n  }\n  \n  async resetSettings(sections: string[] = []) {\n    try {\n      const response = await fetch(`${this.baseUrl}/reset`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.getSessionToken()}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          sections,\n          confirmReset: true\n        })\n      })\n      \n      if (!response.ok) {\n        throw new Error('Failed to reset settings')\n      }\n      \n      return await response.json()\n    } catch (error) {\n      console.error('Error resetting settings:', error)\n      throw error\n    }\n  }\n  \n  private getSessionToken(): string {\n    return localStorage.getItem('sessionToken') || ''\n  }\n}\n\n// Type definitions\ninterface UserSettings {\n  preferences: UserPreferences\n  notifications: NotificationSettings\n  privacy: PrivacySettings\n  security: SecuritySettings\n  content: ContentSettings\n  accessibility: AccessibilitySettings\n}\n\ninterface UserPreferences {\n  language: string\n  theme: 'light' | 'dark' | 'auto'\n  timezone: string\n  dateFormat: string\n  timeFormat: '12h' | '24h'\n}\n\ninterface NotificationSettings {\n  email: EmailNotifications\n  push: PushNotifications\n  sms: SMSNotifications\n  inApp: InAppNotifications\n}\n\n// Usage examples\nconst settingsService = new SettingsService()\n\n// Get current settings\nconst settings = await settingsService.getSettings()\n\n// Update theme preference\nawait settingsService.updatePreferences({\n  theme: 'dark',\n  language: 'uk'\n})\n\n// Disable email notifications\nawait settingsService.updateNotificationSettings({\n  email: { enabled: false }\n})\n\n// Update privacy settings\nawait settingsService.updatePrivacySettings({\n  profileVisibility: 'private',\n  showEmail: false\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"react-settings-component",children:"React Settings Component"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { useState, useEffect } from 'react'\nimport { useSession } from 'next-auth/react'\n\ninterface SettingsPageProps {\n  section?: 'preferences' | 'notifications' | 'privacy' | 'security'\n}\n\nexport function SettingsPage({ section = 'preferences' }: SettingsPageProps) {\n  const { data: session } = useSession()\n  const [settings, setSettings] = useState<UserSettings | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [message, setMessage] = useState('')\n  \n  useEffect(() => {\n    if (session?.user) {\n      fetchSettings()\n    }\n  }, [session])\n  \n  const fetchSettings = async () => {\n    try {\n      setLoading(true)\n      const response = await fetch('/api/settings')\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch settings')\n      }\n      \n      const settingsData = await response.json()\n      setSettings(settingsData)\n    } catch (error) {\n      setMessage(`Error: ${error.message}`)\n    } finally {\n      setLoading(false)\n    }\n  }\n  \n  const updateSettings = async (updates: Partial<UserSettings>) => {\n    try {\n      setSaving(true)\n      setMessage('')\n      \n      const response = await fetch('/api/settings', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates)\n      })\n      \n      if (!response.ok) {\n        throw new Error('Failed to update settings')\n      }\n      \n      await fetchSettings() // Refresh settings\n      setMessage('Settings updated successfully')\n    } catch (error) {\n      setMessage(`Error: ${error.message}`)\n    } finally {\n      setSaving(false)\n    }\n  }\n  \n  const handlePreferenceChange = (key: string, value: any) => {\n    if (!settings) return\n    \n    const updatedPreferences = {\n      ...settings.preferences,\n      [key]: value\n    }\n    \n    updateSettings({ preferences: updatedPreferences })\n  }\n  \n  const handleNotificationChange = (category: string, key: string, value: any) => {\n    if (!settings) return\n    \n    const updatedNotifications = {\n      ...settings.notifications,\n      [category]: {\n        ...settings.notifications[category],\n        [key]: value\n      }\n    }\n    \n    updateSettings({ notifications: updatedNotifications })\n  }\n  \n  if (!session?.user) {\n    return <div>Please sign in to access settings</div>\n  }\n  \n  if (loading) return <div>Loading settings...</div>\n  if (!settings) return <div>Failed to load settings</div>\n  \n  return (\n    <div className=\"settings-page\">\n      <h1>Settings</h1>\n      \n      {message && (\n        <div className={`message ${message.includes('Error') ? 'error' : 'success'}`}>\n          {message}\n        </div>\n      )}\n      \n      <div className=\"settings-tabs\">\n        <button \n          className={section === 'preferences' ? 'active' : ''}\n          onClick={() => setSection('preferences')}\n        >\n          Preferences\n        </button>\n        <button \n          className={section === 'notifications' ? 'active' : ''}\n          onClick={() => setSection('notifications')}\n        >\n          Notifications\n        </button>\n        <button \n          className={section === 'privacy' ? 'active' : ''}\n          onClick={() => setSection('privacy')}\n        >\n          Privacy\n        </button>\n      </div>\n      \n      <div className=\"settings-content\">\n        {section === 'preferences' && (\n          <PreferencesSection\n            preferences={settings.preferences}\n            onChange={handlePreferenceChange}\n            disabled={saving}\n          />\n        )}\n        \n        {section === 'notifications' && (\n          <NotificationsSection\n            notifications={settings.notifications}\n            onChange={handleNotificationChange}\n            disabled={saving}\n          />\n        )}\n        \n        {section === 'privacy' && (\n          <PrivacySection\n            privacy={settings.privacy}\n            onChange={(updates) => updateSettings({ privacy: updates })}\n            disabled={saving}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"curl-examples",children:"cURL Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Get user settings\ncurl -X GET "https://ring.ck.ua/api/settings" \\\n  -H "Authorization: Bearer session-token" \\\n  -H "Accept: application/json"\n\n# Update preferences\ncurl -X PUT "https://ring.ck.ua/api/settings" \\\n  -H "Authorization: Bearer session-token" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "preferences": {\n      "language": "uk",\n      "theme": "dark"\n    }\n  }\'\n\n# Update notification settings\ncurl -X PUT "https://ring.ck.ua/api/settings" \\\n  -H "Authorization: Bearer session-token" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "notifications": {\n      "email": {\n        "enabled": false\n      },\n      "push": {\n        "enabled": true,\n        "types": {\n          "messages": true,\n          "opportunities": false\n        }\n      }\n    }\n  }\'\n\n# Reset settings\ncurl -X POST "https://ring.ck.ua/api/settings/reset" \\\n  -H "Authorization: Bearer session-token" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "sections": ["notifications"],\n    "confirmReset": true\n  }\'\n'})}),"\n",(0,i.jsx)(n.h2,{id:"settings-categories",children:"Settings Categories"}),"\n",(0,i.jsx)(n.h3,{id:"preferences",children:"Preferences"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Language"}),": Interface language (en, uk)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Theme"}),": Visual theme (light, dark, auto)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Timezone"}),": User timezone for date/time display"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Date Format"}),": Date display format"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Time Format"}),": 12-hour or 24-hour time"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"notifications",children:"Notifications"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Email"}),": Email notification preferences and frequency"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Push"}),": Browser/mobile push notifications"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SMS"}),": SMS notifications for critical events"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"In-App"}),": Application notification settings"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"privacy",children:"Privacy"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Profile Visibility"}),": Public, private, or members-only"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Information Sharing"}),": Control what information is visible"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Communication"}),": Who can contact the user"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Search"}),": Whether profile appears in search results"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"security",children:"Security"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Two-Factor Authentication"}),": 2FA settings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Session Management"}),": Session timeout and device tracking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Login Notifications"}),": Alerts for new logins"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Device Management"}),": Trusted devices"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"content",children:"Content"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Media Settings"}),": Autoplay and image display preferences"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Language Filters"}),": Content language preferences"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Content Filtering"}),": NSFW and content type filters"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"accessibility",children:"Accessibility"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual"}),": High contrast, large text options"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Motion"}),": Reduced motion preferences"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Screen Reader"}),": Screen reader compatibility"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.h3,{id:"validation-errors-400",children:"Validation Errors (400)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "error": "VALIDATION_ERROR",\n  "message": "Invalid settings data",\n  "details": [\n    {\n      "field": "preferences.language",\n      "message": "Language must be \'en\' or \'uk\'"\n    },\n    {\n      "field": "notifications.email.frequency",\n      "message": "Frequency must be \'immediate\', \'daily\', or \'weekly\'"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"unauthorized-401",children:"Unauthorized (401)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "error": "UNAUTHORIZED",\n  "message": "Authentication required"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"settings-not-found-404",children:"Settings Not Found (404)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "error": "SETTINGS_NOT_FOUND",\n  "message": "User settings not found"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"default-settings",children:"Default Settings"}),"\n",(0,i.jsx)(n.h3,{id:"new-user-defaults",children:"New User Defaults"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "preferences": {\n    "language": "en",\n    "theme": "light",\n    "timezone": "UTC",\n    "dateFormat": "MM/DD/YYYY",\n    "timeFormat": "12h"\n  },\n  "notifications": {\n    "email": {\n      "enabled": true,\n      "frequency": "immediate",\n      "types": {\n        "news": true,\n        "opportunities": true,\n        "messages": true,\n        "systemUpdates": true,\n        "marketing": false\n      }\n    },\n    "push": {\n      "enabled": true,\n      "types": {\n        "messages": true,\n        "opportunities": true,\n        "news": false,\n        "systemUpdates": true\n      }\n    },\n    "sms": {\n      "enabled": false,\n      "types": {\n        "security": true,\n        "urgent": false\n      }\n    }\n  },\n  "privacy": {\n    "profileVisibility": "public",\n    "showEmail": false,\n    "showWalletAddress": false,\n    "showLocation": true,\n    "allowDirectMessages": true,\n    "searchableProfile": true\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"related-endpoints",children:"Related Endpoints"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/ring/ru/docs/api/profile",children:(0,i.jsx)(n.code,{children:"/api/profile"})})," - User profile management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/ring/ru/docs/api/notifications",children:(0,i.jsx)(n.code,{children:"/api/notifications/preferences"})})," - Notification preferences"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/ring/ru/docs/api/auth-nextauth",children:(0,i.jsx)(n.code,{children:"/api/auth/[...nextauth]"})})," - Authentication settings"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"describe('Settings API', () => {\n  test('should get user settings', async () => {\n    const response = await request(app)\n      .get('/api/settings')\n      .set('Authorization', `Bearer ${validToken}`)\n      .expect(200)\n    \n    expect(response.body).toHaveProperty('preferences')\n    expect(response.body).toHaveProperty('notifications')\n    expect(response.body).toHaveProperty('privacy')\n  })\n  \n  test('should update settings', async () => {\n    const updates = {\n      preferences: { theme: 'dark' },\n      notifications: { email: { enabled: false } }\n    }\n    \n    const response = await request(app)\n      .put('/api/settings')\n      .set('Authorization', `Bearer ${validToken}`)\n      .send(updates)\n      .expect(200)\n    \n    expect(response.body.success).toBe(true)\n  })\n  \n  test('should validate settings data', async () => {\n    const invalidData = {\n      preferences: { language: 'invalid' }\n    }\n    \n    await request(app)\n      .put('/api/settings')\n      .set('Authorization', `Bearer ${validToken}`)\n      .send(invalidData)\n      .expect(400)\n  })\n})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue"}),': "Settings not found"\n',(0,i.jsx)(n.strong,{children:"Solution"}),": Settings are created automatically on first access"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue"}),': "Invalid language code"\n',(0,i.jsx)(n.strong,{children:"Solution"}),": Use supported language codes (en, uk)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue"}),': "Notification update failed"\n',(0,i.jsx)(n.strong,{children:"Solution"}),": Check notification type and frequency values"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue"}),': "Privacy settings not saving"\n',(0,i.jsx)(n.strong,{children:"Solution"}),": Ensure all privacy fields have valid boolean values"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(96540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);